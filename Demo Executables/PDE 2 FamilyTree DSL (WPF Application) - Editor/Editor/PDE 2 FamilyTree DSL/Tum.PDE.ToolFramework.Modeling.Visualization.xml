<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tum.PDE.ToolFramework.Modeling.Visualization</name>
    </assembly>
    <members>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.UI.WaitCursor">
            <summary>
            This class implements a disposable WaitCursor to 
            show an hourglass while some long-running event occurs.
            </summary>
            <example>
            <![CDATA[
            
            using (new WaitCursor())
            {
               .. Do work here ..
            }
            
            ]]>
            </example>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.UI.WaitCursor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.UI.WaitCursor.Dispose">
            <summary>
            Invoked when this object is being removed from the application
            and will be subject to garbage collection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.UI.WaitCursor.Dispose(System.Boolean)">
            <summary>
            Returns the cursor to the default state.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService">
            <summary>
            This class implements the IUIVisualizerService for WPF purposes.
            This implementation HAD TO be in the Main project, as
            it needs to know about Popup windows that is not known about in 
            the Cinch project.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService">
            <summary>
            This interface defines a UI controller which can be used to display dialogs
            in either modal or modaless form from a ViewModel.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers a type through a key.
            </summary>
            <param name="key">Key for the UI dialog</param>
            <param name="winType">Type which implements dialog</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService.TryRegister(System.String,System.Type)">
            <summary>
            Registers a type through a key. If a given key already exists, no action is taken.
            </summary>
            <param name="key">Key for the UI dialog</param>
            <param name="winType">Type which implements dialog</param>
            <returns>True if the registration succeeded. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters a type and removes it from the mapping
            </summary>
            <param name="key">Key to remove</param>
            <returns>True/False success</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService.Show(System.String,System.Object,System.Boolean,System.EventHandler{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs})">
            <summary>
            This method displays a modaless dialog associated with the given key.
            </summary>
            <param name="key">Key previously registered with the UI controller.</param>
            <param name="state">Object state to associate with the dialog</param>
            <param name="setOwner">Set the owner of the window</param>
            <param name="completedProc">Callback used when UI closes (may be null)</param>
            <returns>True/False if UI is displayed</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IUIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            This method displays a modal dialog associated with the given key.
            </summary>
            <param name="key">Key previously registered with the UI controller.</param>
            <param name="state">Object state to associate with the dialog</param>
            <returns>True/False if UI is displayed.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.Register(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Registers a collection of entries
            </summary>
            <param name="startupData"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers a type through a key.
            </summary>
            <param name="key">Key for the UI dialog</param>
            <param name="winType">Type which implements dialog</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.TryRegister(System.String,System.Type)">
            <summary>
            Registers a type through a key. If a given key already exists, no action is taken.
            </summary>
            <param name="key">Key for the UI dialog</param>
            <param name="winType">Type which implements dialog</param>
            <returns>True if the registration succeeded. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters a type and removes it from the mapping
            </summary>
            <param name="key">Key to remove</param>
            <returns>True/False success</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.Show(System.String,System.Object,System.Boolean,System.EventHandler{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs})">
            <summary>
            This method displays a modaless dialog associated with the given key.
            </summary>
            <param name="key">Key previously registered with the UI controller.</param>
            <param name="state">Object state to associate with the dialog</param>
            <param name="setOwner">Set the owner of the window</param>
            <param name="completedProc">Callback used when UI closes (may be null)</param>
            <returns>True/False if UI is displayed</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            This method displays a modal dialog associated with the given key.
            </summary>
            <param name="key">Key previously registered with the UI controller.</param>
            <param name="state">Object state to associate with the dialog</param>
            <returns>True/False if UI is displayed.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UIVisualizerService.CreateWindow(System.String,System.Object,System.Boolean,System.EventHandler{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the WPF window from a key.
            </summary>
            <param name="key">Key</param>
            <param name="dataContext">DataContext (state) object</param>
            <param name="setOwner">True/False to set ownership to MainWindow</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>Success code</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel">
            <summary>
            This abstract class represents a search view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel">
            <summary>
            This is the base class for any view model, which view is displayed in a docking tab (avalon dock).
            
            This is used for the model tree, property grid, error list and any custom view the user provides.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel">
            <summary>
            This is the base view model for any view model that can be hosted within a docking window. As such, it can
            be activated to be the main activated view and it can also host elements.
            </summary>
            <remarks>
            This view model provides default menu commands which consist of
            - Delete,
            - Cut,
            - Copy,
            - Paste,
            - Undo,
            - Redo,
            - Validate
            
            You should override the corresponding On**CanExecute and On**Executed to specify custom behaviour if needed. By default,
            only the undo and redo commands are binded to specific actions (Executing the ModelData undo and redo methods).
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel">
            <summary>
            This abstract class represents the view model that used as a base class for each concreate view model.
            </summary>
            <remarks>
            ServiceProvider.. from the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel">
            <summary>
            Interface for a base view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.ViewModelStore">
            <summary>
            Gets the view model store this view model belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.ModelData">
            <summary>
            Gets the document data containing the domain model data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.Store">
            <summary>
            Gets the store containing the domain model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.EventManager">
            <summary>
            Event manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.Id">
            <summary>
            Gets the id of this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IBaseViewModel.GlobalServiceProvider">
            <summary>
            Gets the global service provider.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.SetupServices">
            <summary>
            Setup services.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.#cctor">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bCallIntialize">True if the Initialize method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Initialize">
            <summary>
            This method is used to initalize the view model and can be overriden for customization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.ResolveService``1">
            <summary>
            This resolves a service type and returns the implementation.
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>Implementation</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current BaseViewModel.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
            Called whenever a specific property changes.
            </summary>
            <param name="name">Name of the property, which value changed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Dispose">
            <summary>
            Invoked when this object is being removed from the application
            and will be subject to garbage collection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Dispose(System.Boolean)">
            <summary>
            Dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.OnDispose">
            <summary>
            Child classes can override this method to perform  clean-up logic, such as removing event handlers.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.ViewModelStore">
            <summary>
            Gets the view model store this view model belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.ModelData">
            <summary>
            Gets the document data containing the domain model data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Store">
            <summary>
            Gets the store containing the domain model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.EventManager">
            <summary>
            Event manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.Id">
            <summary>
            Gets the id of this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.GlobalServiceProvider">
            <summary>
            Gets the global service provider.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.IsDisposed">
            <summary>
            Gets whether this view model was already disposed or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.IsDisposing">
            <summary>
            Gets whether this view model is currently beeing disposed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel.UserData">
            <summary>
            Gets or sets user specific data.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.isActiveView">
            <summary>
            Is view active value holder.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.isReseting">
            <summary>
            Is view reseting value holder.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bCallIntialize">True if the Initialize method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.UpdateCommandsCanExecute">
            <summary>
            Raises commands can execute event.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnDeleteCommandCanExecute">
            <summary>
            Delete command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnCutCommandCanExecute">
            <summary>
            Cut command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnCopyCommandCanExecute">
            <summary>
            Copy command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnPasteCommandCanExecute">
            <summary>
            Paste command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnUndoCommandCanExecute">
            <summary>
            Undo command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnRedoCommandCanExecute">
            <summary>
            Redo command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnValidateCommandCanExecute">
            <summary>
            Validate command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnDeleteCommandExecuted">
            <summary>
            Delete command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnCutCommandExecuted">
            <summary>
            Cut command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnCopyCommandExecuted">
            <summary>
            Copy command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnPasteCommandExecuted">
            <summary>
            Paste command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnUndoCommandExecuted">
            <summary>
            Undo command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnRedoCommandExecuted">
            <summary>
            Redo command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnValidateCommandExecuted">
            <summary>
            Validate command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnCultureInfoChanged(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs)">
            <summary>
            Culture info changed event.
            </summary>
            <param name="args">CultureInfo changed event arguments.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnReset">
            <summary>
            Reset ressources.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.Reset(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventArgs)">
            <summary>
            Reset ressources.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnActivated">
            <summary>
            Called whenever the view is activated
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnLoaded">
            <summary>
            Called when the view is loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnDocumentLoaded">
            <summary>
            Called whenever a document is loaded in this context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnDocumentClosed">
            <summary>
            Called whenever a document is closed in this context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnUnloaded">
            <summary>
            Called when the view is unloaded
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.OnDispose">
            <summary>
            Clean-up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.DeleteCommand">
            <summary>
            Delete command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.CutCommand">
            <summary>
            Cut command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.CopyCommand">
            <summary>
            Copy command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.PasteCommand">
            <summary>
            Paste command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.UndoCommand">
            <summary>
            Undo command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.RedoCommand">
            <summary>
            Redo command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.ValidateCommand">
            <summary>
            Validate command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.IsReseting">
            <summary>
            True if the view model is reseting; False otherwise.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.LoadedCommand">
            <summary>
            Command, which is called from the ui when the view is loaded.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.UnloadedCommand">
            <summary>
            Command, which is called from the ui when the view is unloaded.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseHostingViewModel.IsActiveView">
            <summary>
            Gets or sets whether this view is the currently active view in the application.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel">
            <summary>
            This interface provides properties, that are required for a view model, that is presented in a dockable window pane.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.InitializeVM">
            <summary>
            Initialization.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneName">
            <summary>
            Unique name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneType">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneTitle">
            <summary>
            Title of the dockable window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneImageUri">
            <summary>
            Gets the header image URI.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.IsDockingPaneVisible">
            <summary>
            Is dockable window visible.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.FloatingWindowDesiredWidth">
            <summary>
            Gets the floating windows desired width;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.FloatingWindowDesiredHeight">
            <summary>
            Gets the floating windows desired height;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockedWindowDesiredWidth">
            <summary>
            Gets the docked windows desired width;  Default = 0.0 --> handle automatically.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockedWindowDesiredHeight">
            <summary>
            Gets the docked windows desired height; Default = 0.0 --> handle automatically.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.ActivationMode">
            <summary>
            Gets the activation mode.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneStyle">
            <summary>
            Gets the docking pane style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingPaneAnchorStyle">
            <summary>
            Gets the docking pane anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.DockingContextChangeKind">
            <summary>
            Gets the context change kind.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.HideOnClose">
            <summary>
            Gets whether this vm should only be hidden whenever its closed. Otherwise, the vm is removed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel.IsInitialized">
            <summary>
            Gets or sets whether this vm has been initialized or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRibbonDockableViewModel">
            <summary>
            Interface specifying that the vm can create ribbon menus.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRibbonDockableViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            This method needs to overriden in the actual instances of this class to create contextual
            or regular ribbon bars if required.
            </summary>
            <param name="ribbonMenu">Main ribbon menu.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRibbonDockableViewModel.IsRibbonMenuInitialized">
            <summary>
            Gets or sets wether the ribbon menu has been initialized or not.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bCallIntialize">True if the Initialize method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.PreInitialize">
            <summary>
            Intialization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.InitializeVM">
            <summary>
            Initialize vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.Initialize">
            <summary>
            Intialization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.ShowRibbonMenu(Fluent.Ribbon)">
            <summary>
            This method is called once this docking window becomes active. 
            This method needs to overriden in the actual instances of this class to show contextual ribbon bars if required.
            </summary>
            <param name="ribbonMenu">Main ribbon menu.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.HideRibbonMenu(Fluent.Ribbon)">
            <summary>
            This method is called once this docking window becomes inactive. 
            This method needs to overriden in the actual instances of this class to hide contextual ribbon bars.
            </summary>
            <param name="ribbonMenu">Main ribbon menu.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            This method needs to overriden in the actual instances of this class to create contextual
            or regular ribbon bars if required.
            </summary>
            <param name="ribbonMenu">Main ribbon menu.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.OnDocumentClosed">
            <summary>
            Hide ribbon menu on document closed if this is the active view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.OnDocumentLoaded">
            <summary>
            Show ribbon menu on document loaded if this is the active view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.OnVisibilityChanged(System.Boolean)">
            <summary>
            This method is called whenever the visibility changes.
            </summary>
            <param name="bVisible"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.ShowDockingPaneCommand_Executed">
            <summary>
            ShowDockingPaneCommand executed. Publishes the ShowViewModelRequestEvent, so that this view model is
            opened in the application.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.IsInitialized">
            <summary>
            Gets or sets whether this vm has been initialized or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.HideOnClose">
            <summary>
            Gets whether this vm should only be hidden whenever its closed. Otherwise, the vm is removed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneImageUri">
            <summary>
            Gets the header image URI.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.FloatingWindowDesiredWidth">
            <summary>
            Gets the floating windows desired width;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.FloatingWindowDesiredHeight">
            <summary>
            Gets the floating windows desired height;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.ActivationMode">
            <summary>
            Gets the activation mode.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneName">
            <summary>
            Unique name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneTitle">
            <summary>
            Title of the dockable window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.IsDockingPaneVisible">
            <summary>
            Is dockable window visible.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockedWindowDesiredWidth">
            <summary>
            Gets the docked windows desired width;  Default = 0.0 --> handle automatically.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockedWindowDesiredHeight">
            <summary>
            Gets the docked windows desired height; Default = 0.0 --> handle automatically.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneStyle">
            <summary>
            Gets the docking pane style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneAnchorStyle">
            <summary>
            Gets the docking pane anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingContextChangeKind">
            <summary>
            Gets the context change kind. The default value is PreviewMouseDown.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.DockingPaneType">
            <summary>
            Type of this vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.Ribbon">
            <summary>
            Gets the ribbon menu.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.IsRibbonMenuInitialized">
            <summary>
            Gets or sets wether the ribbon menu has been initialized or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.IsActiveView">
            <summary>
            Gets or sets whether this view is the currently active view in the application.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel.ShowDockingPaneCommand">
            <summary>
            Show docking pane command.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.PreInitialize">
            <summary>
            Preinit.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.InitializeSearchOptions">
            <summary>
            Initializes the  search criteria list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.CreateOptionsSummary(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs)">
            <summary>
            Creates an options summary as a string.
            </summary>
            <returns>Options summary as string.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.CreateOptionsSummary">
            <summary>
            Creates an options summary as a string.
            </summary>
            <returns>Options summary as string.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.ReactOnSearchRequest(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs)">
            <summary>
            Reactns on a SearchEvent beeing received.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchAdvancedCommand_Executed">
            <summary>
            Search advanced command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchAndReplaceCommand_Executed">
            <summary>
            Search and replace command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.ShowSearchOptionsViewModel">
            <summary>
            Show search options view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.Search(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs)">
            <summary>
            Search.
            </summary>
            <param name="args">Search data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.OnReset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.DockingPaneName">
            <summary>
            Unique name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.DockingPaneTitle">
            <summary>
            Title of the dockable window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchSource">
            <summary>
            Gets the search sources.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SelectedSearchSource">
            <summary>
            Gets or sets the selected search source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchCriteria">
            <summary>
            Gets the search criteria.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SelectedSearchCriteria">
            <summary>
            Gets or sets the selected search criteria.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SelectedSearchCriteriaInResult">
            <summary>
            Gets or sets the selected search criteria in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchText">
            <summary>
            Gets or sets the search text.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchTextInResult">
            <summary>
            Gets or sets the search text in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.DoFindInResult">
            <summary>
            Gets or sets the DoFindInResult property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.DoMatchCase">
            <summary>
            Gets or sets the DoMatchCase property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.DoMatchWholeWord">
            <summary>
            Gets or sets the DoMatchWholeWord property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchResultViewModel">
            <summary>
            Gets the search result view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchCommand">
            <summary>
            Search command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchAdvancedCommand">
            <summary>
            Search advanced command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchAndReplaceCommand">
            <summary>
            Search and replace command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchViewModel.SearchModus">
            <summary>
            Gets or sets the search modus.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchModus">
            <summary>
            Search modus enumeration.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchModus.SearchAdvanced">
            <summary>
            Advanced search mode.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchModus.SearchAndReplace">
            <summary>
            Search and replace mode.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription">
            <summary>
             Defines a contract for an event subscription to be used by <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase"/>.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a Microsoft.Practices.Composite.Events.SubscriptionToken that identifies this IEventSubscription/&gt;.
            </summary>
            <value>A token that identifies this <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/>.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase">
            <summary>
             Defines a base class to publish and subscribe to events.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase.InternalSubscribe(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null"/> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase.Unsubscribe(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <seealso cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> returned by <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase.Contains(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> returned by <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent">
            <summary>
            Notifies that a model role player has been moved.
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementEvent`1">
            <summary>
            Base model element event class, which includes notifications based on DomainClassInfo.
            </summary>
            <typeparam name="T">Needs to be derived from ElementEventArgs.</typeparam>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEvent`1">
            <summary>
            Generic Viewmodel event.
            </summary>
            <typeparam name="T">Type of the event args data..</typeparam>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.PublisherThread"/>.
            <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Subscribe(System.Action{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            CompositePresentationEvent will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Subscribe(System.Action{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Subscribe(System.Action{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption,System.Boolean,System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <seealso cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <seealso cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1.UIDispatcher">
            <summary>
            Gets the <see cref="T:System.Windows.Threading.Dispatcher"/> that is bound to the UI elements.
            </summary>
            <value>The <see cref="T:System.Windows.Threading.Dispatcher"/> to use when subscribing using <see cref="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.UIThread"/>.</value>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementEvent`1.Subscribe(Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Action{`0})">
            <summary>
            Subscribe to the event. The observer will be notified, whenever a model element of
            the given domain class type (which does include all descendants) is included in the
            specific event.
            </summary>
            <param name="domainClassInfo">DomainClassInfo specifying when to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementEvent`1.Publish(`0)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementEvent`1.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.GenericEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementEvent`1.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainClassInfo,System.Action{`0})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainClassInfo">DomainClassInfo specifying from what to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.Subscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs})">
            <summary>
            Subscribes to the role player changed event. Observers are notified, whenever role player changes on a
            specific model element.
            </summary>
            <param name="elementId">Id of the model element, on which role player changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs})">
            <summary>
            Subscribes to the role player changed event.
            </summary>
            <param name="domainRelationshipInfo">RelationshipInfo, which changes cause a notification.</param>
            <param name="elementId">Id of the role player, on which role changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.Publish(Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.Unsubscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="elementId">Model element id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerMovedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRelationshipInfo">Domain relationship info specifying when to unsubscribe.</param>
            <param name="elementId">Role player id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.BringToFrontViewModelRequestEvent">
            <summary>
            Event, requesting a docking view model to be brought to front by the main view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory">
            <summary>
            This abstract base class provides factory methods for the creation of view model for model elements from the model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constructor.
            </summary>
            <param name="viewModelStore">View model store containing view models.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateDiagramItemViewModel(System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Creates the view model for the given node shape.
            </summary>
            <param name="nodeShapeType">Shape type for which the view model is to be created.</param>
            <param name="diagram">Diagram surface vm.</param>
            <param name="nodeShape">Node shape.</param>
            <returns>
            View model of type DiagramItemElementViewModel if a view model can be created for the given element. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateDiagramLinkViewModel(System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape)">
            <summary>
            Creates the view model for the given link shape.
            </summary>
            <param name="nodeShapeType">Shape type for which the view model is to be created.</param>
            <param name="diagram">Diagram surface vm.</param>
            <param name="nodeShape">Link shape.</param>
            <returns>
            View model of type BaseDiagramItemLinkViewModel if a view model can be created for the given element. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateModelElementBaseViewModel(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates the view model for the given model element. Important: The name property doesnt update on changes
            in the model by default. Specify bHookUpEvents as true if that is needed.
            </summary>
            <param name="modelElement">Model element for which the view model is to be created.</param>
            <returns>
            View model of type BaseModelElementViewModel if a view model can be created for the given element. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateModelElementBaseViewModel(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
            <summary>
            Creates the view model for the given model element.
            </summary>
            <param name="modelElement">Model element for which the view model is to be created.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <returns>
            View model of type BaseModelElementViewModel if a view model can be created for the given element. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateModelElementTreeViewModel(Microsoft.VisualStudio.Modeling.ModelElement,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Creates the tree view model for the given model element. Doesnt hook up into model events and also does not create
            context menus.
            </summary>
            <param name="modelElement">Model element for which the tree view model is to be created.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
            <returns>
            View model of type BaseModelElementTreeViewModel if a view model can be created for the given element. Null otherwise.</returns>
            <remarks>
            A view model of the type BaseModelElementViewModel can obly be created for domain classes and referencing relationships, that
            can be embedded in the model tree.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateModelElementTreeViewModel(Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean,System.Boolean,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Creates the tree view model for the given model element.
            </summary>
            <param name="modelElement">Model element for which the tree view model is to be created.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
            <returns>
            View model of type BaseModelElementTreeViewModel if a view model can be created for the given element. Null otherwise.</returns>
            <remarks>
            A view model of the type BaseModelElementViewModel can obly be created for domain classes and referencing relationships, that
            can be embedded in the model tree.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateModelElementTreeViewModel(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel,System.Boolean,System.Boolean,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Creates the tree view model for the given model element.
            </summary>
            <param name="element">VModell represented by this view model.</param>
            <param name="link">Element link, targeting the hosted element.</param>
            <param name="domainRoleId">Domain role id of the role that the hosted element belongs to.</param>
            <param name="parent">Parent of this view model.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreatePropertyEditorViewModels(Tum.PDE.ToolFramework.Modeling.SelectedItemsCollection)">
            <summary>
            Returns a collection of property view models for the given selected elements.
            </summary>
            <param name="elements">Selected elements collection.</param>
            <returns>Collection of property view models. Can be empty.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.AddPropertyEditorViewModels(System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel},Microsoft.VisualStudio.Modeling.ModelElement,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore})">
            <summary>
            Returns a collection of property view models for the given selected elements.
            </summary>
            <param name="models">Already gathered models.</param>
            <param name="m">ModelElement.</param>
            <param name="handledStores">Stores that have already been processed.</param>
            <returns>Collection of property view models. Can be empty.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateDependencyItemViewModels(System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Gets the dependencies for a specific model elements.
            </summary>
            <param name="modelElements">List of model elements to get the dependencies for.</param>
            <returns>List of dependency item view models.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateRestorableViewModel(System.String)">
            <summary>
            Attempts at creating a view model of a specified type. This is meant to be called for restorable VMs that are in 
            the process of beeing restored.
            </summary>
            <param name="vmType">Type of the vm.</param>
            <returns>VM if succeeded. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.CreateRestorableViewModel(System.String,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore})">
            <summary>
            Attempts at creating a view model of a specified type. This is meant to be called for restorable VMs that are in 
            the process of beeing restored.
            </summary>
            <param name="vmType">Type of the vm.</param>
            <param name="handledStores">Stores that have already been processed.</param>
            <returns>VM if succeeded. Null otherwise.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelFactory.Store">
            <summary>
            Gets the view model store.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter">
            <summary>
            Converts an ICollection to a number that represents how many elements that ICollection contains
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter.AppendValueOnEmpty">
            <summary>
            Value to be appended whenever the collection is empty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter.AppendValueOnOneElement">
            <summary>
            Value to be appended whenever the collection consists of only one element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToNumberConverter.AppendValueOnMultipleElements">
            <summary>
            Value to be appended whenever the collection contains multiple elements.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToDisabledVisibilityConverter">
            <summary>
            Converts a boolean value to collapsed if it is true. Otherwise to true (also if it is null).
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToDisabledVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToDisabledVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFileEntryViewModel">
            <summary>
            This view model is used to represent a most recently used file entry.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFileEntryViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="mruEntry">MRU entry.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFileEntryViewModel.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFileEntryViewModel.ShortName">
            <summary>
            Gets the short name of the file.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFileEntryViewModel.MRUFileEntry">
            <summary>
            Gets the mru file entry.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel">
            <summary>
            This viewmodel is used to display LinkItems.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Base.LinkItem)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="linkItem">Link item to be hosted by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.NavigateCommand_Executed">
            <summary>
            NavigateCommand executed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.Titel">
            <summary>
            Gets the titel of the link item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.Description">
            <summary>
            Gets the description of the link item. Can be null or empty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.Link">
            <summary>
            Gets the link of the link item. Can be null or empty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.Category">
            <summary>
            Gets the category of the link item. Can be null or empty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemViewModel.NavigateCommand">
            <summary>
            Gets the navigate command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemCategoryViewModel">
            <summary>
            Link item category vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemCategoryViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="category">Category.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemCategoryViewModel.Category">
            <summary>
            Gets the category.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemCategoryViewModel.LinkItemVMs">
            <summary>
            Gets or sets link items vms.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel">
            <summary>
            This is the base vm for a specific model element vm.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel">
            <summary>
            This is the base view model which represents a specific model element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Constructor. The view model constructed this way does not react on model changes, as such DoHookUpEvents is false.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element represented by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
            <summary>
            Constructor. This view model constructed with 'bHookUpEvents=true' does react on model changes.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element represented by this view model.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean,System.Boolean)">
            <summary>
            Constructor. This view model constructed with 'bHookUpEvents=true' does react on model changes.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element represented by this view model.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <param name="bCallIntialize">True if Initiliaze method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.OnPasteStatusChanged(System.Boolean)">
            <summary>
            Called whenever paste status changes.
            </summary>
            <param name="bStatus">True if the node is beeing moved. False otherwise</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.NamePropertyChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever the property Name changes its value.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.IsInMoveMode">
            <summary>
            Gets or sets the whether the element hosted by this view model is in paste mode or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.Element">
            <summary>
            Gets the model element (part of the Model), which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementName">
            <summary>
            Gets or sets the value of the property (which is marked as element name)
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementFullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <remarks>
            This is either: ElementName (elemenType) or just ElementType.
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementHasName">
            <summary>
            Gets whether the domain element has a property marked as element name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementType">
            <summary>
            Gets the type of the ModelElement as string.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementTypeDisplayName">
            <summary>
            Gets the display name of the type of the ModelElement.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentHasName">
            <summary>
            True if parent element has a name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentName">
            <summary>
            Returns the parent name (or its type name, if there is no name property).
            If the element doesnt have a parent, null is returned.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentFullName">
            <summary>
            Returns the parent name + (type name) (or its type name, if there is no name property).
            If the element doesnt have a parent, null is returned.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentHasFirstExistingName">
            <summary>
            True if there is a first parent element, which has a DomainElementName name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentFirstExistingName">
            <summary>
            Returns the DomainElementName of the first parent to actually have a name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementHasParentFullPath">
            <summary>
            Returns true if this elements parent has an embedding full path.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DomainElementParentFullPath">
            <summary>
            Returns the full path of the parent element relative to the domain model element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel.DoHookUpEvents">
            <summary>
            Gets whether to hook up into model events.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element to be hosted by this view model.</param>
            <param name="parentVM">Parent view model. Can be null.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element to be hosted by this view model.</param>
            <param name="parentVM">Parent view model. Can be null.</param>
            <param name="bCallInitialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.InitializeRelationships">
            <summary>
            Initialize Relationship children.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.InitializeSubscription">
            <summary>
            Sets up subscription.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.GetInstance">
            <summary>
            Gets an instance of this vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.ShouldCreateVMForNullElements(System.String)">
            <summary>
            
            </summary>
            <param name="type">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.HandleRolePlayerMoved``1(Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs,System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Called on a role player beeing moved.
            </summary>
            <param name="args">Arguments.</param>
            <param name="collection">Collection to reorder.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel.ParentViewModel">
            <summary>
            Gets the parent VM. Can be null.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.VisualTreeExtensions">
            <summary>
            VisualTree extensions.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.VisualTreeExtensions.GetVisualAncestor``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.VisualTreeExtensions.GetVisualAncestor(System.Windows.DependencyObject,System.Type)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.VisualTreeExtensions.GetVisualDescendent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.VisualTreeExtensions.GetVisualDescendents``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDragSource">
            <summary>
            Drag source interface.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDragSource.StartDrag(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo)">
            <summary>
            Start.
            </summary>
            <param name="dragInfo">Info.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IGraphicalDependenciesView">
            <summary>
            Interface specifying a GraphicalDependenciesView.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IGraphicalDependenciesView.GetSize">
            <summary>
            Gets the actual size of the view.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference">
            <summary>
            This class facilitates associating a key binding in XAML markup to a command
            defined in a View Model by exposing a Command dependency property.
            The class derives from Freezable to work around a limitation in WPF when data-binding from XAML.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.CommandProperty">
            <summary>
            Command property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.CanExecute(System.Object)">
            <summary>
            Command can execute.
            </summary>
            <param name="parameter">Command parameter.</param>
            <returns>True if the command can be executed; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.Execute(System.Object)">
            <summary>
            Execute the command.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.CreateInstanceCore">
            <summary>
            Not required.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.Command">
            <summary>
            Gets or sets the command.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.CommandReference.CanExecuteChanged">
            <summary>
            Can execute changed event handler.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectGenericSubViewModel`1">
            <summary>
            Interface describing a selection generic sub view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectGenericSubViewModel`1.SetSelectedElement(`0)">
            <summary>
            Tries to set the selection to the given element.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectGenericSubViewModel`1.IsActive">
            <summary>
            Gets or sets whether this view is active or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectGenericSubViewModel`1.SelectedElement">
            <summary>
            Gets the selected element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyEditorViewModel">
            <summary>
            This is the base property editor class, that subscribes to property changes in the model to
            reflect them on the view model
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel">
            <summary>
            This is the base view model for a property grid editor. A property grid editor allows to edit/view a
            specific property of one model element or of multiple model elements (if not, set 'CanHandleMultipleElements' to false).
            </summary>
            <remarks>
            Each instance of the property grid editor view model is initialized without the concrete binding to the element(s) which is/are
            to be edited. At this point each view model only implements the properties of the actual domain property (name, display name, etc).
            To supply the concrete binding to source elements, SetElement or SetElements need to be called. This is especially needed because we
            allow to edit equal properties of multiple elements (as long as the editor view model allows it).
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPropertyGridEditorViewModel">
            <summary>
            This interfaces ensures necessary properties and methods an implementation of an editor view model is bound to have.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPropertyGridEditorViewModel.PropertyName">
            <summary>
            Gets the name or the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPropertyGridEditorViewModel.PropertyDisplayName">
            <summary>
            Gets the display name of the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPropertyGridEditorViewModel.PropertyCategory">
            <summary>
            Gets or sets the category of the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPropertyGridEditorViewModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.propertyName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.propertyDisplayName">
            <summary>
            Property display name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.propertyDescription">
            <summary>
            Property description.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.propertyCategory">
            <summary>
            Property category.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.isPropertyRequired">
            <summary>
            Is property required.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.isPropertyReadOnly">
            <summary>
            Is property readonly.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SubscribeToModelChanges">
            <summary>
            Subscribes to property values changes in the Model to reflect them onto the property grid. This might be 
            usefull for some editors, not for all.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SetElement(System.Object)">
            <summary>
            Sets the concrete element, which property is to be added/displayed by this editor view model.
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SetElements(System.Collections.Generic.List{System.Object})">
            <summary>
            Sets the concrete elements, which equal property is to be added/displayed by this editor view model.
            </summary>
            <param name="elements">Elements</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a specified property from the given element.
            </summary>
            <param name="element">Element to get the property value from.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Value of the property if the element has the requested property. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.GetPropertyValues(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Gets the values of a specified property from the given elements.
            </summary>
            <param name="elements">Elements to get the property values from.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>List of values. Can be empty.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.GetPropertyDomainObjectId(Microsoft.VisualStudio.Modeling.ModelElement,System.String)">
            <summary>
            Gets the domain property id of a property on a model element.
            </summary>
            <param name="modelElement">Model element containing the named property.</param>
            <param name="propertyName">Property name of the property, for which to get the property domain id.</param>
            <returns>Domain property id if found, null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value to given elements property. Warning: Needs to be called in a transaction
            context, if the assignment of the property value to the property requires for it.
            </summary>
            <param name="element">Element, which property to assign the new value to.</param>
            <param name="propertyName">Property name of the property.</param>
            <param name="value">Value to assign to the property.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.SetPropertyValues(System.Collections.Generic.List{System.Object},System.String,System.Object)">
            <summary>
            Sets the property value to given elements property. Warning: Needs to be called in a transaction
            context, if the assignment of the property value to the property requires for it.
            </summary>
            <param name="elements">Elements, which property to assign the new value to.</param>
            <param name="propertyName">Property name of the property.</param>
            <param name="value">Value to assign to the property.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyType">
            <summary>
            Gets the property type that is edited within this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyName">
            <summary>
            Gets or sets the name or the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyDisplayName">
            <summary>
            Gets or sets the display name of the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyDescription">
            <summary>
            Gets or sets the description of the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyCategory">
            <summary>
            Gets or sets the category of the property, which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.IsPropertyRequired">
            <summary>
            Gets or sets whether the property is required to have a value or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.IsPropertyReadOnly">
            <summary>
            Gets or sets whether this property editor is read-only (property not editable) or not (property editable).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.IsSelected">
            <summary>
            Gets or sets whether this property editor is the currently selected editor or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.IsInitialized">
            <summary>
            Gets whether this editor view model is initialized or not. A editor view model is marked as initialized,
            after the binding to concrete elements (SetElement, SetElements) is supplied.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.Elements">
            <summary>
            Gets the list of objects from the model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel.CanHandleMultipleElements">
            <summary>
            Gets or sets whether this property editor can display/edit a property of multiple elements at the same time or not.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyEditorViewModel.SubscribeToModelChanges">
            <summary>
            Subscribe to model element changes
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyEditorViewModel.OnPropertyChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Update property current value.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyEditorViewModel.OnDispose">
            <summary>
            Unregister from events although they are weak.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorDefaultValuesProvider`1">
            <summary>
            Represents the method that provides a default values collection for a given view model.
            </summary>
            <typeparam name="T">The type of the element. </typeparam>
            <returns>List of default values.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel">
            <summary>
            This is a view model for a model context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Hosted model context.</param>
            <param name="mainViewModel">Main view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.AddAdditionalViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel)">
            <summary>
            Adds a view model as a child model of this view model.
            </summary>
            <param name="viewModel">View model to add to the children collection.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.AddPluginViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel)">
            <summary>
            Adds a view model as a child model of this view model.
            </summary>
            <param name="viewModel">View model to add to the children collection.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.AddPlugin(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin)">
            <summary>
            Adds a plugin to this context.
            </summary>
            <param name="plugin">Plugin to add to this context</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.ExecutePluginCommandExecuted(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin)">
            <summary>
            Executes a plugins command.
            </summary>
            <param name="plugin">Plugin</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.PreInitialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.InitializeMC">
            <summary>
            Initialization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.Reset">
            <summary>
            Reset ressources.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.OnDocumentLoaded">
            <summary>
            Called whenever a document is loaded in this context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.OnDocumentClosed">
            <summary>
            Called whenever a document is closed in this context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.OnActivated">
            <summary>
            This method is called when the model context becomes active.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.SelectModelContextCommand">
            <summary>
            Gets the selectModelContextCommand.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.Titel">
            <summary>
            Gets the hosted contexts titel.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.IsSelected">
            <summary>
            Gets or sets the isSelected property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.ModelContext">
            <summary>
            Gets the hosted model context.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.MainViewModel">
            <summary>
            Gets the MainViewModel this vm belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.WindowTitle">
            <summary>
            Gets the window title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.EditorTitle">
            <summary>
            Gets the editor title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.ModelTitle">
            <summary>
            Gets the current model title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.DiagramSurfaceModel">
            <summary>
            Gets or sets the view model used for the default diagram surface.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.AllDiagramSurfaceModels">
            <summary>
            Gets all diagram surface view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.AdditionalDiagramSurfaceModels">
            <summary>
            Gets additional diagram surface view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.PluginDiagramSurfaceModels">
            <summary>
            Gets diagram surface view model that were supplied as plugins.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.HasAdditionalDiagramSurfaceModels">
            <summary>
            Gets wether there are additional diagam surface view models or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.HasPluginDiagramSurfaceModels">
            <summary>
            Gets wether there are diagam surface view models that were provided as plugins or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.HasPlugins">
            <summary>
            Gets wether there are diagam surface view models that were provided as plugins or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.Plugins">
            <summary>
            Gets the context plugins.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel.ExecutePluginCommand">
            <summary>
            Gets the execute plugin command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption">
            <summary>
            Specifies on which thread a <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.PublisherThread">
            <summary>
            The call is done on the same thread on which the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.CompositePresentationEvent`1"/> was published.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.UIThread">
            <summary>
            The call is done on the UI thread.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.ThreadOption.BackgroundThread">
            <summary>
            The call is done asynchronously on a background thread.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs">
            <summary>
            Search event data.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventArgs">
            <summary>
            Viewmodel event data.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that is the source of the event invocation.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventArgs.SourceViewModel">
            <summary>
            Gets the source view model which triggered the event.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.#ctor(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.#ctor(System.String,System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SelectedSearchSource">
            <summary>
            Gets the selected search source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SelectedSearchSourceElements">
            <summary>
            Gets the search source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SelectedSearchCriteria">
            <summary>
            Gets the selected search criteria.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SelectedSearchCriteriaInResult">
            <summary>
            Gets the selected search criteria in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SearchText">
            <summary>
            Gets or sets the search text.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.SearchTextInResult">
            <summary>
            Gets or sets the search text in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.DoFindInResult">
            <summary>
            Gets or sets the DoFindInResult property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.DoMatchCase">
            <summary>
            Gets or sets the DoMatchCase property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEventArgs.DoMatchWholeWord">
            <summary>
            Gets or sets the DoMatchWholeWord property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementDeletedEvent">
            <summary>
            Notifies that a model element has been deleted from the domain model.
            
            Such a notification can either be received for a domain class type (DomainClassInfo) or for
            specific domain classes identified by their Ids.
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementDeletedEvent.Subscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs})">
            <summary>
            Register an observer for a notification, which is fired when the model element with the given Id is deleted from
            the domain model.
            </summary>
            <param name="id">ModelElement Id, specifying when to notify observers.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementDeletedEvent.Publish(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementDeletedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementDeletedEvent.Unsubscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="id">DomainClass id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel">
            <summary>
            View model used for the error list.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.FilterFileNameExtension">
            <summary>
            Extension name to store filtered errors information.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnDocumentClosed">
            <summary>
            Document closed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnDocumentLoaded">
            <summary>
            Document loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnDocumentClosing(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentEventArgs)">
            <summary>
            Document closing.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnDocumentSaved(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentEventArgs)">
            <summary>
            Document saved.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnCopyCommandCanExecute">
            <summary>
            Copy command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnCopyCommandExecuted">
            <summary>
            Copy command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleErrorCategory_Executed">
            <summary>
            ToggleErrorCategory executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleMessageCategory_Executed">
            <summary>
            ToggleMessageCategory executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleWarningCategory_Executed">
            <summary>
            ToggleWarningCategory executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleFilteredItems_Executed">
            <summary>
            ToggleFilteredItems executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.NavigateCommand_Executed">
            <summary>
            NavigateCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.FilterCommand_Executed">
            <summary>
            FilterCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.UnfilterCommand_Executed">
            <summary>
            UnfilterCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByDescriptionCommand_Executed">
            <summary>
            SortByDescriptionCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByNumberCommand_Executed">
            <summary>
            SortByNumberCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByCategoryCommand_Executed">
            <summary>
            SortByCategoryCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortBySourceDisplayNameCommand_Executed">
            <summary>
            SortBySourceDisplayNameCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.Sort(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder,System.Boolean)">
            <summary>
            Sorts the error list.
            </summary>
            <param name="order">Order to sort the error list by.</param>
            <param name="bAscending">Ascending or descending order.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.HideItems(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory)">
            <summary>
            Removes the items of a specific category from Error List window.
            </summary>
            <param name="itemsCategory">Category of items to hide.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ShowItems(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory)">
            <summary>
            Show items of a specific category in Error List window.
            </summary>
            <param name="itemsCategory">Category of items to show.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.UpdateDisplayList">
            <summary>
            Updates the items in the display list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.AddItem(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel)">
            <summary>
            Add an error item to the error list.
            </summary>
            <param name="item">Error item to add.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.AddItems(System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel})">
            <summary>
            Add multiple error items to the error list.
            </summary>
            <param name="items">Error items to add.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ClearItems(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel)">
            <summary>
            Removes all items from the error list.
            </summary>
            <param name="model">Source view model that triggered that notification.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.RemoveItem(System.Guid)">
            <summary>
            Removes a specific error list item vm from the error list.
            </summary>
            <param name="id">If of the vm to be removed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.OnReset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.DockingPaneName">
            <summary>
            Unique name of the error list docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.DockingPaneTitle">
            <summary>
            Title of the docking windo.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.DisplayedErrorList">
            <summary>
            Gets the current error list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SelectedItems">
            <summary>
            Selected items collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.MenuOptions">
            <summary>
            Context menu options.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortOrder">
            <summary>
            Sort order in the error list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.IsSortedAscending">
            <summary>
            Ascending or descending sort order.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ErrorsCount">
            <summary>
            Gets the number of errors in the list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.MessagesCount">
            <summary>
            Gets the number of messages in the list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.WarningsCount">
            <summary>
            Gets the number of warnings in the list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.FilteredCount">
            <summary>
            Gets the number of filtered errors in the list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.IsErrorCategoryVisible">
            <summary>
            Gets whether the error category is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.IsWarningCategoryVisible">
            <summary>
            Gets whether the warning category is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.IsMessageCategoryVisible">
            <summary>
            Gets whether the message category is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.IsFilteredCategoryVisible">
            <summary>
            Gets whether the filtered category is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleErrorCategory">
            <summary>
            Toggle error category command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleMessageCategory">
            <summary>
            Toggle message category command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleWarningCategory">
            <summary>
            Toggle warning category command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.ToggleFilteredItems">
            <summary>
            Toggle filtered items command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.NavigateCommand">
            <summary>
            Navigate command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.FilterCommand">
            <summary>
            Filter command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.UnfilterCommand">
            <summary>
            Unfilter command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByDescriptionCommand">
            <summary>
            Sort by description command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByNumberCommand">
            <summary>
            Sort by number command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortByCategoryCommand">
            <summary>
            Sort by category command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainErrorListViewModel.SortBySourceDisplayNameCommand">
            <summary>
            Sort by source display name command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel">
            <summary>
            This base class represents a filterable error list item view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel">
            <summary>
            This is the base view model class for a error list item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="category">Error category of the error.</param>
            <param name="description">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="description">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.NavigationCommand_Executed">
            <summary>
            NavigationCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.Navigate">
            <summary>
            Called when user double-click the item in the Error List. 
            Should be overriden in an actual derived instance of this class if its needed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.Category">
            <summary>
            Gets or sets the error category.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.Description">
            <summary>
            Gets or sets the error description.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.Number">
            <summary>
            Gets or sets the number of this error in the error list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.SourceDisplayName">
            <summary>
            Gets or sets the source display name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.BaseErrorListItemViewModel.NavigationCommand">
            <summary>
            Gets the navigation command.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="errorId">Error id.</param>
            <param name="category">Error category of the error.</param>
            <param name="description">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="errorId">Error id.</param>
            <param name="description">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel.GetUniqueId">
            <summary>
            This method provides an unique id for the item. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel.ErrorId">
            <summary>
            Identification of the error.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.FilterableErrorListItemViewModel.IsFiltered">
            <summary>
            Gets or set whether this item is filtered or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle">
            <summary>
            Docking pane styles.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle.Docked">
            <summary>
            Normally docked pane.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle.DockedInDocumentPane">
            <summary>
            Docked in the document pane.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle.Floating">
            <summary>
            Floating pane.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle">
            <summary>
            Docking anchor types.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle.None">
            <summary>
            No anchor style, while content is hosted in a DocumentPane or a FloatingWindow
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle.Top">
            <summary>
            Top border anchor
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle.Left">
            <summary>
            Left border anchor
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle.Bottom">
            <summary>
            Bottom border anchor
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle.Right">
            <summary>
            Right border anchor
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingContextChangeKind">
            <summary>
            Docking context change kind specifying when a docking content is to be activated.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingContextChangeKind.PreviewMouseDown">
            <summary>
            Activate content whenever a mouse down event occurs.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingContextChangeKind.PreviewMouseUp">
            <summary>
            Activate content whenever a mouse up event occurs.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ActivePaneChangedEventArgs">
            <summary>
            Event args for the activa pance changed event.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ActivePaneChangedEventArgs.DockableViewModel">
            <summary>
            Gets or sets the dockable vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ActivePaneChangedEventArgs.IsActive">
            <summary>
            Gets or sets the is active field.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PaneClosedEventArgs">
            <summary>
            Event args for the activa pance changed event.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PaneClosedEventArgs.DockableViewModel">
            <summary>
            Gets or sets the dockable vm.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MissingViewModelEventArgs">
            <summary>
            Event args for the activa pance changed event.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MissingViewModelEventArgs.DockingPaneConfiguration">
            <summary>
            Gets or sets the docking pane configuration.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration">
            <summary>
            Configuration info for a docking pane.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="paneName">Pane name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.PaneName">
            <summary>
            Gets the pane name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.IsVisible">
            <summary>
            Gets or sets whether this pane is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.IsRestorable">
            <summary>
            Gets or sets whether this pane is restorable or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.DockingPaneType">
            <summary>
            Gets or sets the docking pane type. Only relevant for restorable vms.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration.RestoreInformation">
            <summary>
            Gets or sets the restore information. Can be null.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration">
            <summary>
            Docking pane context configuration.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration.#ctor(System.String)">
            <summary>
            Gets or sets the context name.
            </summary>
            <param name="contextName">Context name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration.ContextName">
            <summary>
            Gets the context name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration.Configurations">
            <summary>
            Gets the list of configurations.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration.LayoutPath">
            <summary>
            Gets or sets the layout file path. The file may not exist.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration">
            <summary>
            Configuration info for a layout manager.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.AddConfiguration(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutContextConfiguration)">
            <summary>
            Adds a configuration.
            </summary>
            <param name="config">Configuration.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.RemoveConfiguration(System.String)">
            <summary>
            Clear configurations belonging to a specific context.
            </summary>
            <param name="name">Context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.ClearConfiguration">
            <summary>
            Clear configurations.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.Load(System.String)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.Save(System.String)">
            <summary>
            Saves the configuration.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManagerConfiguration.Configurations">
            <summary>
            Gets the configurations.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager">
            <summary>
            This class is used to create new as well as store and restore layout of existing avalondock windows.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.InitialActivate">
            <summary>
            Activates any view (the first usually) added to the manager.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ShowWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Shows a docking window for a given view.  
            If is has been shown before, restore it position. Otherwise dock it to the right side.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ShowWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle)">
            <summary>
            Shows a docking window for a given view.  
            If is has been shown before, restore it position. Otherwise dock it to the right side.
            </summary>
            <param name="view">View to dock.</param>
            <param name="dockingSyle">Docking style.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ShowWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle)">
            <summary>
            Shows a docking window for a given view.  
            If is has been shown before, restore it position. Otherwise dock it to the right side.
            </summary>
            <param name="view">View to dock.</param>
            <param name="dockingStyle">Docking style.</param>
            <param name="dockingAnchorStyle">Docking anchor style. Only usefull for DockingPaneStyle.Docked.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ShowWindow(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneStyle,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle)">
            <summary>
            Shows a docking window for a given view.  
            If is has been shown before, restore it position. Otherwise dock it to the right side.
            </summary>
            <param name="name">View to show.</param>
            <param name="dockingStyle">Docking style.</param>
            <param name="dockingAnchorStyle">Docking anchor style. Only usefull for DockingPaneStyle.Docked.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ShowWindowBasedOnConfiguraion(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Shows a window if the current configuration contains it and if it is set as visible.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.HideWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Hides a dockable window.
            </summary>
            <param name="view">Dockable window to hide.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.BringToFrontWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Tries to bring the view displaying the given view model to the front.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.CloseWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Tries to close a specified window..
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.CloseWindow(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel,System.Boolean)">
            <summary>
            Tries to close a specified window..
            </summary>
            <param name="view"></param>
            <param name="bRemove"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.Activate(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Activates a view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.HasWindow(System.String)">
            <summary>
            Gets whether the docking manager has a window of a specific name.
            </summary>
            <param name="name">Name of the window.</param>
            <returns>True if there is a window with the specified name. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.LoadConfiguration">
            <summary>
            Loads the configuration.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveCurrentConfiguration(System.String)">
            <summary>
            Saves the current window configuration (opened windows).
            </summary>
            <param name="name">Name of the configuration.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.RestoreConfiguration(System.String,System.Collections.IEnumerable)">
            <summary>
            Loads a specific window configuration.
            </summary>
            <param name="name">Name of the configuration.</param>
            <param name="dockableViews">Existing dockable views.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.RestoreConfigurationWindows(System.String,System.Collections.IEnumerable)">
            <summary>
            Loads a specific window configuration.
            </summary>
            <param name="name">Name of the configuration.</param>
            <param name="dockableViews">Existing dockable views.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.RestoreConfigurationLayout(System.String,System.Collections.IEnumerable)">
            <summary>
            Loads a specific window configuration.
            </summary>
            <param name="name">Name of the configuration.</param>
            <param name="dockableViews">Existing dockable views.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.OnPaneClosed(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel)">
            <summary>
            Called whenever a pane has been closed (not hidden !).
            </summary>
            <param name="dockableViewModel"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.OnActivePaneChanged(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel,System.Boolean)">
            <summary>
            Called whenever the active pane changes.
            </summary>
            <param name="dockableViewModel"></param>
            <param name="isActive"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.OnRestoreLayoutMissingVMEncountered(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneConfiguration)">
            <summary>
            Called whenever the active pane changes.
            </summary>
            <param name="paneConfiguration"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.Dispose(System.Boolean)">
            <summary>
            Dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ConvertToAnchorStyle(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingPaneAnchorStyle)">
            <summary>
            Converts a DockingPaneAnchorStyle to AnchorStyle.
            </summary>
            <param name="style">DockingPaneAnchorStyle to convert.</param>
            <returns>AnchorStyle.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ConvertToContextChangeKind(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingContextChangeKind)">
            <summary>
            Converts a DockingContextChangeKind to ContextChangeKind.
            </summary>
            <param name="kind">DockingContextChangeKind to convert.</param>
            <returns>ContextChangeKind.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DockablePane or DocumentPane starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.InvalidatePaneTitles">
            <summary>
            Invalidates the titles of all docking panes.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.Ribbon">
            <summary>
            Gets or sets the main ribbon menu.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.MainDockingManager">
            <summary>
            Gets the docking manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.CurrentContextName">
            <summary>
            Gets or sets the current context name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.CurrentConfiguration">
            <summary>
            Gets the configuration manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ConfigurationManager">
            <summary>
            Gets the configuration manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveDockingPanesFilePath">
            <summary>
            FilePath to save all the visible docking panes to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveLayoutFilePath">
            <summary>
            FilePath to save the layout to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveLayoutDirectory">
            <summary>
            Directory to save the layouts to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.SaveConfigurationFilePath">
            <summary>
            FilePath to save the layout to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.EmbeddedLayoutFilePath">
            <summary>
            Path to the embedded default layout file. By default: /GeneratedCode/UI/LayoutManagerLayout.xml.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.EmbeddedDockingPanesFilePath">
            <summary>
            Path to the embedded dfault visible docking panes files. By default: /GeneratedCode/UI/LayoutManagerDV.txt.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.PaneClosedEvent">
            <summary>
            Pane closed event.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ActivePaneChanged">
            <summary>
            Active pane changed event.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.RestoreLayoutMissingVMEncountered">
            <summary>
            Active pane changed event.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ViewLookUp.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDockableViewModel,AvalonDock.DockableContent)">
            <summary>
            Constructor.
            </summary>
            <param name="v"></param>
            <param name="p"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ViewLookUp.View">
            <summary>
            Gets or sets the vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ViewLookUp.Pane">
            <summary>
            Gets or sets the pane.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.PaneClosedEventHandler">
            <summary>
            Delegate for the PaneClosedEvent event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.ActivePaneChangedEventHandler">
            <summary>
            Delegate for the ActivePaneChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DockingLayoutManager.RestoreLayoutMissingVMEncounteredEventHandler">
            <summary>
            Delegate for the ActivePaneChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel">
            <summary>
            Interface describing a diagram view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.CalcMovementInfo(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},System.Double,System.Double)">
            <summary>
            Calculates the movement info for this item based on the proposed horizontal and vertical changes.
            </summary>
            <param name="selectedItems">Items to be moved.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
            <returns>Calculated DiagramItemMovementInfo.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.CalcResizeInfo(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},System.Double,System.Double,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection)">
            <summary>
            Calculates the resize info for this item based on the proposed horizontal and vertical changes.
            </summary>
            <param name="selectedItems">Items to be resized.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
            <param name="direction">Direction in which to resize the elements.</param>
            <returns>Calculated DiagramItemsResizeInfo.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.MoveElements(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsMovementInfo)">
            <summary>
            Moves the selected elements as specified by the given movement info.
            </summary>
            <param name="selectedItems">Selected items to move.</param>
            <param name="info">Movement info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.ResizeElements(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo)">
            <summary>
            Resizes the selected elements a specified by the given resize info.
            </summary>
            <param name="selectedItems">Selected items to resize.</param>
            <param name="info">Resize info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.MoveLinkAnchors(System.Collections.Generic.Dictionary{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel,System.Boolean},System.Double,System.Double)">
            <summary>
            Moves the selected link anchors in the direction of the proposed location.
            </summary>
            <param name="selectedItems">Selected links (source or target anchor to be move specified via bool) to move.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.MoveLinkAnchor(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel,System.Guid,System.Double,System.Double)">
            <summary>
            Moves the selected link anchors in the direction of the proposed location.
            </summary>
            <param name="selectedItem">Selected link.</param>
            <param name="anchorId">Anchor id.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints)">
            <summary>
            Calculates a path geometry between the source and the target points.
            </summary>
            <param name="sourcePoint">Source point (Absolute location).</param>
            <param name="targetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints)">
            <summary>
            Calculates a path geometry between the source and the target point. 
            </summary>
            <param name="proposedSourcePoint">Source point (Absolute location).</param>
            <param name="targetItem">Target diagram item.</param>
            <param name="proposedTargetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles a key down event.
            </summary>
            <param name="e">Key down event args.</param>
            <returns>True if the key down event was handled.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramViewModel.DiagramDesigner">
            <summary>
            Gets the diagram designer.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.DoubleToGridLengthConverter">
            <summary>
            Converts a double value to GridLength and vice versa.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.DoubleToGridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.DoubleToGridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTreeControl">
            <summary>
            Interaction logic for ModelTreeControl.xaml
            </summary>
            <summary>
            ModelTreeControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTreeControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTreeControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGridItem">
            <summary>
            Property grid item control.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGridItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDepenedenciesCanvas">
            <summary>
            Canvas hosting elements of type GraphicalDependenciesItem.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDepenedenciesCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Calculate the actual size because it is unknown otherwise, since we
            are using a canvas.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.ImageLoaderControl">
            <summary>
            Interaction logic for ImageLoaderControl.xaml
            </summary>
            <summary>
            ImageLoaderControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.ImageLoaderControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.ImageLoaderControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock">
            <summary>
            TabControl that is modeling after the modeling dock document pane. It contains closable
            items that are displayed in a single scrollable line.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Callen on items changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Selection changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.GetContainerForItemOverride">
            <summary>
            Creates a TabItemAvalonDock to use to display content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.IsHeaderTabBigProperty">
            <summary>
            IsHeaderTabBig.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.CloseCurrentTabComandProperty">
            <summary>
            CloseCurrentTab.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.OnPropertyChanged(System.String)">
            <summary>
            Called whenever a specific property changes.
            </summary>
            <param name="name">Name of the property, which value changed.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.CloseCommand">
            <summary>
            Gets the close command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.TabItems">
            <summary>
            Gets the tab items collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.CloseCurrentTabComand">
            <summary>
            CloseCurrentTab command.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabControlAvalonDock.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper">
            <summary>
            
            </summary>
            <remarks>
            Idea from http://tomlev2.wordpress.com/2009/03/27/wpf-automatically-sort-a-gridview-when-a-column-header-is-clicked/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.GetEnableSorting(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.SetEnableSorting(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">Vlue.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.EnableSortingProperty">
            <summary>
            Enable sorting property
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.GetSortingCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.SetSortingCommand(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">value.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListViewSortHelper.SortingCommandProperty">
            <summary>
            Sorting command property
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper">
            <summary>
            Attached properties for ListBox-Control: 
            
            - DoubleClickDialogResultProperty: Simulates DialogResult as known in WinForms (on double click on an ListBoxItem).
            - DisgardsScrollViewOnMouseWheel:
            
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.GetDoubleClickDialogResult(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.SetDoubleClickDialogResult(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">Value.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.DoubleClickDialogResultProperty">
            <summary>
            Double click dialog result property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.DoubleClickOnListboxItem(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Double click on listbox item handler.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.GetDisgardsScrollViewOnMouseWheel(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.SetDisgardsScrollViewOnMouseWheel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value for the property on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">Value.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ListBoxHelper.DisgardsScrollViewOnMouseWheelProperty">
            <summary>
            Disgards scroll view on mouse wheel property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.TypeUtilities">
            <summary>
            Type utilities.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.TypeUtilities.CreateDynamicallyTypedList(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.TypeUtilities.GetCommonBaseClass(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.TypeUtilities.GetCommonBaseClass(System.Type[])">
            <summary>
            
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior">
            <summary>
            IsLoading behavior for a framework element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.IsLoadingProperty">
            <summary>
            IsLoading item dependency property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.DecoratorProperty">
            <summary>
            Decorator item dependency property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.IsLoading">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.Loaders.FrameworkElementLoadingBehavior.Decorator">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IOpenFileService">
            <summary>
            This interface defines a interface that will allow 
            a ViewModel to open a file
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IOpenFileService.ShowDialog(System.Windows.Window)">
            <summary>
            This method should show a window that allows a file to be selected
            </summary>
            <param name="owner">The owner window of the dialog</param>
            <returns>A bool from the ShowDialog call</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IOpenFileService.FileName">
            <summary>
            FileName
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IOpenFileService.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IOpenFileService.InitialDirectory">
            <summary>
            Filter
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel">
            <summary>
            This is the base abstract class for a role editor. An role editor as such is expected to have some sort
            of a default list to choose the elements as well as currently selected element(s).
            
            A role editor view model requires the following properties:
            - DomainRelationshipInfo: This is the domain relationship type we are modifying.
            - SourceRoleId: Source role Id relative to what role we are actually editing. (In some cases this will be the
              target role Id of the actual relationship).
              
            Filtering: The default filter function takes the multiplicity of a relationship into account:
            (This is always from the view of the SourceRole):
            - 'n:m': nothing needs to be filtered.
            - '0..1:n' or '1:n': All target role players, that are already in a relationship needs to be removed. 
            - 'n:1' or 'n:0..1': Nothing needs to be removed.
            - '0..1:1' or '1:0..1' or '0..1:0..1': All target role players, that are already in a relationship needs to be removed.
            Further, the filtering considers already existent relationships and the AllowsDuplicates property: This
            removes target role players if they are already in relation (relatinoship of the type we are editing here) 
            with the source element.
            
            Subscribe to changes: 
            We are subscribing to property changes by default via: 
            - ModelElementAddedEvent
            - ModelElementDeletedEvent
            - ModelRolePlayerChangedEvent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel">
            <summary>
            This abstract base class represents a property, which has some sort of a list to select property value(s) from. 
            For this, it provides default values as well as a filter to remove unneeded entries.
            
            To provide a default values list, you can either derive a custom view model from this view model and override the 
            'GetDefaultValues' method, or provide an LookupListEditorDefaultValuesProvider, which will be called to retrieve 
            a default values list.
            
            To filter a default values list after(!) it is retrieved, you can override 'FilterDefaultValues' in a custom
            derived class and provide an LookupListEditorFilter. First the FilterDefaultValues function is called, than
            the provided filter.
            </summary>
            <remarks>
            This is the base class for: Enumeration, Boolean and the Role editors by default. It can be used in the view to 
            implement e.g. a combo box or an list style editor.
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.isDefaultValuesSourceDynamic">
            <summary>
            Indicates a dynamic source of default values.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.UpdateDefaultValuesList">
            <summary>
            Updates the default values list as follows:
            
            1. GetDefaultValues
            2. FilterDefaultValues
            3. SortDefaultValues
            4. InsertSentinelDefaultValue
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.GetDefaultValues">
            <summary>
            This method provides the default values to use in the combobox. If the source is dynamic, this
            will be called each time before displaying the combobox dropdown list.
            </summary>
            <returns>List of default values. If no values provider is supplied, an empty list is returned.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.FilterDefaultValues(System.Collections.Generic.List{System.Object})">
            <summary>
            Filters the given default values list.
            </summary>
            <param name="dValues">List of values to filter.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.SortDefaultValues(System.Collections.Generic.List{System.Object})">
            <summary>
            Sorts the given default values list.
            </summary>
            <param name="dValues"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.InsertSentinelDefaultValue(System.Collections.Generic.List{System.Object})">
            <summary>
            Inserts an sentinel item into the default values list.
            </summary>
            <param name="dValues"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.Sort">
            <summary>
            Gets or sets the sort function.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.Filter">
            <summary>
            Gets or sets the filter to remove entries from the default values list. Can be null
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.DefaultValuesProvider">
            <summary>
            Gets or sets the default values provider for this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorViewModel.DefaultValues">
            <summary>
            Gets the default values to use in the combobox dropdown list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="domainRelationshipInfo">Relationship domain class info.</param>
            <param name="sourceRoleId">RoleId of the source role player. </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.SubscribeToModelChanges">
            <summary>
            Subscribe to model changes.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.GetDefaultValues">
            <summary>
            Gets the default values list. Override this method, if the default list can be acquired in a more specific way.
            
            Hint: we return the actual elements of type ModelElement that are of the TargetRolePlayerDomainClassID type.
            </summary>
            <returns>Returns the default values list.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.FilterDefaultValues(System.Collections.Generic.List{System.Object})">
            <summary>
            Filter default values list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.SortByName(System.Object,System.Object)">
            <summary>
            Sort the default values list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.SourceRoleId">
            <summary>
            Gets the source role ID. 
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.TargetRoleId">
            <summary>
            Gets the target role ID. 
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.TargetDomainClassID">
            <summary>
            Gets the target role player domain class ID. This is used to get the default items list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.RelationshipDomainClassId">
            <summary>
            Gets the relationship domain class ID. This is used to get the default items list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.RelationshipInfo">
            <summary>
            Gets the domain relationship info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.SourceDomainRoleInfo">
            <summary>
            Gets the source domain role info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.RoleEditorViewModel.TargetDomainRoleInfo">
            <summary>
            Gets the target domain role info.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.LookupListEditorFilter`1">
            <summary>
            Represents the method that decides if the given element should be removed from the collection or not.
            </summary>
            <typeparam name="T">The type of the element. </typeparam>
            <returns>True if the element should be removed from the collection. False otherwise.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel">
            <summary>
            This class represents a boolean property style view model. As such it allows the selection
            of a null value (NullElement), a true (TrueElement) and an false (FalseElement) value. 
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.NullElement">
            <summary>
            Null element name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.TrueElement">
            <summary>
            True element name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.FalseElement">
            <summary>
            False element name.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.GetDefaultValues">
            <summary>
            Return the default value list for boolean editing.
            </summary>
            <returns>Default values list.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.InsertSentinelDefaultValue(System.Collections.Generic.List{System.Object})">
            <summary>
            Insert sentinel item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> null value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.BooleanEditorViewModel.PropertyType">
            <summary>
            Gets the property type that is edited within this view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingState">
            <summary>
            Sorting state.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingState.None">
            <summary>
            No sorting enabled.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingState.Sorted">
            <summary>
            Sorting enabled.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingProvider">
            <summary>
            Default model tree sorting provider.
            </summary>
            <remarks>
            We are adding elements sorted first by type and then by name.
            If the element doesnt have a name, we add it at the end of the list (still sorted by type).
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeSortingProvider">
            <summary>
            Interface describing a modeltree sorting priovider.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeSortingProvider.InsertElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel,System.Collections.ObjectModel.ObservableCollection{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel},Microsoft.VisualStudio.Modeling.ElementLink,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel)">
            <summary>
            Method used to add a element into a sorted collection without destroying the sorting order.
            </summary>
            <param name="parent">Parent model element vm.</param>
            <param name="collection">Sorted collection to add the new view models to.</param>
            <param name="link">Embedding relationship including the model element as the child (target).</param>
            <param name="c">View model representing the model element to be added to the collection.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeSortingProvider.ModelTreeSortingState">
            <summary>
            Gets or sets the sorting state of the model tree.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingProvider.InsertElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel,System.Collections.ObjectModel.ObservableCollection{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel},Microsoft.VisualStudio.Modeling.ElementLink,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel)">
            <summary>
            Method used to add a element into a sorted collection without destroying the sorting order.
            </summary>
            <param name="parent">Parent model element vm.</param>
            <param name="collection">Sorted collection to add the new view models to.</param>
            <param name="link">Embedding relationship including the model element as the child (target).</param>
            <param name="c">View model representing the model element to be added to the collection.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeSortingProvider.ModelTreeSortingState">
            <summary>
            Gets or sets the sorting state of the model tree.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider">
            <summary>
            This class allows the extension of the model tree context menu. It is only required to
            provide a mechanism to extend the context menu in multiple-component DSLs.
            </summary>
            <remarks>
            The idea behind this is as follows:
            
            Component A includes components B and C. B includes D. Therefore the context menu provider of
            A has B and C as children. B has D as child. On the other hand, D has B as parent and B and C
            have A as parent.
            
            The children are represented as injected provider. The parent is the injectedIn provider.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider">
            <summary>
            Interface for the context menu provider used to process and create additional menu items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.AddInjectedContextMenuProvider(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider)">
            <summary>
            Adds an context menu provider, that needs to be called whenever the methonds of this 
            context menu provider are invoked.
            </summary>
            <param name="provider">Context menu provider.</param>
            <remarks>
            All injected context menu provider that are included in the given provider are added
            to this provider as well.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.AddInjectedInContextMenuProvider(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider)">
            <summary>
            Adds an context menu provider, that this provider is injected in.
            </summary>
            <param name="provider">Context menu provider.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.ShouldCreateMenuItem(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType,System.Type,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Should a menu item type be created for a specific domain class?
            </summary>
            <param name="menuItemType">Menu item type: e.g.: Add, Delete, ...</param>
            <param name="domainElementType">Domain element type in question.</param>
            <param name="parentElement">Parent element of the domain element to be added, or deleted, or...</param>
            <param name="domainElement">Domain element instance. Is null if this is an AddElementMenuItem type of menu item.</param>
            <returns>True, if the menu item should be created. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.ShouldCreateMenuItem(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType,System.Type,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider})">
            <summary>
            Should a menu item type be created for a specific domain class?
            </summary>
            <param name="menuItemType">Menu item type: e.g.: Add, Delete, ...</param>
            <param name="domainElementType">Domain element type in question.</param>
            <param name="parentElement">Parent element of the domain element to be added, or deleted, or...</param>
            <param name="domainElement">Domain element instance. Is null if this is an AddElementMenuItem type of menu item.</param>
            <param name="processedProviders">Providers that have already been visited.</param>
            <returns>True, if the menu item should be created. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.ProcessContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel)">
            <summary>
            Modify the context menu view model by adding custom menu items.
            </summary>
            <param name="contextMenu">Context menu view model containing automatically added menu items.</param>
            <param name="element">Host element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.ProcessContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider})">
            <summary>
            Modify the context menu view model by adding custom menu items.
            </summary>
            <param name="contextMenu">Context menu view model containing automatically added menu items.</param>
            <param name="element">Host element.</param>
            <param name="processedProviders">Providers that have already been visited.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.InjectedContextMenuProviders">
            <summary>
            Gets the injected context menu providers.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider.InjectedInContextMenuProviders">
            <summary>
            Gets the context menu providers, in which this provider is injected in.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.AddInjectedContextMenuProvider(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider)">
            <summary>
            Adds an context menu provider, that needs to be called whenever the methonds of this 
            context menu provider are invoked.
            </summary>
            <param name="provider">Context menu provider.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.AddInjectedInContextMenuProvider(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider)">
            <summary>
            Adds an context menu provider, that this provider is injected in.
            </summary>
            <param name="provider">Context menu provider.</param>
            <remarks>
            This will cause this provider to inject itself into the given provider.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.ProcessContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel)">
            <summary>
            Modify the context menu view model by adding custom menu items.
            </summary>
            <param name="contextMenu">Context menu view model containing automatically added menu items.</param>
            <param name="element">Host element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.ProcessContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider})">
            <summary>
            Modify the context menu view model by adding custom menu items.
            </summary>
            <param name="contextMenu">Context menu view model containing automatically added menu items.</param>
            <param name="element">Host element.</param>
            <param name="processedProviders">Providers that have already been visited.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.ShouldCreateMenuItem(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType,System.Type,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Should a menu item type be created for a specific domain class?
            </summary>
            <param name="menuItemType">Menu item type: e.g.: Add, Delete, ...</param>
            <param name="domainElementType">Domain element type in question.</param>
            <param name="parentElement">Parent element of the domain element to be added, or deleted, or...</param>
            <param name="domainElement">Domain element instance. Is null if this is an AddElementMenuItem type of menu item.</param>
            <returns>True, if the menu item should be created. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.ShouldCreateMenuItem(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType,System.Type,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IModelTreeContextMenuProvider})">
            <summary>
            Should a menu item type be created for a specific domain class?
            </summary>
            <param name="menuItemType">Menu item type: e.g.: Add, Delete, ...</param>
            <param name="domainElementType">Domain element type in question.</param>
            <param name="parentElement">Parent element of the domain element to be added, or deleted, or...</param>
            <param name="domainElement">Domain element instance. Is null if this is an AddElementMenuItem type of menu item.</param>
            <param name="processedProviders">Providers that have already been visited.</param>
            <returns>True, if the menu item should be created. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.FindMenuViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel,System.String)">
            <summary>
            Searches for a MenuItemViewModel, which has its user data field set to the specified key.
            (Only the top level children of the context menu are searched).
            </summary>
            <param name="contextMenu">Context menu.</param>
            <param name="userDataKey">User data key.</param>
            <returns>MenuItemViewModel if found. Null otherwise.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.InjectedInContextMenuProviders">
            <summary>
            Gets the context menu providers, in which this provider is injected in.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuProvider.InjectedContextMenuProviders">
            <summary>
            Gets the injected context menu providers.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action dependending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action"/> or <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action"/> and <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action"/> and <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overriden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a Microsoft.Practices.Composite.Events.SubscriptionToken/&gt; that identifies this IEventSubscription/&gt;.
            </summary>
            <value>A token that identifies this <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventSubscription"/>.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs">
            <summary>
            Data for the ShowViewModelRequestEvent.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="viewModelToOpen">View model that needs to be opened.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
            <param name="viewModelToOpen">View model that needs to be opened.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs.DockingPaneStyle">
            <summary>
            Gets the docking pane style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs.DockingPaneAnchorStyle">
            <summary>
            Gets the docking pane anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs.ViewModelToOpen">
            <summary>
            Gets or sets the view model that needs to be opened.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentClosingEvent">
            <summary>
            Notifies during the closing process of an opened document.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory">
            <summary>
            Represents a collection of values that identify types or severity of error
            messages that can appear in the Error List.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory.Warning">
            <summary>
            Represents a warning.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory.Message">
            <summary>
            Represents an informational note.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory.Fatal">
            <summary>
            Represents an fatal error.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel">
            <summary>
            This model is used for managing the deletion of specific model elements.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel">
            <summary>
            This is the base view model for any view model that is displayed in a popup window.
            </summary>
            <remarks>
            Partss from the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bCallIntialize">True if the Initialize method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.RaiseCloseRequest">
            <summary>
            This raises the CloseRequest event to close the UI.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.RaiseCloseRequest(System.Nullable{System.Boolean})">
            <summary>
            This raises the CloseRequest event to close the UI.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.OnWindowClose">
            <summary>
            Allows Window.Close hook
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.OnCloseActivePopUp(System.Object)">
            <summary>
            Raises RaiseCloseRequest event, passing back correct DialogResult
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.CloseRequest">
            <summary>
            This event should be raised to close the view.  Any view tied to this
            ViewModel should register a handler on this event and close itself when
            this event is raised.  If the view is not bound to the lifetime of the
            ViewModel then this event can be ignored.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.CloseCommand">
            <summary>
            CloseCommand : Window Lifetime command
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseWindowViewModel.CloseActivePopUpCommand">
            <summary>
            CloseCommand : Close popup command
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.Set(System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Gatheres dependencies on elements that are about to be deleted and wraps them for display.
            </summary>
            <param name="elementsToBeDeleted">Elements that are about to be deleted.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.Set(System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement},Tum.PDE.ToolFramework.Modeling.DependenciesRetrivalOptions)">
            <summary>
            Gatheres dependencies on elements that are about to be deleted and wraps them for display.
            </summary>
            <param name="elementsToBeDeleted">Elements that are about to be deleted.</param>
            <param name="options">Options</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.GetActiveDependencies">
            <summary>
            Returns a list of active dependencies wrapped in a view model.
            </summary>
            <returns>List of dependency item view models.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.Title">
            <summary>
            Gets or sets the title of this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.Description">
            <summary>
            Gets or sets the description of this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Deletion.DeletionViewModel.DependenciesViewModel">
            <summary>
            Gets the dependencies view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.DeleteElementsPopup">
            <summary>
            Interaction logic for DeleteElementsPopup.xaml
            </summary>
            <summary>
            DeleteElementsPopup
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.DeleteElementsPopup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.DeleteElementsPopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel">
            <summary>
            Interface describing a diagram item view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.GetParent">
            <summary>
            Gets the parent item of this item. Can be null, which means, that this item is a root item on the diagram.
            </summary>
            <returns>Parent item or null.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.GetNestedChildren">
            <summary>
            Gets the collection of nested children.
            </summary>
            <returns>Collection of nested children.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.GetRelativeChildren">
            <summary>
            Gets the collection of relative children.
            </summary>
            <returns>Collection of relative children.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.GetPlacementSide">
            <summary>
            Gets the size this element is placed on, if this is a relative child shape
            with MovementBehaviour set to PositionOnEdgeOfParent. Otherwise, throws
            an InvalidOperationException.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Left">
            <summary>
            Gets the position (LEFT) of this item on the canvas.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Top">
            <summary>
            Gets the position (TOP) of this item on the canvas.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Width">
            <summary>
            Gets the width of the item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Height">
            <summary>
            Gets the height of the item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Location">
            <summary>
            Gets or sets the location of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.AbsoluteLocation">
            <summary>
            Gets or sets the absolute location of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Size">
            <summary>
            Gets or sets the size of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.Bounds">
            <summary>
            Gets or sets the bounds of the current element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.TakesPartInRelationship">
            <summary>
            Gets whether this item is part of any relationship or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.ResizingBehaviour">
            <summary>
            Gets the resizing behaviour of the shape.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.MovementBehaviour">
            <summary>
            Gets the movement behaviour of the shape.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.IsRelativeChildShape">
            <summary>
            Gets whether the shape is a relative child shape or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel.ShapeElement">
            <summary>
            Gets the shape element, that is hosted by this view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesignerItem">
            <summary>
            Interface describing a diagram designer item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesignerItem.AbsoluteLocation">
            <summary>
            Gets the absolute location of this item (relative to the DiagramDesigner).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesignerItem.IsDiagramLink">
            <summary>
            Gets whether this element represents a diagram link or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler">
            <summary>
            Default drop handler.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDropTarget">
            <summary>
            Drop target interface.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDropTarget.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDropTarget.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.CanAcceptData(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Can accept data?
            </summary>
            <param name="dropInfo">Info.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.ExtractData(System.Object)">
            <summary>
            Extract data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.GetList(System.Collections.IEnumerable)">
            <summary>
            Get list.
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.IsChildOf(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Is child of.
            </summary>
            <param name="targetItem"></param>
            <param name="sourceItem"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDropHandler.TestCompatibleTypes(System.Collections.IEnumerable,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDragHandler">
            <summary>
            Default drag handler class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DefaultDragHandler.StartDrag(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo)">
            <summary>
            Starts drag drop.
            </summary>
            <param name="dragInfo">Info.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRestorableDockableViewModel">
            <summary>
            This interface provides properties, that are required for a view model to be restored after it has been closed on
            e.g. editor exit or model context switch.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRestorableDockableViewModel.GetInformationForRestore">
            <summary>
            Get the necessary information to restore this vm after it has been closed.
            </summary>
            <returns>Restore information.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRestorableDockableViewModel.GetDockingPaneType">
            <summary>
            Get the docking pane type as string.
            </summary>
            <returns>Docking pane type.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IRestorableDockableViewModel.Restore(System.Xml.Linq.XElement)">
            <summary>
            Restore the VM based on stored information.
            </summary>
            <param name="element">Info.</param>
            <returns>
            True if the restore process was successful. False otherwise.
            </returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1">
            <summary>
            View model, that allows to search within a generic items collection and select an item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Collections.Generic.IEnumerable{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSearchDelegate{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSortDelegate{`0})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="selectableElements">
            List of existing elements, that are allowed to be selected.
            </param>
            <param name="searchAction">Search action.</param>
            <param name="sortAction">Sort action.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SearchCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.Sort">
            <summary>
            Sorts the current results list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.ActivatedCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SetSelectedElement(`0)">
            <summary>
            Tries to set the selection to the given element.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SearchResultViewModels">
            <summary>
            Gets the search results list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SearchText">
            <summary>
            Gets or sets the text to search for.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SearchCommand">
            <summary>
            Search command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.ActivatedCommand">
            <summary>
            Activated command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.IsActive">
            <summary>
            Gets or sets whether this view is active or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SearchSelectedElement">
            <summary>
            Gets or sets the element, that is selected in the search list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericSearchViewModel`1.SelectedElement">
            <summary>
            Gets the selected model element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1">
            <summary>
            Selects an element within a collection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Collections.Generic.List{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSearchDelegate{`0},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSortDelegate{`0})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="selectableElements">
            List of existing elements, that are allowed to be selected. Can be null to specify that
            the is no such restriction needed and that all elements can be selected.
            </param>
            <param name="searchAction">Search action.</param>
            <param name="sortAction">Sort action.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.SubModel_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            React on property changes on submodels.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.SetSelectedElement(`0)">
            <summary>
            Tries to set the selected elements to the given object. Not all sub viewmodels might be
            capable of setting a selection.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.SelectGenericSearchViewModel">
            <summary>
            Gets the select element search vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.IsSelectionValid">
            <summary>
            Gets or sets whether the current selection is valid or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectGenericViewModel`1.SelectedElement">
            <summary>
            Gets  the selected element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel">
            <summary>
            This class represents a multiple role property style view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="domainRelationshipInfo">Relationship domain class info.</param>
            <param name="sourceRoleId">RoleId of the source role player. </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> null value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.DeleteElementCommand_Executed">
            <summary>
            Delete element executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.AddElementCommand_Executed">
            <summary>
            Delete element executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.NavigateToElementCommand_Executed">
            <summary>
            Navigate To Element Command executed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.CanHandleMultipleElements">
            <summary>
            Override: can not host multiple elements.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.DeleteElementCommand">
            <summary>
            Delete element command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.SelectedObject">
            <summary>
            Gets or sets the currently selected object
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.AddElementCommand">
            <summary>
            Edit element command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultipleRoleEditorViewModel.NavigateToElementCommand">
            <summary>
            Navigate To Element Command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel">
             <summary>
             Element view model for the tree view.
             
             Initialization (1 and 2 only if If DoHookUpEvents = True): 
             1. Subscribe to Add and Delete events specific to the children of each model element, which we represent through the view 
                model. Those events are thrown whenever an item is added or deleted (Not during serialization!!!).
             2. Add view models for existings elements, because when deserializing we dont get the event call mentioned above.
            
             Context Menus
             1. Create default context menu items for adding and deleteting elements. 
             2. During the creation of all default menu items:
                Call menu providers (if not null) to process "ShouldCreateMenuItem" method.
             3. After the creation of all default menu items: 
                Call menu providers to postprocess the created context menu. 
                This way, custom menu items can be added to the context menu.
             </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel">
            <summary>
            This is the base class for all view models displayed as tree view items.
            This acts as an adapter between a raw data object and a TreeViewItem.
            </summary>
            <remarks>
            Inspired by Josh Smith http://www.codeproject.com/KB/WPF/TreeViewWithViewModel.aspx
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.elementLinkOrder">
            <summary>
            Element link order.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="viewModelStore">View model store containing view models.</param>
            <param name="element">Element represented by this view model.</param>
            <param name="link">Element link, targeting the hosted element.</param>
            <param name="domainRoleId">Domain role id of the role that the hosted element belongs to.</param>
            <param name="parent">Parent of this view model. Can be null.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel,System.Boolean,System.Boolean,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="viewModelStore">View model store containing view models.</param>
            <param name="element">Element represented by this view model.</param>
            <param name="link">Element link, targeting the hosted element.</param>
            <param name="domainRoleId">Domain role id of the role that the hosted element belongs to.</param>
            <param name="parent">Parent of this view model. Can be null.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Initialize">
            <summary>
            Initialize the model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Delete(System.Boolean)">
            <summary>
            Delete the model element that is hosted by this view model.
            </summary>
            <param name="ensureDelete">Ensures if the user truly wants to delete the element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Delete">
            <summary>
            Delete the model element that is hosted by this view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.AddElementToCollection(Microsoft.VisualStudio.Modeling.ElementLink,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel)">
            <summary>
            Method which adds an element to the children property for treeview display. You can override
            this method to create custom sorting behaviour.
            </summary>
            <param name="link">Embedding relationship including the given model element as the child (target).</param>
            <param name="viewModel">Domain model representing the child element to be added to children property for treeview display.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.DeleteElementFromCollection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel)">
            <summary>
            Method which removes the given view model from the children property
            </summary>
            <param name="viewModel">Domain model representing the child element to be removed from the children property.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.FindViewModel(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Finds a view model that is representing the given model element.
            </summary>
            <param name="element">Model element.</param>
            <returns>View model if found; Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.CreateContextMenu">
            <summary>
            Creates the context menu view model for this tree item view model. Applies the local context menu provider than the global context menu provider.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.CreateAddElementsContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel)">
            <summary>
            Creates context menus to add child items as children of the specified menu item vm.
            </summary>
            <param name="menuItemAdd">Menu item vm to hold newly created context menu items.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnCutCommandExecuted">
            <summary>
            Cut command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnCutCommandCanExecute">
            <summary>
            Cut command can execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnCopyCommandExecuted">
            <summary>
            Copy command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnCopyCommandCanExecute">
            <summary>
            Copy command can execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnPasteCommandExecuted">
            <summary>
            Paste command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnPasteCommandCanExecute">
            <summary>
            Paste command can execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.OnDispose">
            <summary>
            Clear resources.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.SortingProvider">
            <summary>
            Gets the sorting provider which is to be used to apply a specific sorting order while inserting new elements into the children collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ContextMenuProvider">
            <summary>
            Gets or sets the global context menu provider.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.RelationshipInfo">
            <summary>
            Get the relationship info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.AdvancedRelationshipInfo">
            <summary>
            Get the advanced relationship info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ElementInfo">
            <summary>
            Get the element info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ElementLinkOrder">
            <summary>
            Gets the element link order.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ElementLink">
            <summary>
            Gets the element link, targeting the hosted element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ElementLinkDomainClassId">
            <summary>
            Gets the element link domain class id.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.DomainRoleId">
            <summary>
            Gets the domain role id of the role that the hosted element belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Depth">
            <summary>
            Gets the nested depth of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ContextMenu">
            <summary>
            Gets the context menu view model for this tree item view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.ChildrenStorage">
            <summary>
            Merged children of the ModelElement for TreeView.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Children">
            <summary>
            Read only collection of merged children of the ModelElement for TreeView.
            Dont use it to add Children as this will not update the model. Instead, add/set children to their corresponding properties.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.IsExpanded">
            <summary>
            Gets/sets whether the TreeViewItem associated with this object is expanded.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.IsSelected">
            <summary>
            Gets/sets whether the TreeViewItem associated with this object is selected.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.IsDomainModel">
            <summary>
            Gets whether this view model host the root domain model element or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.DoCreateContextMenus">
            <summary>
            Gets whether to create context menus.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.MainModelTreeViewModel">
            <summary>
            Model tree view model containing this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.BaseModelElementTreeViewModel.Parent">
            <summary>
            Parent view model of this view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,System.Guid,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel,System.Boolean,System.Boolean,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="viewModelStore">View model store containing this view model.</param>
            <param name="element">VModell represented by this view model.</param>
            <param name="link">Element link, targeting the hosted element.</param>
            <param name="domainRoleId">Domain role id of the role that the hosted element belongs to.</param>
            <param name="parent">Parent of this view model.</param>
            <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
            <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
            <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.Initialize">
            <summary>
            Initializes the view model for the VModell tree item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.AddChildElement(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
            <summary>
            Adds a view model for the given element to the children collection of the current vm.
            </summary>
            <param name="relationship">Relationship.</param>
            <param name="element">Element.</param>
            <param name="isInDeserialization">True if deserialization is in process; False otherwise.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.RemoveChildElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Deletes a view model for the given element from the children collection of the current vm.
            </summary>
            <param name="element">Element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.OnChildElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a new relationship is added.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.OnChildElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever an existing relationship is deleted.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.OnRolePlayerChanged(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Called whenever a role players in a relationship change.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.OnRolePlayerMoved(Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs)">
            <summary>
            Called on a role player beeing moved.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.IsEmbeddingRelationship(System.Guid)">
            <summary>
            Verifies if a specified domain relationship is an embedding relationship.
            </summary>
            <param name="relationshipDomainClassId">Relationship DomainClassId.</param>
            <returns>True if a specified domain relationship is an embedding relationship; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.CreateContextMenu">
            <summary>
            Creates the context menu for this view model. Applies the local context menu provider than the global context menu provider.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.CreateAddElementsContextMenu(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel)">
            <summary>
            Creates context menus to add child items as children of the specified menu item vm.
            </summary>
            <param name="menuItemAdd">Menu item vm to hold newly created context menu items.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.AddNewElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuCreationHelper)">
            <summary>
            Add new element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.Delete(System.Boolean)">
            <summary>
            Delete the model element that is hosted by this view model.
            </summary>
            <param name="ensureDelete">Ensures if the user truly wants to delete the element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.MoveUp">
            <summary>
            Moves the current item up.
            </summary>		
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.CanMoveUp">
            <summary>
            Verifies if the current item can be moved up or not.
            </summary>
            <returns>True if the current item can be moved up. False otherwise.</returns>		
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.MoveDown">
            <summary>
            Moves the current item down.
            </summary>		
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.CanMoveDown">
            <summary>
            Verifies if the current item can be moved down or not.
            </summary>
            <returns>True if the current item can be moved down. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.OnDispose">
            <summary>
            Unregister from events although they are weak.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ParentChildrenMapping">
            <summary>
            Gets the parent children mapping dictionary. The first Guid represents model context id, second a domain class ID of an element.
            The list is a collection of domain relationship DomainClassIds.
            </summary>
            <remarks>
            The content of this dictionary is provided in the initialize method of the derived model tree class.
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ParentChildrenCMMapping">
            <summary>
            Gets the parent children mapping dictionary for context menu that should not be created. 
            The first Guid represents model context id, second a domain class ID of an element.
            The list is a collection of domain relationship DomainClassIds.
            </summary>
            <remarks>
            The content of this dictionary is provided in the initialize method of the derived model tree class.
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.SortingProvider">
            <summary>
            Gets the sorting provider which is to be used to apply a specific sorting order while inserting new elements into the children collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuProvider">
            <summary>
            Gets or sets the global context menu provider.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.IsDomainModel">
            <summary>
            Gets whether this view model host the root domain model element or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.CanMoveElements">
            <summary>
            Gets whether elements can be moved within the tree or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuCreationHelper">
            <summary>
            Context menu creation helper class.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuCreationHelper.RoleInfo">
            <summary>
            Role info.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuCreationHelper.RolePlayerInfo">
            <summary>
            Role player info.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelElementTreeViewModel.ContextMenuCreationHelper.#ctor(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainClassInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="rInfo"></param>
            <param name="cInfo"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainSearchViewModel">
            <summary>
            This view model represents the main search view model used to search the domain model for specific elements.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainSearchViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemElementViewModel">
            <summary>
            Base class representing a diagram item vm.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel">
            <summary>
            This is the base abstract class for a diagram item element implementation.
            </summary>
            <remarks>
            Items are added onto the surface by:
            - User-Command of the instance of this vm, uses AddNestedChild, AddRelativeChild function
            
            Items are removed from the surface by:
            - RemoveNestedChild, RemoveRelativeChild
            - Child ShapeElement removed from diagrams children collection (OnLinkShapeElementRemoved)
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel">
            <summary>
            Base abstract class representing a diagram item vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Shape element to be associated with this vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.ShapeElement">
            <summary>
            Gets the shape element, that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.IsSelected">
            <summary>
            Gets/sets whether the item is selected.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.Diagram">
            <summary>
            Gets the diagram this item belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel.AutomaticallyDeletesHostedElement">
            <summary>
            False if this item view model is directly hosted on the diagram surface and its shape can be deleted
            whithout the hosted model element beeing required to be deleted as well. True otherwise.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.GetPlacementSide">
            <summary>
            Gets the size this element is placed on, if this is a relative child shape
            with MovementBehaviour set to PositionOnEdgeOfParent. Otherwise, throws
            an InvalidOperationException.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.SetSize(Tum.PDE.ToolFramework.Modeling.Diagrams.SizeD)">
            <summary>
            Sets the size of this item and propagates it to the hosted shape element if allowed.
            </summary>
            <param name="newSize">Size to apply.</param>
            <remarks>
            This function needs to be called withing a modeling transaction.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.SetLocation(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD)">
            <summary>
            Sets the location of this item and propagates it to the hosted shape element if allowed.
            </summary>
            <param name="proposedLocation">Location to apply.</param>
            <remarks>
            This function needs to be called withing a modeling transaction.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.AddNestedChild(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Adds a nested child item to the current item.
            </summary>
            <param name="item">Child item to be added.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.AddRelativeChild(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Adds a relative child item to the current item.
            </summary>
            <param name="item">Child item to be added.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.RemoveNestedChild(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Removes the given item from the nested children collection.
            </summary>
            <param name="item">Child item to be removed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.RemoveRelativeChild(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Removes the given item from the relative children collection.
            </summary>
            <param name="item">Child item to be removed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.SetParent(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel,System.Boolean)">
            <summary>
            Assigns a parent item to the current item.
            </summary>
            <param name="parent">Parent item to be assigned.</param>
            <param name="bNestedChildItem">True if the child item is a nested item. False for relative item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.RemoveParent(System.Boolean)">
            <summary>
            Removes this element from its parents collection.
            </summary>
            <param name="bNestedChildItem">True if the child item is a nested item. False for relative item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.GetParent">
            <summary>
            Gets the parent item of this item. Can be null, which means, that this item is a root item on the diagram.
            </summary>
            <returns>Parent item or null.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.GetNestedChildren">
            <summary>
            Gets the collection of nested children.
            </summary>
            <returns>Collection of nested children.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.GetRelativeChildren">
            <summary>
            Gets the collection of relative children.
            </summary>
            <returns>Collection of relative children.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.GetEmbeddedItems(Microsoft.VisualStudio.Modeling.ModelElement,System.Collections.ObjectModel.Collection{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel})">
            <summary>
            Collects all embedded vms, that host the specified model element.
            </summary>
            <param name="modelElement">Hosted model element.</param>
            <param name="embeddedVms">Collected collection of embedded vms.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsDisplayingElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Verifies if the given element is already displayed as a child of this view model.
            </summary>
            <param name="modelElement">Model element to find.</param>
            <returns>True if the given element is already displayed as a child of this view model. False otherwise</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsDisplayingNodeShape(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Verifies if the given node shape is already displayed as a child of this view model.
            </summary>
            <param name="nodeShape">Node shape to find.</param>
            <returns>True if the given element is already displayed as a child of this view model. False otherwise</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.FixupShapeVisibility">
            <summary>
            Makes sure child and link shapes are visible
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnNestedChildShapeElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesNestedChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnNestedChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesNestedChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnRelativeChildShapeElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesRelativeChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnRelativeChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesRelativeChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnNestedChildShapeElementRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesNestedChildren is removed and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnRelativeChildShapeElementRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever a relationship of type NodeShapeReferencesRelativeChildren is removed and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnLocationChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever the location of the hosted shape changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnAbsoluteLocationChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever the location of the hosted shape changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnSizeChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever the size of the hosted shape changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Subscribe">
            <summary>
            Subscribes to events for the current hosted diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Unsubscribe">
            <summary>
            Unsubscribes from events for the current hosted diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.ShapeElement">
            <summary>
            Gets or sets the shape element, that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Parent">
            <summary>
            Gets the parent item of this item. Can be null, which means, that this item is a root item on the diagram.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.DiagramDomainData">
            <summary>
            Gets the diagram domain data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.NestedChildren">
            <summary>
            Gets the nested children of this item. A nested child is hosted within this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.RelativeChildren">
            <summary>
            Gets the relative children of this item. A relative child is hosted relative to this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsUIFixedPosition">
            <summary>
            Gets wheter this shape can be moved in the UI.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsWidthFixed">
            <summary>
            Gets whether the width of this item is fiex.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsHeightFixed">
            <summary>
            Gets whether the height of this item is fixed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Left">
            <summary>
            Gets or sets the position (LEFT) of this item on the canvas.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Top">
            <summary>
            Gets or sets the position (TOP) of this item on the canvas.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Width">
            <summary>
            Gets or sets the size (WIDTH) of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Height">
            <summary>
            Gets or sets the size (HEIGHT) of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Location">
            <summary>
            Gets or sets the location of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.AbsoluteLocation">
            <summary>
            Gets or sets the location of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Size">
            <summary>
            Gets or sets the size of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.Bounds">
            <summary>
            Gets or sets the bounds of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.ResizingBehaviour">
            <summary>
            Gets the resizing behaviour of the shape.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.MovementBehaviour">
            <summary>
            Gets the movement behaviour of the shape.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.IsRelativeChildShape">
            <summary>
            Gets whether the shape is a relative child shape or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.TakesPartInRelationship">
            <summary>
            Gets whether this shape takes part in any relationship or not.
            </summary>
            <returns>True if this shape takes part in any relationship. False otherwise</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.AbsoluteTop">
            <summary>
            Gets or sets the absolute position (TOP) of this item on the canvas.
            This is required to keep track of where the element globaly is and
            needs to be setup by the visualizing control.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.AbsoluteLeft">
            <summary>
            Gets or sets the absolute position (LEFT) of this item on the canvas.
            This is required to keep track of where the element globaly is and
            needs to be setup by the visualizing control.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.CanHaveNestedChildren">
            <summary>
            Gets whether this view model can have nested children or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel.CanHaveRelativeChildren">
            <summary>
            Gets whether this view model can have relative children or not.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemElementViewModel.AutomaticallyDeletesHostedElement">
            <summary>
            False if this item view model is directly hosted on the diagram surface and its shape can be deleted
            whithout the hosted model element beeing required to be deleted as well. True otherwise.
            </summary>
            <remarks>
            Items need to delete their hosted element if they are themselves not directly hosted
            on the diagram's surface.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel">
            <summary>
            Interface describing a diagram link view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.CalcFromAnchorPosition(System.Double,System.Double)">
            <summary>
            Calculates an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.CalcToAnchorPosition(System.Double,System.Double)">
            <summary>
            Calculates an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.SetFromAnchorPosition(System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.SetToAnchorPosition(System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.SetAnchorPosition(System.Guid,System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="anchorId"></param>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints,Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode)">
            <summary>
            Calculates a path geometry between the source and the target points.
            </summary>
            <param name="sourcePoint">Source point (Absolute location).</param>
            <param name="targetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <param name="routingMode">Routing mode.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.StartEdgePoint">
            <summary>
            Gets the start edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.EndEdgePoint">
            <summary>
            Gets the end edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.RoutingMode">
            <summary>
            Gets or sets the routing mode.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel.ShapeElement">
            <summary>
            Gets the shape element, that is hosted by this view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel">
            <summary>
            This view model is used to gather dependencies for specific model elements.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bSubscribeToEvents">True, if changes in the model need to be reflected on this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.Set(System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Gathers dependencies for given model elements and and wraps them for display.
            </summary>
            <param name="elements">Model elements to display dependencies for.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.Set(System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.ModelElement},Tum.PDE.ToolFramework.Modeling.DependenciesRetrivalOptions)">
            <summary>
            Gathers dependencies for given model elements and and wraps them for display.
            </summary>
            <param name="elements">Model elements to display dependencies for.</param>
            <param name="options">Options</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.Clear">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.Sort(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder,System.Boolean)">
            <summary>
            Sorts the dependencies list.
            </summary>
            <param name="order">Order to sort the dependencies list by.</param>
            <param name="bAscending">Ascending or descending order.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleEmbeddedCategoryCommand_Executed">
            <summary>
            ToggleEmbeddedCategoryCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleEmbeddingCategoryCommand_Executed">
            <summary>
            ToggleEmbeddingCategoryCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleReferencedCategoryCommand_Executed">
            <summary>
            ToggleReferencedCategoryCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleReferencingCategoryCommand_Executed">
            <summary>
            ToggleReferencingCategoryCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByNumberCommand_Executed">
            <summary>
            SortByNumberCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByCategoryCommand_Executed">
            <summary>
            SortByCategoryCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortBySourceModelElementCommand_Executed">
            <summary>
            SortBySourceModelElementCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByTargetModelElementCommand_Executed">
            <summary>
            SortByTargetModelElementCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByLinkElementCommand_Executed">
            <summary>
            SortByLinkElementCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.HideItems(Tum.PDE.ToolFramework.Modeling.DependencyItemCategory)">
            <summary>
            Removes the items of a specific category from dependencies list.
            </summary>
            <param name="itemsCategory">Category of items to hide.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ShowItems(Tum.PDE.ToolFramework.Modeling.DependencyItemCategory)">
            <summary>
            Show items of a specific category in dependencies list.
            </summary>
            <param name="itemsCategory">Category of items to show.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.UpdateDisplayList">
            <summary>
            Updates the items in the display list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.NavigateToSourceCommand_Executed">
            <summary>
            NvigateToSourceCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.NavigateToTargetCommand_Executed">
            <summary>
            NvigateToTargetCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SelectedItem">
            <summary>
            Gets or sets the selected element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.DisplayedDependencies">
            <summary>
            Gets the current dependencies.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortOrder">
            <summary>
            Sort order in the dependencies view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.MenuOptions">
            <summary>
            Context menu options.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ActiveDependencies">
            <summary>
            Gets the list of all active dependencies.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.IsSortedAscending">
            <summary>
            Ascending or descending sort order.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.AllowNavigation">
            <summary>
            Gets or sets whether navigation to source or target element is allowed or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.EmbeddedCount">
            <summary>
            Embedded dependency items count.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.EmbeddingCount">
            <summary>
            Embedding dependency items count.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ReferencedCount">
            <summary>
            Referenced dependency items count.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ReferencingCount">
            <summary>
            Referencing dependency items count.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.NavigateToSourceCommand">
            <summary>
            NavigateToSource Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.NavigateToTargetCommand">
            <summary>
            NavigateToTarget Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleEmbeddedCategoryCommand">
            <summary>
            ToggleEmbeddedCategory Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleEmbeddingCategoryCommand">
            <summary>
            ToggleEmbeddingCategory Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleReferencedCategoryCommand">
            <summary>
            ToggleReferencedCategory Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.ToggleReferencingCategoryCommand">
            <summary>
            ToggleReferencingCategory Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByNumberCommand">
            <summary>
            SortByNumber Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByCategoryCommand">
            <summary>
            SortByCategory Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortBySourceModelElementCommand">
            <summary>
            SortBySourceModelElement Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByTargetModelElementCommand">
            <summary>
            SortByTargetModelElement Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesViewModel.SortByLinkElementCommand">
            <summary>
            SortByLinkElementCommand Command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb">
            <summary>
            Diagram designer link drag thumb, which is used to move source or target connector.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.DragThumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Dragging has started, see if VM is IDiagramLinkViewModel and notify of moving start.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.DragThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Dragging has ended, see if VM is IDiagramDesignerItem and notify of moving end.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.DragThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Move item(s).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.EdgePointType">
            <summary>
            Gets the edge point type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.EdgePointOperation">
            <summary>
            Gets the edge point operation.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerLinkDragThumb.Id">
            <summary>
            Gets or set the id of the edge point represented by this thumb.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb">
            <summary>
            This class is used to move diagram items.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.MinDistanceToStart">
            <summary>
            Value indicating the minimal distance the dragging operation requires to have 
            passed before starting the actual movement of the selected elements.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.DragThumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Dragging has started, see if VM is IDiagramDesignerItem and notify of moving start.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.Start">
            <summary>
            Start the drag operation.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.DragThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Dragging has ended, see if VM is IDiagramDesignerItem and notify of moving end.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemDragThumb.DragThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Move item(s).
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink">
            <summary>
            This class represents a link.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.PathStyleProperty">
            <summary>
            Path style property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.StartArrowStyleProperty">
            <summary>
            Start arrow style property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.EndArrowStyleProperty">
            <summary>
            End arrow style property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.StartAnchorStyle">
            <summary>
            Gets or sets the start anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.EndAnchorStyle">
            <summary>
            Gets or sets the end anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.PathStyle">
            <summary>
            Style for the path.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.StartArrowStyle">
            <summary>
            Style for the start arrow.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemLink.EndArrowStyle">
            <summary>
            Style for the end arrow.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector">
            <summary>
            Diagram connectors are used to create new relationships between diagram items. They are
            the source elements, where such creations can be initiated.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector.dragStartPoint">
            <summary>
            Drag start point, relative to the DesignerCanvas.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Get start point of the possible selection operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Process selection operation
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector.DiagramItem">
            <summary>
            Gets the diagram item, to which this connector belongs.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner">
            <summary>
            Adorner displaying 1 child element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner.#ctor(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Element the adorner is added to (on the adorner layer).</param>
            <param name="adorner">Child element to display on the adorner.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange override implementation.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner.GetVisualChild(System.Int32)">
            <summary>
            Gets the visual child.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner.Child">
            <summary>
            Child hosted by the adorner.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.DecoratorAdorner.VisualChildrenCount">
            <summary>
            Gets the count of visual children (always 1).
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ContextMenu.ContextMenuStyleSelector">
            <summary>
            Style selector for the context menu items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ContextMenu.ContextMenuStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects a style based on the current item.
            </summary>
            <param name="item">Item</param>
            <param name="container">Container</param>
            <returns>Style or null.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ContextMenu.ContextMenuStyleSelector.MenuItemStyle">
            <summary>
            Normal menu item style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ContextMenu.ContextMenuStyleSelector.MenuItemSeparatorStyle">
            <summary>
            Separator menu item style.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetInsertionAdorner">
            <summary>
            Drop target insertion adorner.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorner">
            <summary>
            Base drop target adorner class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="adornedElement"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorner.Detatch">
            <summary>
            Detach.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorner.DropInfo">
            <summary>
            Gets or sets the drop info.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetInsertionAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="adornedElement"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetInsertionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ButtonHelper">
            <summary>
            Attached properties for Button-Control: 
            
            - DialogResultProperty: Simulates DialogResult as known in WinForms.
            
            
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ButtonHelper.GetDialogResult(System.Windows.DependencyObject)">
            <summary>
            Gets the dialog result value for the DialogResultProperty on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ButtonHelper.SetDialogResult(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the dialog result value for the DialogResultProperty on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">Value.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ButtonHelper.DialogResultProperty">
            <summary>
            Dialog result property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin">
            <summary>
            Simple plugin interface.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin.Execute(Tum.PDE.ToolFramework.Modeling.ModelData)">
            <summary>
            Executes the plugins function.
            </summary>
            <param name="modelData">
            Class representing the currently loaded data instance. 
            modelData.RootElement is the root element of the domain model.
            </param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin.MenuName">
            <summary>
            Gets the name of the menu item identifying the plugin.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin.MenuImage">
            <summary>
            Gets the image of the menu item identifying the plugin.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IPlugin.ModelContext">
            <summary>
            Gets the model context this plugin should extend.
            </summary>
            <remarks>
            If this value is null, this plugin is considered for every context in the model.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Threading.DispatcherExtensions">
            <summary>
            Provides a set of commonly used Dispatcher extension methods
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Threading.DispatcherExtensions.InvokeIfRequired(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            A simple threading extension method, to invoke a delegate
            on the correct thread if it is not currently on the correct thread
            which can be used with DispatcherObject types.
            </summary>
            <param name="dispatcher">The Dispatcher object on which to 
            perform the Invoke</param>
            <param name="action">The delegate to run</param>
            <param name="priority">The DispatcherPriority for the invoke.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Threading.DispatcherExtensions.InvokeIfRequired(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            A simple threading extension method, to invoke a delegate
            on the correct thread if it is not currently on the correct thread
            which can be used with DispatcherObject types.
            </summary>
            <param name="dispatcher">The Dispatcher object on which to 
            perform the Invoke</param>
            <param name="action">The delegate to run</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Threading.DispatcherExtensions.InvokeInBackgroundIfRequired(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            A simple threading extension method, to invoke a delegate
            on the correct thread if it is not currently on the correct thread
            which can be used with DispatcherObject types.
            </summary>
            <param name="dispatcher">The Dispatcher object on which to 
            perform the Invoke</param>
            <param name="action">The delegate to run</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Threading.DispatcherExtensions.InvokeAsynchronouslyInBackground(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            A simple threading extension method, to invoke a delegate
            on the correct thread asynchronously if it is not currently 
            on the correct thread which can be used with DispatcherObject types.
            </summary>
            <param name="dispatcher">The Dispatcher object on which to 
            perform the Invoke</param>
            <param name="action">The delegate to run</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs">
            <summary>
            This is the EventArgs return value for the IUIController.Show completed event.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs.State">
            <summary>
            Data passed to the Show method.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.UICompletedEventArgs.Result">
            <summary>
            Final result of the UI dialog
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService">
            <summary>
            This class implements the IOpenFileService for WPF purposes.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService.ofd">
            <summary>
            Embedded OpenFileDialog to pass back correctly selected
            values to ViewModel
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService.ShowDialog(System.Windows.Window)">
            <summary>
            This method should show a window that allows a file to be selected
            </summary>
            <param name="owner">The owner window of the dialog</param>
            <returns>A bool from the ShowDialog call</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService.FileName">
            <summary>
            FileName : Simply use embedded OpenFileDialog.FileName
            But DO NOT allow a Set as it will ONLY come from user
            picking a file
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService.Filter">
            <summary>
            Filter : Simply use embedded OpenFileDialog.Filter
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.OpenFileService.InitialDirectory">
            <summary>
            Filter : Simply use embedded OpenFileDialog.InitialDirectory
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService">
            <summary>
            This interface defines a interface that will allow 
            a ViewModel to save a file
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService.ShowDialog(System.Windows.Window)">
            <summary>
            This method should show a window that allows a file to be saved
            </summary>
            <param name="owner">The owner window of the dialog</param>
            <returns>A bool from the ShowDialog call</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService.OverwritePrompt">
            <summary>
            FileName
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService.FileName">
            <summary>
            FileName
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ISaveFileService.InitialDirectory">
            <summary>
            Filter
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.IntegerEditorViewModel">
            <summary>
            This class represents a integer property style view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.StringEditorViewModel">
            <summary>
            This class represents a string property style view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.StringEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.StringEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> empty value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.StringEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.StringEditorViewModel.PropertyType">
            <summary>
            Gets the property type that is edited within this view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.IntegerEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.IntegerEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> empty value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.IntegerEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.IntegerEditorViewModel.PropertyType">
            <summary>
            Gets the property type that is edited within this view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.DispatcherEventSubscription`1">
            <summary>
             Extends <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1"/> to invoke the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action"/> delegate
             in a specific <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
             <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.DispatcherEventSubscription`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.IDispatcherFacade)">
            <summary>
             Creates a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <param name="dispatcher">The dispatcher to use when executing the <paramref name="actionReference"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventAggregator">
            <summary>
            Defines an interface to get instances of an event type.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent">
            <summary>
            Notifies that a model role player has been changed in the domain model.
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Subscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Subscribes to the role player changed event. Observers are notified, whenever role player changes on a
            specific model element.
            </summary>
            <param name="elementId">Id of the model element, on which role player changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Subscribes to the property changed event. Observers are notified, whenever a role of a specific type
            changes.
            </summary>
            <param name="domainRoleInfo">Role info specifying a role type, which changes cause a notification.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Subscribes to the role player changed event. Observers are notified, whenever a role of a certain type
            changes on a specific element link.
            </summary>
            <param name="domainRoleInfo">Role info specifying a role type, which changes cause a notification.</param>
            <param name="elementLinkId">Id of the link, on which role changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Subscribes to the role player changed event.
            </summary>
            <param name="domainRelationshipInfo">RelationshipInfo, which changes cause a notification.</param>
            <param name="bSourceRole"></param>
            <param name="elementId">Id of the role player, on which role changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Publish(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Unsubscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="elementId">Model element id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRoleInfo">Domain role info specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRoleInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRoleInfo">Domain role info specifying when to unsubscribe.</param>
            <param name="elementLinkId">Link id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelRolePlayerChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRelationshipInfo">Domain relationship info specifying when to unsubscribe.</param>
            <param name="bSourceRole"></param>
            <param name="elementId">Role player id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ErrorListRemoveItem">
            <summary>
            Event to notify that specific error list item need to be removed from the error list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEvent">
            <summary>
            This event is sent whenever a CultureInfo change occurs.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.SerializationErrorListItemViewModel">
            <summary>
            This is the error list item view model for an serialization error. As such, the source should be
            the file and line and column numbers.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.SerializationErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.SerializationMessage)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="serializationMessage">Serialization message.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.SerializationErrorListItemViewModel.Navigate">
            <summary>
            Navigate to source. In this case, just display message box.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.SerializationErrorListItemViewModel.GetUniqueId">
            <summary>
            This method provides an unique id for the current model item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyLinkViewModel">
            <summary>
            This view model represents a GraphicalDependencyLinkShape.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel">
            <summary>
            Base abstract class for a diagram link vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="linkShape">Linkshape to be associated with this vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.UpdateAnchorPoints">
            <summary>
            Update anchor points. Called after source or target was moved.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.UpdateEdgePoints">
            <summary>
            Updates edge points.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.CalcFromAnchorPosition(System.Double,System.Double)">
            <summary>
            Calculates an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.CalcToAnchorPosition(System.Double,System.Double)">
            <summary>
            Calculates an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.SetFromAnchorPosition(System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.SetToAnchorPosition(System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.SetAnchorPosition(System.Guid,System.Double,System.Double)">
            <summary>
            Set an anchor position based on a horizontal and verical changes proposed.
            </summary>
            <param name="anchorId"></param>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>Calculated position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints,Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode)">
            <summary>
            Calculates a path geometry between the source and the target points.
            </summary>
            <param name="sourcePoint">Source point (Absolute location).</param>
            <param name="targetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <param name="routingMode">Routing mode.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.ConvertEdgePointsToGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.EdgePointCollection)">
            <summary>
            Converts a collection of edge points to the corresponding path geometry.
            </summary>
            <param name="edgePoints">Collection of edge points.</param>
            <returns>Path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.OnEdgePointsChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever the edge point collection changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.Subscribe">
            <summary>
            Subscribes to events for the current hosted diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.Unsubscribe">
            <summary>
            Unsubscribes from events for the current hosted diagram.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.Geometry">
            <summary>
            Gets the path geometry for this link.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.EdgePoints">
            <summary>
            Gets the edge points.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.ShapeElement">
            <summary>
            Gets or sets the shape element, that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.StartEdgePoint">
            <summary>
            Gets the start edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.MiddleEdgePoint">
            <summary>
            Gets the start edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.EndEdgePoint">
            <summary>
            Gets the end edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.FromAnchorAngle">
            <summary>
            Gets or sets the from anchor angle.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.ToAnchorAngle">
            <summary>
            Gets or sets the to anchor angle.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.IsUIFixedPosition">
            <summary>
            Gets wheter this shape can be moved in the UI.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.AutomaticallyDeletesHostedElement">
            <summary>
            False if this item view model is directly hosted on the diagram surface and its shape can be deleted
            whithout the hosted model element beeing required to be deleted as well. True otherwise.
            </summary>
            <remarks>Links are required to delete model elements if they are deleted.</remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel.RoutingMode">
            <summary>
            Gets or sets the routing mode.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyLinkViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel">
            <summary>
            This view model is used for graphical dependencies shapes if there is no other shape available.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.OnNestedChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren)">
            <summary>
            
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.OnRelativeChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren)">
            <summary>
            
            </summary>
            <param name="con"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.Diagram">
            <summary>
            Gets the diagram this item belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.AutomaticallyDeletesHostedElement">
            <summary>
            Never delete hosted element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.CanHaveRelativeChildren">
            <summary>
            No relative children.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyItemViewModel.CanHaveNestedChildren">
            <summary>
            No nested children.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramRubberbandSelector">
            <summary>
            Helper class to render the rubberband selector on the diagram surface.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramRubberbandSelector.RubberbandSelectionStartPoint">
            <summary>
            Start point of the selector.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramRubberbandSelector.IgnoreRubberbandSelectionOnce">
            <summary>
            Ignore the next drawing event.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramRubberbandSelector.CancelRubberbandSelection">
            <summary>
            Cancel rubberband selection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramRubberbandSelector.DrawOnMouseMove(System.Windows.Input.MouseEventArgs,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas)">
            <summary>
            Draw the rubberband.
            </summary>
            <param name="e"></param>
            <param name="control"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.SpecificDependenciesViewControl">
            <summary>
            Interaction logic for SpecificDependenciesViewControl.xaml
            </summary>
            <summary>
            SpecificDependenciesViewControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.SpecificDependenciesViewControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.SpecificDependenciesViewControl.ItemPanelBackgroundProperty">
            <summary>
            Clicked point property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.SpecificDependenciesViewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.SpecificDependenciesViewControl.ItemPanelBackground">
            <summary>
            Clicked point.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewSelectedItemBehavior">
            <summary>
            Selected item behavior for the treeview.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewSelectedItemBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewSelectedItemBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewSelectedItemBehavior.SelectedItemProperty">
            <summary>
            Selected item dependency property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewSelectedItemBehavior.SelectedItem">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider">
            <summary>
            This class acts as a resolver for typed services 
            (interfaces and implementations).
            </summary>
            <example>
            To register a service use Add:
            <![CDATA[
            serviceResolver.Add(typeof(IService), new Service());
            
            To retrieve a service use Resolve:
            
            IService svc = serviceResolver<IService>.Resolve();
            ]]>
            </example>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider.Clear">
            <summary>
            Clears all services from the resolver list 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Adds a new service to the resolver list
            </summary>
            <param name="type">Service Type (typically an interface)</param>
            <param name="value">Object that implements service</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider.Remove(System.Type)">
            <summary>
            Remove a service
            </summary>
            <param name="type">Type to remove</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider.Resolve``1">
            <summary>
            This resolves a service type and returns the implementation. Note that this
            assumes the key used to register the object is of the appropriate type or
            this method will throw an InvalidCastException!
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>Implementation</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.ServiceProvider.GetService(System.Type)">
            <summary>
            Implementation of IServiceProvider
            </summary>
            <param name="serviceType">Service Type</param>
            <returns>Object implementing service</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSortDelegate`1">
            <summary>
            Delegate that can be used to sort a generic collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsToSearchWithin">Items to sort.</param>
            <returns>Sorted collection.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultiplePropertyGridViewModel">
            <summary>
            Class to group multiple property grid view models together.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel">
            <summary>
            This abstract base class provides methods/properties that are necessary for a propery grid view model.
            Classes that derive from this base class represent concrete property grid view models (for specific elements).
            Idealy, we would use this model for visualization in the view, but since we need to be able
            to edit equal properties of multiple elements at once, we can not use this for display. Thus,
            we combine multiple view models which derive from this class in the main property grid view 
            model (MainPropertyGridViewModel).
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Model element for which this property grid view model is created.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel.GetEditorViewModels">
            <summary>
            Returns the collection of editor view models.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel.Element">
            <summary>
            Gets the model element (part of the Model), which is represented by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel.ElementFullName">
            <summary>
            Gets or sets the full name of the element, which properties are to be added.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel.ElementDescription">
            <summary>
            Gets the description of the element, which properties are to be added.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultiplePropertyGridViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModel})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="elementVMs">Element vms.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultiplePropertyGridViewModel.GetEditorViewModels">
            <summary>
            Returns the collection of editor view models.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultiplePropertyGridViewModel.ElementFullName">
            <summary>
            Gets or sets the full name of the element, which properties are to be added.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.MultiplePropertyGridViewModel.ElementDescription">
            <summary>
            Gets the description of the element, which properties are to be added.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel">
            <summary>
            This class represents an enumeration property style view model. As such it provides a list of
            default values that are derived from the given enumeration type as well as null element
            value (NullElement).
            
            Hint: Enumerations in our domain model have a specific type onverter assigned to them:
            e.g.: [System.ComponentModel.TypeConverter(typeof(GenerierterInhaltEnumConverter))].
            That type converter provides display name values (as they are stored inside a .resx). 
            Should a given enumeration not have that kind of a type converter, then the 'real' names are displayed.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.NullElement">
            <summary>
            Null element name.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Type)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="enumerationType">Type of the enumeration.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Type,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="enumerationType">Type of the enumeration.</param>
            <param name="isFlags">IsFlags field.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.GetDefaultValues">
            <summary>
            Returns the default value for the current enumeration.
            </summary>
            <returns>List of default values.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.InsertSentinelDefaultValue(System.Collections.Generic.List{System.Object})">
            <summary>
            Insert sentinel item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.SortByRealValue(System.Object,System.Object)">
            <summary>
            Sort the default values list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> null value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.UpdatePropertyValue">
            <summary>
            Updates the proeprty value;
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.CanHandleMultipleElements">
            <summary>
            Can handle multiple elements if IsFlags=False.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.DisplayText">
            <summary>
            Gets the display text. This is only relevant if "IsFlags" is set to true.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.IsFlags">
            <summary>
            Gets whether the edited enumeration is marked as "isFlags".
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item">
            <summary>
            Enumeration item helper class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="vm">Enum vm.</param>
            <param name="item">Enumeration literal.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel,System.Object,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="vm">Enum vm.</param>
            <param name="item">Enumeration literal.</param>
            <param name="isChecked">Is checked.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.OnPropertyChanged(System.String)">
            <summary>
            Called whenever a specific property changes.
            </summary>
            <param name="name">Name of the property, which value changed.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.Object">
            <summary>
            Gets the enumeration literal.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.IsChecked">
            <summary>
            Gets or sets the "IsChecked" property.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.EnumerationEditorViewModel.Item.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEvent">
            <summary>
            Event, requesting a docking view model to be opened by the main view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ErrorListAddItem">
            <summary>
            Event to notify that an error list item needs to be added to the error list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder">
            <summary>
            Sort order in the error list.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder.Number">
            <summary>
            Sorted by number of error item.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder.Category">
            <summary>
            Sorted by the category of error items.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder.Description">
            <summary>
            Sorted by the description of error items.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListSortOrder.SourceDisplayName">
            <summary>
            Sorted by the source display name of error items.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder">
            <summary>
            Sort order in the dependencies view model.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder.NumberAdded">
            <summary>
            Sort by number.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder.DependencyCategory">
            <summary>
            Sort by category.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder.SourceModelElement">
            <summary>
            Sort by source element name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder.TargetModelElement">
            <summary>
            Sort by target element name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependenciesSortOrder.LinkElement">
            <summary>
            Sort by relationship name.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DesignerSurfaceViewModel">
            <summary>
            This is a diagram surface view model that can display the properties of any element dragged on it.
            </summary>
            <remarks>
            The displayed properties include Parent element, Child elements as well as Referenced elements.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel">
            <summary>
            This is the base abstract class for a diagram surface implementation, which can either be based on the default 
            diagram model or be provided by the used.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IContextableDockableViewModel">
            <summary>
            This is a dockable VM that belongs to a specific model context.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IContextableDockableViewModel.ModelContextName">
            <summary>
            Gets the model context name.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPluginHosterViewModel">
            <summary>
            Interface for a plugin hoster vm. (A vm, that has been added as a plugin).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPluginHosterViewModel.VMPlugin">
            <summary>
            Gets or sets the vm plugin data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPluginHosterViewModel.IsVMPlugin">
            <summary>
            Gets whether this vm is a VM plugin.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPluginHosterViewModel.VMPluginHasDictionary">
            <summary>
            True if the vmplugin has a resource dictionary.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IPluginHosterViewModel.VMPluginDictionaryInitialized">
            <summary>
            Gets or sets whether the vm plugin dictionary has been initialized.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Model context.</param>
            <param name="bCallIntialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContextName">Model context name.</param>  
            <param name="bCallIntialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">Diagram.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">Diagram.</param>
            <param name="modelContext">Model context.</param>
            <param name="bCallIntialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,System.String,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>   
            <param name="diagram">Diagram.</param>
            <param name="modelContextName">Model context name.</param>
            <param name="bCallIntialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.Reset">
            <summary>
            Resets the current view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.OnReset">
            <summary>
            Called whenever this view model needs to reset itself.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.ModelContextName">
            <summary>
            Gets the model context.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.Diagram">
            <summary>
            Gets or set the diagram that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.SelectedItemsCollection">
            <summary>
            Gets the selected model elements collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.IsDiagramDesignerViewModelVisible">
            <summary>
            Gets whether this view model is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.VMPlugin">
            <summary>
            Gets or sets the vm plugin data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.IsVMPlugin">
            <summary>
            Gets whether this vm is a VM plugin.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.VMPluginHasDictionary">
            <summary>
            True if the vmplugin has a resource dictionary.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel.VMPluginDictionaryInitialized">
            <summary>
            Gets or sets whether the vm plugin dictionary has been initialized.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesItemViewModel">
            <summary>
            Specific dependencies item vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Constructor. The view model constructed this way does not react on model changes, as such DoHookUpEvents is false.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element represented by this view model.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesItemViewModel.Index">
            <summary>
            Index of the element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesItemViewModel.DomainElementIndexedName">
            <summary>
            Indexed name of the element. (e.g.: 1. Role)
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesItemViewModel.DomainElementIndexedFullName">
            <summary>
            Indexed full name of the element. (e.g.: 1. Role (RolePlayer))
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ServiceRegistrar">
            <summary>
            This class is used to register services.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ServiceRegistrar.RegisterServices(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Register services to the given store.
            </summary>
            <param name="store">ViewModelStore.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel">
            <summary>
            View model for handling mru file entries.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="mainViewModel">The main view model, this MRU view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.InitializeMRUEntries(System.String)">
            <summary>
            Initializes mru entries based on the given context name.
            </summary>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.AddCommandExecuted(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            AddCommand executed.
            </summary>
            <param name="entry">MRU file entry.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.RemoveCommandExecuted(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Remove command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.MoveToTopCommandExecuted(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Move to top command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.OpenCommandExecuted(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Open command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.AddMRUEntry(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Adds a new mru entry to the collection.
            </summary>
            <param name="entry">MRU entry to add</param>
            <remarks>
            If the given mru entry already exists in the collection --> we move it to the top of the list, making it the most recent entry.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.AddMRUEntry(System.String)">
            <summary>
            Adds a new mru entry to the collection.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.Contains(System.String,System.String)">
            <summary>
            Verifies if there is a mru entry pointing at the given file name and providing the same version as given.
            </summary>
            <param name="fileName">File name.</param>
            <param name="modelContextName">Model context name.</param>
            <returns>True if a mru entry is found; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.Contains(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Verifies if there is a specific mru entry.
            </summary>
            <param name="mruEntry">Mru entry.</param>
            <returns>True if a mru entry is found; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.MoveToTop(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Moves an mru entry to the top of the list.
            </summary>
            <param name="entry">MRU entry.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.MoveToTop(System.String,System.String)">
            <summary>
            Moves an mru entry to the top of the list.
            </summary>
            <param name="fileName">MRU file name.</param>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.RemoveMRUEntry(Tum.PDE.ToolFramework.Modeling.Base.MRUFileEntry)">
            <summary>
            Removes an mru entry from the list.
            </summary>
            <param name="entry">MRU entry.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.RemoveMRUEntry(System.String,System.String)">
            <summary>
            Removes an mru entry from the list.
            </summary>
            <param name="fileName">File name pointing to an mru entry.</param>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.MRUFileEntries">
            <summary>
            Gets the mru fil entries.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.SelectedMRUFileEntry">
            <summary>
            Gets or sets the selected mru file entry.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.AddCommand">
            <summary>
            Gets the add command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.RemoveCommand">
            <summary>
            Gets the remove command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.MoveToTopCommand">
            <summary>
            Gets the move to top command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.MRUFilesViewModel.OpenCommand">
            <summary>
            Gets the open command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.CreditsViewModel">
            <summary>
            This class provides credits.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel">
            <summary>
            Base abstract view model class for displaying link items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.AddLinkItem(Tum.PDE.ToolFramework.Modeling.Base.LinkItem)">
            <summary>
            Adds a new link item.
            </summary>
            <param name="linkItem">Link item to add.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.LinkItemVMsWithoutCategory">
            <summary>
            Gets the link items vms, which don't find a specific category.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.LinkItemVmsCategorized">
            <summary>
            Gets the link item categories sorted by categories.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.HasLinkItems">
            <summary>
            Gets whether this view model has any items.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.HasLinkItemVMsWithoutCategory">
            <summary>
            Gets whether there are link items without a category present.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LinkItemsViewModel.HasLinkItemVmsCategorized">
            <summary>
            Gets whether there are link items with a category present.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.CreditsViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceConverter">
            <summary>
            Missing source converter provides a text if the source is missing.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceConverter.MissingSourceText">
            <summary>
            Gets or sets the missing source text.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectRSTypePopup">
            <summary>
            Interaction logic for SelectRSTypePopup.xaml
            </summary>
            <summary>
            SelectRSTypePopup
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectRSTypePopup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectRSTypePopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings">
            <summary>
            This class holds static configuration values that should
            be set once (or be auto-loaded once) for the application
            
            This object becomes a static property on the ResExtension
            instance.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.AddAssembly(System.String)">
            <summary>
            Allows adding an assembly to the internal lookup list of assemblies 
            that can be accessed for binding. 
            
            This method allows preloading of the assembly as opposed to when
            the markup extension tries to find it.
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.AddAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Allows you to directly add an assembly to the internal assembly
            lookup list.
            This method allows preloading of the assembly as opposed to when
            the markup extension tries to find it.
            </summary>
            <param name="assemblyName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.AddAssembly(System.String,System.String)">
            <summary>
            Allows adding an assembly to the list of assemblies that is
            used for lookup up resources. This version allows 
            </summary>
            <param name="assemblyId"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.Initialize(System.Reflection.Assembly,System.Resources.ResourceManager)">
            <summary>
            Initialization.
            </summary>
            <param name="resourceAssembly"></param>
            <param name="manager"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.OnCultureChanged">
            <summary>
            On culture changed.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.ResourceManagers">
            <summary>
            Cached ResourceManagers for each ResourceSet supported requested.       
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.GetResourceManager(System.String,System.String)">
            <summary>
            Retrieves a resource manager for the appropriate ResourceSet
            By default the 'global' Resource
            </summary>
            <param name="resourceSet"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.GetResourceManager(System.String,System.Reflection.Assembly)">
            <summary>
            Gets the resource manager.
            </summary>
            <param name="resourceSet"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.Current">
            <summary>
            Global singleton instance of configuration settings
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.DefaultResourceManager">
            <summary>
            The default resource manager used.
            </summary>        
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.DefaultResourceAssembly">
            <summary>
            The Assembly from which resources are loaded
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.CheckForCultureChange">
            <summary>
            Gets or sets the CheckForCultureChange property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.FlowDirection">
            <summary>
            Hold flow direction that can be bound to dynamically:
            FlowDirection="{Binding Source={x:Static res:LocalizationSettings.Current},Path=FlowDirection}"  
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.CurrentCulture">
            <summary>
            Allows triggering of culture changes to rebind any active
            bindings.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.CultureChanged">
            <summary>
            Culture changed event.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalizationSettings.PropertyChanged">
            <summary>
            Property changed event handler.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel">
            <summary>
            A scrollable TabPanel control.
            </summary>
            <remarks>
            Source: http://blogs.intuidev.com/post/2010/02/15/WPF-TabControl-series-Part-4-Closeable-TabItems.aspx
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel._ttScrollTransform">
            <summary>
            This will apply the present scroll-position resp. -offset.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CalculateNewScrollOffset(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the HorizontalOffset for a given child-control, based on a desired value.
            </summary>
            <param name="dblViewport_Left">The left offset of the Viewport.</param>
            <param name="dblViewport_Right">The right offset of the Viewport.</param>
            <param name="dblChild_Left">The left offset of the control in question.</param>
            <param name="dblChild_Right">The right offset of the control in question.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.UpdateMembers(System.Windows.Size,System.Windows.Size)">
            <summary>
            Compares the present sizes (Extent/Viewport) against the local values
            and updates them, if required.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.getLeftEdge(System.Windows.UIElement)">
            <summary>
            Returns the left position of the requested child (in Viewport-coordinates).
            </summary>
            <param name="uieChild">The child to retrieve the position for.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.IsPartlyVisible(System.Windows.UIElement)">
            <summary>
            Determines whether the passed child control is only partially visible
            (i.e. whether part of it is outside of the Viewport).
            </summary>
            <param name="uieChild">The child control to be tested.</param>
            <returns>
            True if part of the control is further to the left or right of the
            Viewport, False otherwise.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PartlyVisiblePortion_OverflowToRight(System.Windows.UIElement)">
            <summary>
            Determines the visible part of the passed child control, 
            measured between 0 (completely invisible) and 1 (completely visible),
            that is overflowing into the right invisible portion of the panel.
            </summary>
            <param name="uieChild">The child control to be tested.</param>
            <returns>
            <para>A number between 0 (the control is completely invisible resp. outside of
            the Viewport) and 1 (the control is completely visible).</para>
            <para>All values between 0 and 1 indicate the part that is visible
            (i.e. 0.4 would mean that 40% of the control is visible, the remaining
            60% will overflow into the right invisible portion of the panel.</para>
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PartlyVisiblePortion_OverflowToLeft(System.Windows.UIElement)">
            <summary>
            Determines the visible part of the passed child control, 
            measured between 0 (completely invisible) and 1 (completely visible),
            that is overflowing into the left invisible portion of the panel.
            </summary>
            <param name="uieChild">The child control to be tested.</param>
            <returns>
            <para>A number between 0 (the control is completely invisible resp. outside of
            the Viewport) and 1 (the control is completely visible).</para>
            <para>All values between 0 and 1 indicate the part that is visible
            (i.e. 0.4 would mean that 40% of the control is visible, the remaining
            60% will overflow into the left invisible portion of the panel.</para>
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.GetScrollViewerRectangle">
            <summary>
            Returns the currently rendered rectangle that makes up the Viewport.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.GetChildRectangle(System.Windows.UIElement)">
            <summary>
            Returns the rectangle that defines the outer bounds of a child control.
            </summary>
            <param name="uieChild">The child/control for which to return the bounding rectangle.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.GetIntersectionRectangle(System.Windows.UIElement)">
            <summary>
            Returns a Rectangle that contains the intersection between the ScrollViewer's
            and the passed child control's boundaries, that is, the portion of the child control
            which is currently visibile within the ScrollViewer's Viewport.
            </summary>
            <param name="uieChild">The child for which to retrieve Rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.RemoveOpacityMasks">
            <summary>
            Will remove the OpacityMask for all child controls.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.RemoveOpacityMask(System.Windows.UIElement)">
            <summary>
            Will remove the OpacityMask for all child controls.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.UpdateOpacityMasks">
            <summary>
            Will check all child controls and set their OpacityMasks.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.UpdateOpacityMask(System.Windows.UIElement)">
            <summary>
            Takes the given child control and checks as to whether the control is completely
            visible (in the Viewport). If not (i.e. if it's only partially visible), an OpacityMask
            will be applied so that it fades out into nothingness.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            This is the 1st pass of the layout process. Here, the Extent's size is being determined.
            </summary>
            <param name="availableSize">The Viewport's rectangle, as obtained after the 1st pass (MeasureOverride).</param>
            <returns>The Viewport's final size.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            This is the 2nd pass of the layout process, where child controls are
            being arranged within the panel.
            </summary>
            <param name="finalSize">The Viewport's rectangle, as obtained after the 1st pass (MeasureOverride).</param>
            <returns>The Viewport's final size.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="visualAdded"></param>
            <param name="visualRemoved"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineDown">
            <summary>
            Increments the vertical offset.
            </summary>
            <remarks>This is unsupported.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineLeft">
            <summary>
            Decrements the horizontal offset by the amount specified in the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineScrollPixelCount"/> property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineRight">
            <summary>
            Increments the horizontal offset by the amount specified in the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineScrollPixelCount"/> property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineUp">
            <summary>
            Decrements the vertical offset.
            </summary>
            <remarks>This is unsupported.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Scrolls a child of the panel (Visual) into view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MouseWheelDown">
            <summary>
            Mouse wheel down. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MouseWheelLeft">
            <summary>
            Mouse wheel left. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MouseWheelRight">
            <summary>
            Mouse wheel right. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.MouseWheelUp">
            <summary>
            Mouse wheel up. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PageDown">
            <summary>
            Page down. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PageLeft">
            <summary>
            Page left. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PageRight">
            <summary>
            Page right. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PageUp">
            <summary>
            Page up. Not impemented.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the horizontal offset.
            </summary>
            <param name="offset">Offset.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.SetVerticalOffset(System.Double)">
            <summary>
            Sets the vertical offset.
            </summary>
            <param name="offset">Offset.</param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.RightOverflowMarginProperty">
            <summary>
            Right overflow margin property
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.AnimationTimeSpanProperty">
            <summary>
            Animation time span property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineScrollPixelCountProperty">
            <summary>
            The amount of pixels to scroll by for the LineLeft() and LineRight() methods.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.NotifyPropertyChanged(System.String)">
            <summary>
            Called from within this class whenever subscribers (i.e. bindings) are to be notified of a property-change
            </summary>
            <param name="strPropertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ScrollOwner_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Fired when the ScrollViewer is initially loaded/displayed. 
            Required in order to initially setup the childrens' OpacityMasks.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.daScrollAnimation_Completed(System.Object,System.EventArgs)">
            <summary>
            Fired when the scroll-animation has finished its work, that is, at the
            point in time when the ScrollViewerer has reached its final scroll-position
            resp. offset, which is when the childrens' OpacityMasks can be updated.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CanHorizontallyScroll">
            <summary>
            Sets or retrieves whether the control is allowed to scroll horizontally.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CanVerticallyScroll">
            <summary>
            Sets or retrieves whether the control is allowed to scroll vertically.
            </summary>
            <remarks>
            This is DISABLED for the control! Due to the internal plumbing of the ScrollViewer
            control, this property needs to be accessible without an exception being thrown;
            however, setting this property will do plain nothing.
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ExtentHeight">
            <summary>
            Retrieves the height of the control; since no vertical scrolling has been
            implemented, this will return the same value at all times.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ExtentWidth">
            <summary>
            Retrieves the overall width of the content hosted in the panel (i.e., the width
            measured between [far left of the scrollable portion] and [far right of the scrollable portion].
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.HorizontalOffset">
            <summary>
            Retrieves the current horizontal scroll offset.
            </summary>
            <remarks>The setter is private to the class.</remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ScrollOwner">
            <summary>
            Sets or retrieves the ScrollViewer control that hosts the panel.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.VerticalOffset">
            <summary>
            Gets the vertical offset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ViewportHeight">
            <summary>
            Gets the viewport height.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.ViewportWidth">
            <summary>
            Gets the viewport width.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.Extent">
            <summary>
            Retrieves the overall resp. internal/inner size of the control/panel.
            </summary>
            <remarks>The setter is private to the class.</remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.Viewport">
            <summary>
            Retrieves the outer resp. visible size of the control/panel.
            </summary>
            <remarks>The setter is private to the class.</remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.IsOnFarLeft">
            <summary>
            Retrieves whether the panel's scroll-position is on the far left (i.e. cannot scroll further to the left).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.IsOnFarRight">
            <summary>
            Retrieves whether the panel's scroll-position is on the far right (i.e. cannot scroll further to the right).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CanScroll">
            <summary>
            Retrieves whether the panel's viewport is larger than the control's extent, meaning there is hidden content 
            that the user would have to scroll for in order to see it.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CanScrollLeft">
            <summary>
            Retrieves whether the panel's scroll-position is NOT on the far left (i.e. can scroll to the left).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.CanScrollRight">
            <summary>
            Retrieves whether the panel's scroll-position is NOT on the far right (i.e. can scroll to the right).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.RightOverflowMargin">
            <summary>
            Sets or retrieves the Margin that will be applied to the rightmost item in the panel;
            This allows for the item applying a negative margin, i.e. when selected.
            If set to a value other than zero (being the default), the control will add the value
            specified here to the item's right extent.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.AnimationTimeSpan">
            <summary>
            Sets or retrieves the the duration (default: 100ms) for the panel's transition-animation that is
            started when an item is selected (scroll from the previously selected item to the
            presently selected one).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.LineScrollPixelCount">
            <summary>
            Sets or retrieves the count of pixels to scroll by when the LineLeft or LineRight methods
            are called (default: 15px).
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ScrollableTabPanel.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer">
            <summary>
            Keeps two lists synchronized. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.#ctor(System.Collections.IList,System.Collections.IList,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.IListItemConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer"/> class.
            </summary>
            <param name="masterList">The master list.</param>
            <param name="targetList">The target list.</param>
            <param name="masterTargetConverter">The master-target converter.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer"/> class.
            </summary>
            <param name="masterList">The master list.</param>
            <param name="targetList">The target list.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.StartSynchronizing">
            <summary>
            Starts synchronizing the lists.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.StopSynchronizing">
            <summary>
            Stop synchronizing the lists.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager"/> calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager"/> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.ListenForChangeEvents(System.Collections.IList)">
            <summary>
            Listens for change events on a list.
            </summary>
            <param name="list">The list to listen to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.StopListeningForChangeEvents(System.Collections.IList)">
            <summary>
            Stops listening for change events.
            </summary>
            <param name="list">The list to stop listening to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.UpdateListsFromSource(System.Collections.IList)">
            <summary>
            Makes sure that all synchronized lists have the same values as the source list.
            </summary>
            <param name="sourceList">The source list.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.DoNothingListItemConverter">
            <summary>
            An implementation that does nothing in the conversions.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.IListItemConverter">
            <summary>
            Converts items in the Master list to Items in the target list, and back again.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.IListItemConverter.Convert(System.Object)">
            <summary>
            Converts the specified master list item.
            </summary>
            <param name="masterListItem">The master list item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.IListItemConverter.ConvertBack(System.Object)">
            <summary>
            Converts the specified target list item.
            </summary>
            <param name="targetListItem">The target list item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.DoNothingListItemConverter.Convert(System.Object)">
            <summary>
            Converts the specified master list item.
            </summary>
            <param name="masterListItem">The master list item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.TwoListSynchronizer.DoNothingListItemConverter.ConvertBack(System.Object)">
            <summary>
            Converts the specified target list item.
            </summary>
            <param name="targetListItem">The target list item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo">
            <summary>
            Drop info class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.#ctor(System.Object,System.Windows.DragEventArgs,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="dragInfo"></param>
            <param name="dataFormat"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.Data">
            <summary>
            Gets the dragged data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.DragInfo">
            <summary>
            Gets the drag info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.DropTargetAdorner">
            <summary>
            Gets or sets the drop adorner.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.Effects">
            <summary>
            Gets or sets the drag drop effects.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.InsertIndex">
            <summary>
            Gets the insert index.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.TargetCollection">
            <summary>
            Gets the target collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.TargetItem">
            <summary>
            Gets the target item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.VisualTarget">
            <summary>
            Gets the visual target.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.VisualTargetItem">
            <summary>
            Gets the visual target item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.VisualTargetOrientation">
            <summary>
            Gets the visual target orientation.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo.IsNotHandled">
            <summary>
            Extension: Property to allow for bubbling of events.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.WeakEventHandlerManager">
            <summary>
            Handles management and dispatching of EventHandlers in a weak way.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.WeakEventHandlerManager.CallWeakReferenceHandlers(System.Object,System.Collections.Generic.List{System.WeakReference})">
            <summary>
             Invokes the handlers 
            </summary>
            <param name="sender"></param>
            <param name="handlers"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.WeakEventHandlerManager.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler,System.Int32)">
            <summary>
             Adds a handler to the supplied list in a weak way.
            </summary>
            <param name="handlers">Existing handler list.  It will be created if null.</param>
            <param name="handler">Handler to add.</param>
            <param name="defaultListSize">Default list size.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.WeakEventHandlerManager.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
             Removes an event handler from the reference list.
            </summary>
            <param name="handlers">Handler list to remove reference from.</param>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.WeakEventHandlerManager.DispatcherProxy">
            <summary>
            Hides the dispatcher mis-match between Silverlight and .Net, largely so code reads a bit easier
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewColumnWidthBehavior">
            <summary>
            Behavior to maximaze the size of the columns of a listview, that dont have a fixed width specified.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewColumnWidthBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewColumnWidthBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewColumnWidthBehavior.SetColumnWidths(System.Windows.Controls.ListView)">
            <summary>
            Sets the column widths.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs">
            <summary>
            Selection changed event data.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel,Tum.PDE.ToolFramework.Modeling.SelectedItemsCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
            <param name="selectedItems">Selected components in that view model.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs.SelectedItems">
            <summary>
            Gets the selected components.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs.UserData">
            <summary>
            Gets or sets specific user data.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEvent">
            <summary>
            Event, that notifies of a selection changed.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ErrorListClearItems">
            <summary>
            Event to notify that alle error list items need to be removed from the error list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentOpenedEvent">
            <summary>
            Notifies after a document has been opened.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs">
            <summary>
            CultureInfo changed event arguments.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="oldCultureInfo">Old CultureInfo.</param>
            <param name="newCultureInfo">New CultureInfo.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs.OldCultureInfo">
            <summary>
            Old culture info.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs.NewCultureInfo">
            <summary>
            New culture info.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEvent">
            <summary>
            Event, requesting a docking view model to be closed by the main view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel">
            <summary>
            View model used for the property grid.
            
            This is the main property grid view model that is used to display properties. We need to use this model instead
            of the generated PropertyGridViewModels because we might have multiple elements selected at once, so that their 
            equal properties can be modified simultanioulsy. This beeing the main reason, this view model combines multiple
            PropertyGridViewModels.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.IsRibbonMenuForEditorsInitialized">
            <summary>
            True if ribbon menu is initialized for its editors.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SelectedEditorChanged(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel)">
            <summary>
            Called whenever the selected editor is changed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SearchCommand_Executed">
            <summary>
            SearchCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.OnDocumentLoaded">
            <summary>
            Document loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            Delay creation of ribbon menus.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CreateRibbonMenuBarForEditors(Fluent.Ribbon)">
            <summary>
            Create ribbon menu bars for editors.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent. 
            Executes UpdatePropertyGrid asynchronously on the thread Dispatcher.Current is associated with.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.UpdatePropertyGrid">
            <summary>
            Updates the property grid, based on SelectedItemsCollection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.OnSelectedEditorChanged">
            <summary>
            Called whenever the selected editor is changed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.ToggleAlphabeticalSortOrderCommand_Executed">
            <summary>
            ToggleAlphabeticalSortOrder command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.ToggleCategorizedSortOrderCommand_Executed">
            <summary>
            ToggleCategorizedSortOrder command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.OnReset">
            <summary>
            Reset view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CompareViewModels(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel)">
            <summary>
            Compares two view models by comparing their property display names.
            </summary>
            <param name="x">IPropertyGridEditorViewModel to be compared.</param>
            <param name="y">IPropertyGridEditorViewModel to be compared.</param>
            <returns>Int from Compare.To</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CompareCategoryViewModels(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel)">
            <summary>
            Compares two PropertyGridEditorCategoryViewModels by comparing their category names.
            </summary>
            <param name="x">PropertyGridEditorCategoryViewModel to be compared.</param>
            <param name="y">PropertyGridEditorCategoryViewModel to be compared.</param>
            <returns>Int from Compare.To</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.OnVisibilityChanged(System.Boolean)">
            <summary>
            Visibility changed..
            </summary>
            <param name="bVisible"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.DockingPaneName">
            <summary>
            Unique name of the property grid docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.DockingPaneTitle">
            <summary>
            Title of the docking windo.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SearchCommand">
            <summary>
            Search command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SearchText">
            <summary>
            Gets or sets the search text.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SelectedEditorViewModel">
            <summary>
            Gets or sets the clicked view model in the view.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CurrentEditorViewModels">
            <summary>
            Gets or sets the current editor view models, which are to be displayed in the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CurrentEditorViewModelsAlphabetic">
            <summary>
            Gets or sets the current editor view models, which are to be displayed in the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CurrentEditorViewModelsCategorized">
            <summary>
            Gets or sets the current editor view models, which are to be displayed in the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.CurrentGridViewModel">
            <summary>
            Gets or sets the current grid view model. This is null, if no or multiple elements are
            selected for the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.PropertyGridDescriptionType">
            <summary>
            Gets the property grid description name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.PropertyGridDescriptionFullName">
            <summary>
            Gets the property grid description name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.PropertyGridDescriptionText">
            <summary>
            Gets the property grid description text.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.SelectedItemsCollection">
            <summary>
            Gets the currently selected items in the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.ToggleAlphabeticalSortOrderCommand">
            <summary>
            Gets the ToggleAlphabeticalSortOrder command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainPropertyGridViewModel.ToggleCategorizedSortOrderCommand">
            <summary>
            Gets the ToggleCategorizedSortOrder command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NullDockingViewModel">
            <summary>
            Docking view model used to represent a null vm. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NullDockingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NullDockingViewModel.GetNullDockingVM(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Gets an instance of the null docking vm.
            </summary>
            <param name="store">ViewModelStore.</param>
            <returns>NullDockingVM.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NullDockingViewModel.DockingPaneName">
            <summary>
            Unique name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NullDockingViewModel.DockingPaneTitle">
            <summary>
            Title of the dockable window.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToVisibilityConverter">
            <summary>
            This class converts boolean to visibility and vice versa. Should the incoming values be null,
            'Visibility.Collapsed' or 'false' are returned.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem">
            <summary>
            Control representing an item in the model tree.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem.#cctor">
            <summary>
            Static constructor to set style.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Whenever selected, bring control into view.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem.GetContainerForItemOverride">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView">
            <summary>
            This class extends the default tree view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView.#cctor">
            <summary>
            Static constructor to set style.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView.GetContainerForItemOverride">
            <summary>
            Container for item override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeView.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type TreeViewItem or ToggleButton starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel">
            <summary>
            This base view model is used to display graphical dependencies as well as a list of specific items.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel">
            <summary>
            This is the vm for the graphical dependencies diagram.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel">
            <summary>
            This is the base abstract class for a diagram surface implementation.
            </summary>
            <remarks>
            Items are added onto the surface by:
            - User-Command of the instance of this vm, uses AddElement function
            - Drag and Drop-TODO
            
            Items are removed from the surface by:
            - RemoveElement
            - Child ShapeElement removed from diagrams children collection (OnChildShapeElementRemoved)
            
            This equally applies to links.
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.childItems">
            <summary>
            Child items storage.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.childItemElements">
            <summary>
            Elements storage.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.childItemLinks">
            <summary>
            Links storage.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.MovementUnit">
            <summary>
            This value is used to move elements whenever Up, Down, Left or Right keys are pressed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">Diagram.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">Diagram.</param>
            <param name="modelContext">Model context.</param>
            <param name="bIsIncludedModelInstance"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext,System.Boolean,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">Diagram.</param>
            <param name="modelContext">Model context.</param>
            <param name="bIsIncludedModelInstance"></param>
            <param name="bCallInitialize"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnVisibilityChanged(System.Boolean)">
            <summary>
            This method is called whenever the visibility changes.
            </summary>
            <param name="bVisible"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateNewRelationshipCommandExecute(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper)">
            <summary>
            Create new rs command executed.
            </summary>
            <param name="p">Domain rs type to be created.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateNewElementCommandExecute(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper)">
            <summary>
            Create new element command executed.
            </summary>
            <param name="param">Domain class type to be created.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateNewElementCommandCanExecute(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper)">
            <summary>
            Create new element command can execute.
            </summary>
            <param name="param">Domain class type to be created.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CanCreateRootElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper)">
            <summary>
            Create new root element command can execute.
            </summary>
            <param name="param">Domain class type to be created.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnDeleteShapesAndElementsCommandCanExecute">
            <summary>
            Verifies that there are items selected that can be deleted.
            </summary>
            <returns>True if items are selected and can be deleted; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnDeleteShapesAndElementsCommandExecuted">
            <summary>
            Delete selected shapes and their hosted elements.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnDeleteCommandCanExecute">
            <summary>
            Verifies that there are items selected that can be deleted.
            </summary>
            <returns>True if items are selected and can be deleted; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnDeleteCommandExecuted">
            <summary>
            Delete selected shapes (not deleting elements hosted by those shapes!).
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnCopyAsImageCommandExecuted">
            <summary>
            Copy as image command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnUndoCommandExecuted">
            <summary>
            Undo command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnRedoCommandExecuted">
            <summary>
            Redo command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CanCreateRelationship(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo)">
            <summary>
            Verifies if a relationship can be created based on the given data.
            </summary>
            <param name="info">Info specifying the relationship to create.</param>
            <returns>True if a relationship can be created. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateRelationship(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo)">
            <summary>
            Creates a relationship based on the given data.
            </summary>
            <param name="info">Info specifying the relationship to create.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateRelationship(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo,System.Guid)">
            <summary>
            Creates a relationship based on the given data.
            </summary>
            <param name="info">Info specifying the relationship to create.</param>
            <param name="shapeToCreate">Type of the relationship shape</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.GetCreatableRelationships(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo)">
            <summary>
            Gets creatable relationship shapes.
            </summary>
            <param name="info">Info specifying the relationship to create.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateRelationship``1(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a relationship based on the given data.
            </summary>
            <typeparam name="T">Type of relationship to create.</typeparam>
            <param name="source">Source element.</param>
            <param name="target">Target element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnCutCommandCanExecute">
            <summary>
            Cut command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnCopyCommandCanExecute">
            <summary>
            Copy command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnPasteCommandCanExecute">
            <summary>
            Paste command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnCutCommandExecuted">
            <summary>
            Cut command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnCopyCommandExecuted">
            <summary>
            Copy command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnPasteCommandExecuted">
            <summary>
            Paste command execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ShowRibbonMenu(Fluent.Ribbon)">
            <summary>
            Show ribbon menu.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.HideRibbonMenu(Fluent.Ribbon)">
            <summary>
            Hide ribbon menu.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            Create ribbon menu.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.AddIncludedSurfaceViewModels(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Adds an included diagram surface vm.
            </summary>
            <param name="vm">Included vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateCommandsCanExecute">
            <summary>
            No need to update here (would cause double updates).
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.AddElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Adds a new element to this view model.
            </summary>
            <param name="elementVM">Element to add.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.RemoveElement(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemViewModel)">
            <summary>
            Removes a element from this view model.
            </summary>
            <param name="elementVM">Element to remove.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.AddLink(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemLinkViewModel)">
            <summary>
            Adds a new link to this view model.
            </summary>
            <param name="linkVM">Link to add.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Clear">
            <summary>
            Removes all vms.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IsDisplayingNodeShape(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)">
            <summary>
            Verifies if the given node shape is already displayed as a child of this view model.
            </summary>
            <param name="nodeShape">Node shape to find.</param>
            <returns>True if the given element is already displayed as a child of this view model. False otherwise</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IsDisplayingLinkShapes(Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape)">
            <summary>
            Verifies if the given node shape is already displayed as a child of this view model.
            </summary>
            <param name="nodeShape">Node shape to find.</param>
            <returns>True if the given element is already displayed as a child of this view model. False otherwise</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IsDisplayingRootElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Verifies if the given element is already displayed as a child of this view model.
            </summary>
            <param name="modelElement">Element to find.</param>
            <returns>True if the given element is already displayed as a child of this view model. False otherwise</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Delete">
            <summary>
            Deletes the shapes or shape+elements from the domain model depending on the selection context. If
            a shape that is directly hosted on the diagram surface is selected than we only delete its shape. 
            Otherwise we need to delete shape + element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DeleteShapesAndElements">
            <summary>
            Deletes shapes and elements from the domain model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateDiagramSurfaceSelection">
            <summary>
            Updates the diagram surface, based on selectedItemsCollection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.FixupShapeVisibility">
            <summary>
            Makes sure child and link shapes are visible
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateMenuOptions">
            <summary>
            Creates the menu options based on the current context.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IsInsertableRootItem(Tum.PDE.ToolFramework.Modeling.DomainModelElement)">
            <summary>
            Verifies if a given element can be inserted as a root item.
            </summary>
            <param name="element">Element to be inserted</param>
            <returns>True if the element can be inserted; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateInsertableRootItems">
            <summary>
            Updates the insertable elements collection if no element is selected.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateInsertableItems">
            <summary>
            Updates the insertable elements collection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateInsertableChildItems(Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement)">
            <summary>
            Updates the insertable child elements collection.
            </summary>
            <param name="selectedShape">Selected shape.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.UpdateCreatableRelationships(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Updates the creatable relationships between the specified elements.
            </summary>
            <param name="element1">Element 1.</param>
            <param name="element2">Element 2.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CalcMovementInfo(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},System.Double,System.Double)">
            <summary>
            Calculates the movement info for this item based on the proposed horizontal and vertical changes.
            </summary>
            <param name="selectedItems">Items to be resized.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
            <returns>Calculated DiagramItemMovementInfo.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CalcResizeInfo(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},System.Double,System.Double,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection)">
            <summary>
            Calculates the resize info for this item based on the proposed horizontal and vertical changes.
            </summary>
            <param name="selectedItems">Items to be resized.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
            <param name="direction">Direction in which to resize the elements.</param>
            <returns>Calculated DiagramItemsResizeInfo.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.MoveLinkAnchors(System.Collections.Generic.Dictionary{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel,System.Boolean},System.Double,System.Double)">
            <summary>
            Moves the selected link anchors in the direction of the proposed location.
            </summary>
            <param name="selectedItems">Selected links (source or target anchor to be move specified via bool) to move.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.MoveLinkAnchor(Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramLinkViewModel,System.Guid,System.Double,System.Double)">
            <summary>
            Moves the selected link anchors in the direction of the proposed location.
            </summary>
            <param name="selectedItem">Selected link.</param>
            <param name="anchorId">Anchor id.</param>
            <param name="horizontalChange">Proposed horizontal change.</param>
            <param name="verticalChange">Proposed vertical change.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.MoveElements(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsMovementInfo)">
            <summary>
            Moves the selected elements as specified by the given movement info.
            </summary>
            <param name="selectedItems">Selected items to move.</param>
            <param name="info">Movement info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ResizeElements(System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel},Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo)">
            <summary>
            Resizes the selected elements a specified by the given resize info.
            </summary>
            <param name="selectedItems">Selected items to resize.</param>
            <param name="info">Resize info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints)">
            <summary>
            Calculates a path geometry between the source and the target points.
            </summary>
            <param name="sourcePoint">Source point (Absolute location).</param>
            <param name="targetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CalcPathGeometry(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IDiagramItemViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.PointD,Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints)">
            <summary>
            Calculates a path geometry between the source and the target point. 
            </summary>
            <param name="proposedSourcePoint">Source point (Absolute location).</param>
            <param name="targetItem">Target diagram item.</param>
            <param name="proposedTargetPoint">Target point (Absolute location).</param>
            <param name="fixedPoints">Fixed points.</param>
            <returns>Calculated path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.HandleKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles a key down event.
            </summary>
            <param name="e">Key down event args.</param>
            <returns>True if the key down event was handled.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Subscribe">
            <summary>
            Subscribes to events for the current hosted diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Subscribe(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Subscribes to events for the current hosted diagram.
            </summary>
            <param name="diagVM"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Unsubscribe">
            <summary>
            Unsubscribes from events for the current hosted diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Unsubscribe(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Unsubscribes from events for the current hosted diagram.
            </summary>
            <param name="diagVM"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnChildShapeElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a relationship of type DiagramHasChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren)">
            <summary>
            Called whenever a relationship of type DiagramHasChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Called whenever a relationship of type DiagramHasChildren is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
            <param name="diagVm"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnLinkShapeElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a relationship of type DiagramHasLinkShapes is added and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnLinkShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes)">
            <summary>
            Called whenever a relationship of type DiagramHasLinkShapes is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnLinkShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Called whenever a relationship of type DiagramHasLinkShapes is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
            <param name="diagVm"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnChildShapeElementRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever a relationship of type DiagramHasChildren is removed and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnLinkShapeElementRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever a relationship of type DiagramHasLinkShapes is removed and
            the element hosted by this model is the source.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.GetDiagramClassType">
            <summary>
            Gets the diagram class type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.EmbedElement(Tum.PDE.ToolFramework.Modeling.DomainModelElement)">
            <summary>
            Tries to embed an element as the child of the selected element.
            </summary>
            <param name="modelElement">Model element to embed.</param>
            <returns>Parent model element the child was embedded at on success. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.EmbedElement(Tum.PDE.ToolFramework.Modeling.DomainModelElement,System.Boolean)">
            <summary>
            Tries to embed an element as the child of the selected element.
            </summary>
            <param name="modelElement">Model element to embed.</param>
            <param name="bForceTopMostInsertion">True if the current selection should be ignored.</param>
            <returns>Parent model element the child was embedded at on success. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.GetCurrentMousePosition">
            <summary>
            Gets the curret mouse position relative to the diagram designer.
            </summary>
            <returns>Mouse position.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateAndInsertShapeForElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a shape for a model element.
            </summary>
            <param name="modelElement">Model element.</param>
            <returns>Node shape.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Reset">
            <summary>
            Resets the current view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.OnDispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.InsertableElements">
            <summary>
            Gets the list of insertable elements.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CreateRelationshipCommand">
            <summary>
            Gets the create relationship command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DeleteShapesAndElementsCommand">
            <summary>
            Gets the DeleteShapesAndElements command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.CopyAsImageCommand">
            <summary>
            Gets the CopyAsImageCommand command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ToggleOrthogonalConnectorCommand">
            <summary>
            Gets the ToggleOrthogonalConnectorCommand;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ToggleStraightConnectorCommand">
            <summary>
            Gets the ToggleStraightConnectorCommand;
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.LayoutCommand">
            <summary>
            Gets the layout command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IncludedSurfaceViewModels">
            <summary>
            Gets the included surface view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.IsIncludedModelInstance">
            <summary>
            Gets whether this diagram surface vm instance represents an included dsvm instance.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ModelContext">
            <summary>
            Gets the model context.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramDesigner">
            <summary>
            Gets the diagram designer view.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Diagram">
            <summary>
            Gets or set the diagram that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramDomainData">
            <summary>
            Gets the diagram domain data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Children">
            <summary>
            Gets the children collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Links">
            <summary>
            Gets the links collection
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.Elements">
            <summary>
            Gets the elements collection
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.MenuOptions">
            <summary>
            Context menu options.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.SelectedItemsData">
            <summary>
            Selected items data collection. Used for binding
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.SelectedItems">
            <summary>
            Selected items collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ParentDiagramSurfaceViewModel">
            <summary>
            Gets the parent diagram surface vm. This will be null if IsIncludedModelInstance = false.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.ClickedPoint">
            <summary>
            Latests clicked point on the surface. This is used for adding items at the
            right place on the surface.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper">
            <summary>
            Context menu creation helper class.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper.RelationshipType">
            <summary>
            Role player info.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramContextMenuCreationHelper.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="rType"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramRSContextMenuCreationHelper">
            <summary>
            Context menu creation helper class.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramRSContextMenuCreationHelper.SourceElementId">
            <summary>
            Role player info.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramRSContextMenuCreationHelper.TargetElementId">
            <summary>
            Role player info.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel.DiagramRSContextMenuCreationHelper.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="rType"></param>
            <param name="sourceId"></param>
            <param name="targetId"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IGraphicalDependenciesViewModel">
            <summary>
            Interface specifying a GraphicalDependenciesViewModel.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IGraphicalDependenciesViewModel.View">
            <summary>
            Gets or sets the view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">View model store containing this view model.</param>
            <param name="diagram"></param>
            <param name="modelContext"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.GetDiagramClassType">
            <summary>
            Gets the diagram class type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.OnDeleteCommandCanExecute">
            <summary>
            Delete command can execute.
            </summary>
            <returns>True if the command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.OnLoaded">
            <summary>
            Called when the view is loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.ShowDependenciesCommandExecuted">
            <summary>
            Execute the show dependencies command.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.RefreshCommandExecuted">
            <summary>
            RefreshCommand executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.Update">
            <summary>
            Updates the dependencies view (cause by a main model element change).
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdateLayout">
            <summary>
            Updates the layout of the dependencies view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdateLink(Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape,System.Boolean)">
            <summary>
            Updates the link between the main shape and the dependency shape.
            </summary>
            <param name="shape"></param>
            <param name="bSource"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdateParts">
            <summary>
            Update source and target dependency parts.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdatePart(System.Guid,System.Collections.Generic.Dictionary{System.Guid,Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape},System.Boolean,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo)">
            <summary>
            Update a dependency part.
            </summary>
            <param name="domainClassId"></param>
            <param name="parts"></param>
            <param name="bSource"></param>
            <param name="link"></param>
            <param name="info"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.CreateShape(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a shape for the specified model element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdateBasedOnFilter(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem)">
            <summary>
            Updates the displayed dependencies based on filter information.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.RemoveHostShape(Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape)">
            <summary>
            Removes the host shape.
            </summary>
            <param name="shape">Host shape to remove.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.OnLinkShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Called whenever a relationship of type DiagramHasLinkShapes is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
            <param name="diagVm"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.OnChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramSurfaceViewModel)">
            <summary>
            Called whenever a relationship of type ShapeElementContainsChildShapes is added and
            the element hosted by this model is the source.
            </summary>
            <param name="con"></param>
            <param name="diagVm"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.ShowRibbonMenu(Fluent.Ribbon)">
            <summary>
            Not required.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.HideRibbonMenu(Fluent.Ribbon)">
            <summary>
            Not required.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            React on view selection.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.CreateAndInsertShapeForElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Not required.
            </summary>
            <param name="modelElement"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.UpdateMenuOptions">
            <summary>
            No context menu.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.IsInsertableRootItem(Tum.PDE.ToolFramework.Modeling.DomainModelElement)">
            <summary>
            Not required.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.OnReset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.View">
            <summary>
            Gets or sets the view.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.Diagram">
            <summary>
            Gets the diagram this item belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.MainElement">
            <summary>
            Get or sets the model element, for which dependencies are to be presented graphically.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.FilterItemVMs">
            <summary>
            Gets the filter item VMs.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.ShowDependenciesCommand">
            <summary>
            Show dependencies command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.RefreshCommand">
            <summary>
            RefreshCommand.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.IsDiagramDesignerViewModelVisible">
            <summary>
            Gets whether this view model is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.SelectedItemsData">
            <summary>
            Selected items data collection. Used for binding
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.ModelContext">
            <summary>
            Gets the model context.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.DockingPaneName">
            <summary>
            Gets the docking pane name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel.DockingPaneTitle">
            <summary>
            Gets the docking pane title.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">View model store containing this view model.</param>
            <param name="diagram"></param>
            <param name="modelContext"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.Initialize">
            <summary>
            Initialization routine.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.OnDocumentLoaded">
            <summary>
            Document loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.OnDocumentClosed">
            <summary>
            Document closed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.InitSpecificVMs">
            <summary>
            Initializes the specific vms.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.CreateSpecificViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a specific view model for the given model element.
            </summary>
            <param name="store">Viewmodelstore.</param>
            <param name="modelElement">Model element to create a specific VM for.</param>
            <returns>Specific VM.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.ResetSpecificVMs">
            <summary>
            Resets the specific vms.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.OnReset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.DragOver(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drag over logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.Drop(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropInfo)">
            <summary>
            Drop logic.
            </summary>
            <param name="dropInfo">Info.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            Not required.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.ModelElementType">
            <summary>
            Gets the type of the model element that specifies the elements in the list of specific items.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.SpecificItemVMs">
            <summary>
            Gets the specific item view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.SpecificDependenciesViewModel.SelectedSpecificItemVM">
            <summary>
            Gets or sets the selected specific item view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchResultControl">
            <summary>
            Interaction logic for SearchResultControl.xaml
            </summary>
            <summary>
            SearchResultControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchResultControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchResultControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner">
            <summary>
            Drag adorner class, used to represent a movement operation.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.adornedChild">
            <summary>
            Adorned child.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.XCenter">
            <summary>
            X-Center.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.YCenter">
            <summary>
            Y-Center.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner of this adorner element</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.#ctor(System.Windows.UIElement,System.Windows.UIElement,System.Boolean,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner of this adorner element</param>
            <param name="adornElement">Element to display on the adorner.</param>
            <param name="useVisualBrush">True if visual brush should be used for display. False otherwise.</param>
            <param name="opacity">Opacity to apply to the visual brush.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.Update">
            <summary>
            Updates the position of this adorner.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.GetVisualChild(System.Int32)">
            <summary>
            Gets the visual child.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure override routine.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange override routine.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Tranformation.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.LeftOffset">
            <summary>
            Gets or sets the left offset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.TopOffset">
            <summary>
            Gets or sets the top offset.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DragAdorner.VisualChildrenCount">
            <summary>
            Gets the visual child count.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper">
            <summary>
            Helper class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetDiagramDesigner(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesigner starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetDiagramDesignerItems(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesignerItems starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetDiagramDesignerCanvas(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesignerCanvas starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetDiagramDesignerLink(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesignerItem that represents a link
            starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetDiagramDesignerItem(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesignerItem that represents an element
            starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramHelper.GetChild(System.Windows.DependencyObject,System.Type)">
            <summary>
            Gets the children object of the specified type.
            </summary>
            <param name="startObject">Object to start the search from.</param>
            <param name="elementType">Type of element to find.</param>
            <returns>Element of the specified type if found. Null otherwise</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.SpecificElementsDiagram">
            <summary>
            Interaction logic for SpecificElementsDiagram.xaml
            </summary>
            <summary>
            SpecificElementsDiagram
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.SpecificElementsDiagram.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.SpecificElementsDiagram.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphDependenciesViewControl">
            <summary>
            Interaction logic for GraphDependenciesViewControl.xaml
            </summary>
            <summary>
            GraphDependenciesViewControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphDependenciesViewControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphDependenciesViewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior">
            <summary>
            Defines the attached properties to create a CommandBehaviorBinding
            </summary>
            <remarks>
            Source: http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.BehaviorProperty">
            <summary>
            Behavior Attached Dependency Property
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.GetBehavior(System.Windows.DependencyObject)">
            <summary>
            Gets the Behavior property. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.SetBehavior(System.Windows.DependencyObject,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding)">
            <summary>
            Sets the Behavior property.  
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.CommandProperty">
            <summary>
            Command Attached Dependency Property
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.GetCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the Command property.  
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Sets the Command property. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Command property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.CommandParameterProperty">
            <summary>
            CommandParameter Attached Dependency Property
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the CommandParameter property.  
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the CommandParameter property. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.OnCommandParameterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the CommandParameter property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.EventProperty">
            <summary>
            Event Attached Dependency Property
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.GetEvent(System.Windows.DependencyObject)">
            <summary>
            Gets the Event property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.SetEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the Event property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehavior.OnEventChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Event property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService">
            <summary>
            This class implements the ISaveFileService for WPF purposes.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.sfd">
            <summary>
            Embedded SaveFileDialog to pass back correctly selected
            values to ViewModel
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.ShowDialog(System.Windows.Window)">
            <summary>
            This method should show a window that allows a file to be selected
            </summary>
            <param name="owner">The owner window of the dialog</param>
            <returns>A bool from the ShowDialog call</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.FileName">
            <summary>
            FileName : Simply use embedded SaveFileDialog.FileName
            But DO NOT allow a Set as it will ONLY come from user
            picking a file
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.Filter">
            <summary>
            Filter : Simply use embedded SaveFileDialog.Filter
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.InitialDirectory">
            <summary>
            Filter : Simply use embedded SaveFileDialog.InitialDirectory
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.SaveFileService.OverwritePrompt">
            <summary>
            OverwritePrompt : Simply use embedded SaveFileDialog.OverwritePrompt
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultItemViewModel">
            <summary>
            This view model displays a search result.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.SearchResult)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="searchResult">Search result.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultItemViewModel.Navigate">
            <summary>
            Navigate to model element
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultItemViewModel.Reason">
            <summary>
            Gets the reason.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType">
            <summary>
            Type of the context menu item
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType.AddElementMenuItem">
            <summary>
            Element is beeing added - Context.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree.ModelTreeContextMenuItemType.DeleteElementMenuItem">
            <summary>
            Element is beeing deleted - Context.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Composite Application Library.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false"/> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DelegateReference"/> object.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementAddedEvent">
            <summary>
            Notifies of a new model element beeing added to the domain model.
            
            An observer can either subscribe to the event in general (Warning, this will provide a notification for each 
            new domain element) or subscribe to a more specific event.
            
            This specific event allows to provide a domain class info of the model element, on which addition the
            given action is called (for alle other elements, the action is ignored).
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs">
            <summary>
            Data for the CloseViewModelRequestEvent.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
            <param name="bRemove"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs.ShouldRemoveVM">
            <summary>
            Gets wether the specified VM should be removed or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.BringToFrontViewModelRequestEventArgs">
            <summary>
            Data for the BringToFrontViewModelRequestEvent.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.BringToFrontViewModelRequestEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel">
            <summary>
            View model used for the model tree.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.rootTreeViewItemViewModelStorage">
            <summary>
            Storage for the root tree item.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.contextMenu">
            <summary>
            Context menu.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.defaultContextMenu">
            <summary>
            Default context menu.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnDocumentLoaded">
            <summary>
            Document loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnValidateCommandCanExecute">
            <summary>
            Validate command can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnValidateCommandExecuted">
            <summary>
            Validate command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnDeleteCommandCanExecute">
            <summary>
            Delete command can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnDeleteCommandExecuted">
            <summary>
            Delete command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnCopyCommandCanExecute">
            <summary>
            Copy command can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnCopyCommandExecuted">
            <summary>
            Copy command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnPasteCommandCanExecute">
            <summary>
            Paste command can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnPasteCommandExecuted">
            <summary>
            Paste command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnCutCommandCanExecute">
            <summary>
            Cut command can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnCutCommandExecuted">
            <summary>
            Cut command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.UpdateModelTree">
            <summary>
            Updates the model tree, based on SelectedItemsCollection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnReset">
            <summary>
            Reset selection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.OnVisibilityChanged(System.Boolean)">
            <summary>
            Visibility change.
            </summary>
            <param name="bVisible"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.RootViewModels">
            <summary>
            Gets the root elements collection for binding to the tree view. It actually consists of only one element at all times.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.DockingPaneName">
            <summary>
            Unique name of the model tree docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.DockingPaneTitle">
            <summary>
            Title of the docking windo.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.ClickedItemViewModel">
            <summary>
            Gets or sets the clicked view model in the view.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.SelectedItemViewModel">
            <summary>
            Gets or sets the clicked view model in the view.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.ContextMenu">
            <summary>
            Gets the context menu view model for this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainModelTreeViewModel.DefaultContextMenu">
            <summary>
            This context menu is used whenever no item is selected. Can be null.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.StringErrorListItemViewModel">
            <summary>
            Simple error list item view model for displaying string messages that can be filtered.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.StringErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="errorId">Error id.</param>
            <param name="message">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.StringErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ErrorListItemCategory,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="errorId">Error id.</param>
            <param name="category">Error category of the error.</param>
            <param name="message">Description explaining why the error occured.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.StringErrorListItemViewModel.GetUniqueId">
            <summary>
            This method provides an unique id for the current model item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel">
            <summary>
            This is a diagram surface view model that can display the properties of a specific element.
            
            </summary>
            <remarks>
            The displayed properties include Parent element, Child elements as well as Referenced elements.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelContext)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContext">Model context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="modelContextName">Model context name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor. This meant to be called if the model is beeing restored. Initialize in this
            case is called from the restore method.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.OnHostedElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called if the hosted element was deleted.
            </summary>
            <param name="args">Data</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.Reset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            Not required.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.SpecificElementsDesignerSurfaceViewModel.HostedElement">
            <summary>
            Gets or sets the hosted element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore">
            <summary>
            This abstract base class contains a reference to the model as well as the view model factory class, which
            provides factory methods to create view models for model elements from the model.
            
            Further it provides the mediater class, which implements the Mediator pattern for messaging.
            
            We also hook into the event-processing of the dsl tools store class to provide a mapping of events to our view model.
            So far we only support ElementAdded, ElementDeleted, ElementPropertyChanged, RolePlayerChangedEventArgs
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.#ctor(Tum.PDE.ToolFramework.Modeling.ModelData)">
            <summary>
            Constructor.
            </summary>
            <param name="modelData">Document data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.#ctor(Tum.PDE.ToolFramework.Modeling.ModelData,Tum.PDE.ToolFramework.Modeling.Visualization.Base.ViewModelOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="modelData">Document data.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.#ctor(Tum.PDE.ToolFramework.Modeling.ModelData,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="modelData">Document data.</param>
            <param name="bHookUpEvents">True if events listeners should be initialized.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.#ctor(Tum.PDE.ToolFramework.Modeling.ModelData,System.Boolean,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constructor.
            </summary>
            <param name="modelData">Document data.</param>
            <param name="bHookUpEvents">True if events listeners should be initialized.</param>
            <param name="ownedByStore">Store owning this store.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.GetExternViewModelStore(System.Type)">
            <summary>
            Gets an extern view model store by type.
            </summary>
            <param name="type">Type of the vstore to get.</param>
            <returns>ViewModelStore of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.RegisterExternStores">
            <summary>
            Register extern stores.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.ServiceProvider">
            <summary>
            Service resolver for view models.  Allows derived types to add/remove
            services from mapping.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.HookUpEvents">
            <summary>
            This method provides a mapping between the event handlers in the dsl tools store and our view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.UnhookEvents">
            <summary>
            This method unhooks event listeners.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OnElementAdded(System.Object,Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called whenever a model element is added to the store.
            </summary>
            <param name="sender">ViewModelStore</param>
            <param name="args">Event Arguments for notification of the creation of new model element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OnElementDeleted(System.Object,Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called whenever a model element is deleted from the store.
            </summary>
            <param name="sender">ViewModelStore</param>
            <param name="args">Event Arguments for notification of the removal of an ModelElement.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OnElementPropertyChanged(System.Object,Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Called whenever a model element's property value is changed.
            </summary>
            <param name="sender">ViewModelStore</param>
            <param name="args">Event Arguments for notifications that the value of an attribute has changed</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OnRolePlayerChanged(System.Object,Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Called whenever a model element's property value is changed.
            </summary>
            <param name="sender">ViewModelStore</param>
            <param name="args">Event Arguments for notifications that the value of an attribute has changed</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OnRolePlayerMoved(System.Object,Microsoft.VisualStudio.Modeling.RolePlayerOrderChangedEventArgs)">
            <summary>
            Called whenever a model element is moved.
            </summary>
            <param name="sender">ViewModelStore</param>
            <param name="args">Event Arguments for notification of the movement of a model element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.LoadOptions(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService)">
            <summary>
            Called to load options when the application starts.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.SaveOptions(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService)">
            <summary>
            Called to save options when the application exits.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.GetDomainModelServices">
            <summary>
            Gets the services, which are specific to the current domain model that the given element belongs to.
            </summary>
            <returns>DomainModel services</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.GetDomainModelServices(Tum.PDE.ToolFramework.Modeling.IDomainModelOwnable)">
            <summary>
            Gets the services, which are specific to the current domain model that the given element belongs to.
            </summary>
            <param name="m">Element.</param>
            <returns>DomainModel services</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.GetDomainModelServices(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Gets the services, which are specific to the current domain model that the given element belongs to.
            </summary>
            <param name="m">Element.</param>
            <returns>DomainModel services</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.SpecificViewModelStore">
            <summary>
            Gets the specific view model store.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.ExternStores">
            <summary>
            Gets the extern stores collection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.CustomDataBag">
            <summary>
            Gets the custom data bag.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.GlobalServiceProvider">
            <summary>
            Gets the global service provider.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.InLoad">
            <summary>
            Gets or sets wether document data is currently loading or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.OwnedByStore">
            <summary>
            Gets the store owning this store. Can be null indicating the top-most store.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.TopMostStore">
            <summary>
            Gets the top most store.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.ModelData">
            <summary>
            Gets the document data containing the domain model data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.Store">
            <summary>
            Gets the store containing the domain model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.Factory">
            <summary>
            Gets the view model factory which provides methods for the creation of view models for model elements from the model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.EventManager">
            <summary>
            ViewModelEventManager = Messaging pattern
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore.Options">
            <summary>
            Gets the view model options.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.CloseRequestEventArgs">
            <summary>
            This is used to send result parameters to a CloseRequest
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.CloseRequestEventArgs.Result">
            <summary>
             Final result for ShowDialog
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToVisibilityConverter">
            <summary>
            This converters returns Visibility.Collapsed if the given ICollection is empty. Visibility.Visible otherwise.
            Visibility.Visible is also returned if the given value is null.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.ICollectionToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.FurtherReadingViewModel">
            <summary>
            This class provides further reading items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.FurtherReadingViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceToVisibilityConverter">
            <summary>
            Missing source converter returns Visibility.Hidden if the source is missing.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MissingSourceToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualWrapper">
            <summary>
            This visual wrapper is used by VisualTargetPresentationSource
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualWrapper.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualWrapper.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.GWL_EXSTYLE">
            <summary>
            Extended windows styles.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.GWL_STYLE">
            <summary>
            Window styles.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.WS_SYSMENU">
            <summary>
            Shows or hides a system menu.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowByWindow(System.Windows.Window,System.Windows.Window,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindowByHandle(System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.BringWindowToTop(System.Windows.Window)">
            <summary>
            Brings to specified window to top.
            </summary>
            <param name="window">The window to bring to top.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="window"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window. It will first try to set the owner via
            the <paramref name="ownerWindow"/>. If the <paramref name="ownerWindow"/> is not available,
            this method will use the <paramref name="ownerHandle"/> to set the parent.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="ownerWindow">New owner window.</param>
            <param name="ownerHandle">The owner handle.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.GetProcessMainWindowHandle">
            <summary>
            Returns the main window handle of the current process.
            </summary>
            <returns>Handle of the main window of the current process.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.HasOwner(System.Windows.Window)">
            <summary>
            Returns whether the window currently has an owner.
            </summary>
            <param name="window">Window to check.</param>
            <returns>
            True if the window has an owner, otherwise false.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RemoveIcon(System.Windows.Window)">
            <summary>
            Removes the icon from the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RECT">
            <summary>
            RECT struct for platform invokation.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Extensions.WindowExtensions.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours">
            <summary>
            A sync behaviour for a multiselector.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizedSelectedItems">
            <summary>
            Synchronized selected item property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManagerProperty">
            <summary>
            Synchronization manager property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.GetSynchronizedSelectedItems(System.Windows.DependencyObject)">
            <summary>
            Gets the synchronized selected items.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The list that is acting as the sync list.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SetSynchronizedSelectedItems(System.Windows.DependencyObject,System.Collections.IList)">
            <summary>
            Sets the synchronized selected items.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value to be set as synchronized items.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManager">
            <summary>
            A synchronization manager.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManager.#ctor(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManager"/> class.
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManager.StartSynchronizingList">
            <summary>
            Starts synchronizing the list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.MultiSelectorBehaviours.SynchronizationManager.StopSynchronizing">
            <summary>
            Stops synchronizing the list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions">
            <summary>
            ItemsControl extensions.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.CanSelectMultipleItems(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.GetItemContainer(System.Windows.Controls.ItemsControl,System.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.GetItemContainerAt(System.Windows.Controls.ItemsControl,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.GetItemContainerType(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.GetItemsPanelOrientation(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.Utilities.ItemsControlExtensions.GetSelectedItems(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="itemsControl"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding">
            <summary>
            Defines the command behavior binding
            </summary>
            <remarks>
            Source: http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.BindEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Creates an EventHandler on runtime and registers that handler to the Event specified.
            </summary>
            <param name="owner"></param>
            <param name="eventName"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.ExecuteCommand">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.Dispose">
            <summary>
            Invoked when this object is being removed from the application
            and will be subject to garbage collection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.Dispose(System.Boolean)">
            <summary>
            Unregisters the EventHandler from the Event
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.Owner">
            <summary>
            Get the owner of the CommandBinding ex: a Button
            This property can only be set from the BindEvent Method
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.Command">
            <summary>
            The command to execute when the specified event is raised
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.CommandParameter">
            <summary>
            Gets or sets a CommandParameter
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.EventName">
            <summary>
            The event name to hook up to
            This property can only be set from the BindEvent Method
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.Event">
            <summary>
            The event info of the event
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.CommandBehaviorBinding.EventHandler">
            <summary>
            Gets the EventHandler for the binding with the event
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IModelPlugin">
            <summary>
            Model plugin plugin interface.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IModelPlugin.SetViewModelStore(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Sets the view model store.
            </summary>
            <param name="store">View model store.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel">
            <summary>
            Select element in tree view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectElementSubViewModel">
            <summary>
            Interface describing a selection element sub view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectElementSubViewModel.SetSelectedElement(System.Object)">
            <summary>
            Tries to set the selection to the given element.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectElementSubViewModel.IsActive">
            <summary>
            Gets or sets whether this view is active or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ISelectElementSubViewModel.SelectedElement">
            <summary>
            Gets the selected element.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.ActivatedCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.SetSelectedElement(System.Object)">
            <summary>
            Tries to set the selection to the given element.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.ModelTreeRootViewModels">
            <summary>
            Gets the root elements collection for binding to the tree view. It actually consists of only one element at all times.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.ModelTreeSelectedElement">
            <summary>
            Gets or sets the element, that is selected in the model tree.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.ActivatedCommand">
            <summary>
            Activated command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.IsActive">
            <summary>
            Gets or sets whether this view is active or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementTreeViewModel.SelectedElement">
            <summary>
            Gets the selected model element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel">
            <summary>
            Select element via search view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="selectableElements">
            List of existing elements, that are allowed to be selected. Can be null to specify that
            the is no such restriction needed and that all elements can be selected.
            </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SearchCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.Sort">
            <summary>
            Sorts the current results list.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.ActivatedCommand_Executed">
            <summary>
            Search command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SetSelectedElement(System.Object)">
            <summary>
            Tries to set the selection to the given element.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SearchResultViewModels">
            <summary>
            Gets the search results list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SearchText">
            <summary>
            Gets or sets the text to search for.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SearchCommand">
            <summary>
            Search command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.ActivatedCommand">
            <summary>
            Activated command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.IsActive">
            <summary>
            Gets or sets whether this view is active or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SearchSelectedElement">
            <summary>
            Gets or sets the element, that is selected in the search list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementSearchViewModel.SelectedElement">
            <summary>
            Gets the selected model element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel">
            <summary>
            This class represents an unary role property style view model.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.SentinelItem">
            <summary>
            Sentinel item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="domainRelationshipInfo">Relationship domain class info.</param>
            <param name="sourceRoleId">RoleId of the source role player. </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> null value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.DeleteElementCommand_Executed">
            <summary>
            Delete element executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.EditElementCommand_Executed">
            <summary>
            Edit element executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.NavigateToElementCommand_Executed">
            <summary>
            Navigate To Element Command executed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.DeleteElementCommand">
            <summary>
            Delete element command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.EditElementCommand">
            <summary>
            Edit element command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.NavigateToElementCommand">
            <summary>
            Navigate To Element Command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.UnaryRoleEditorViewModelSentinelItem">
            <summary>
            Sentinel item class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.UnaryRoleEditorViewModelSentinelItem.DomainElementFullName">
            <summary>
            (none) as name of the sentinel item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.UnaryRoleEditorViewModel.UnaryRoleEditorViewModelSentinelItem.IsSentinelDomainElementItem">
            <summary>
            True, indicating this is the sentinel item.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridSortOrder">
            <summary>
            Sort order in the property grid.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridSortOrder.Categorized">
            <summary>
            Editors are sorted by categories.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridSortOrder.Alphabetical">
            <summary>
            Editors are sorted alphabetically.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.DoubleEditorViewModel">
            <summary>
            This class represents a double property style view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.DoubleEditorViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.DoubleEditorViewModel.GetPropertyValue">
            <summary>
            Converts the property value (in respect to multiple source elements) and returns the converted value.
            </summary>
            <returns>Converted property value.</returns>
            <remarks>
            Converter: All equal --> use value. One differs --> empty value.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.DoubleEditorViewModel.SetPropertyValue(System.Object)">
            <summary>
            Assigns the property value to the property of every source element.
            </summary>
            <param name="value">Property value to be assigned.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.DoubleEditorViewModel.PropertyType">
            <summary>
            Gets the property type that is edited within this view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.DefaultDispatcher">
            <summary>
            Wraps the Application Dispatcher.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.IDispatcherFacade">
            <summary>
            Defines the interface for invoking methods through a Dispatcher Facade
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.IDispatcherFacade.BeginInvoke(System.Delegate,System.Object)">
            <summary>
            Dispatches an invocation to the method received as parameter.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="arg">Arguments to pass to the invoked method.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.Presentation.DefaultDispatcher.BeginInvoke(System.Delegate,System.Object)">
            <summary>
            Forwards the BeginInvoke to the current application's <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="arg">Arguments to pass to the invoked method.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>Information related to the event.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ErrorListAddItems">
            <summary>
            Event to notify that error list items need to be added to the error list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentOpeningEvent">
            <summary>
            Notifies during the opening process of a document.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentEventArgs">
            <summary>
            Document event arguments.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.ModelData)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Model data.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentEventArgs.ModelData">
            <summary>
            Gets or sets the model data.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations">
            <summary>
            Helper class for copy and paste operations.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.ElementsInMoveMode">
            <summary>
            List of ids of elements that are beeing moved.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.CanExecuteCopy(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Verifies if a collection of elements can be copied.
            </summary>
            <param name="modelElements">Elements.</param>
            <returns>True if the elements can be copied. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.CanExecuteMove(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Verifies if a collection of elements can be moved.
            </summary>
            <param name="modelElements">Elements.</param>
            <returns>True if the elements can be moved. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.CanExecutePaste(Microsoft.VisualStudio.Modeling.ModelElement,System.Windows.IDataObject)">
            <summary>
            Verifies if a paste operation can be executed.
            </summary>
            <param name="rootElement">Element to execute paste on.</param>
            <param name="dataObject">Data.</param>
            <returns>True if the paste operation can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.ExecuteCopy(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Adds the copies of the given elements to a data object and adds it to the clipboard.
            </summary>
            <param name="modelElements">Elements to copy.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.ExecuteCut(System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Adds the copies of the given elements to a data object and adds it to the clipboard.
            </summary>
            <param name="modelElements">Elements to move.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.ExecutePaste(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Executes the paste operation on the given element.
            </summary>
            <param name="modelElement">Element.</param>
            <returns>Validation result, indicating problems during the paste operation.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Operations.CopyAndPasteOperations.ProcessMoveMode(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventManager,System.Windows.IDataObject)">
            <summary>
            Helper method of the cut opeation.
            </summary>
            <param name="eventManager">Event manager.</param>
            <param name="idataObject">Data object.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsMovementInfo">
            <summary>
            Movement values struct.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsMovementInfo.HorizontalChange">
            <summary>
            Horizontal change value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsMovementInfo.VerticalChange">
            <summary>
            Vertical change value.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl">
            <summary>
            Items control hosting dependencies.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Updates the clicked point value, which is always relative to the source of the click event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.SetSelection(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem)">
            <summary>
            Sets the selection to the specified item.
            </summary>
            <param name="item">Item to set selection to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.ClearSelection">
            <summary>
            Clear selection.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.SelectedItemsProperty">
            <summary>
            Selected items property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.GetContainerForItemOverride">
            <summary>
            Creates a GraphicalDependenciesItem to use to display content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.GetSize">
            <summary>
            Gets the size.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItemsControl.SelectedItems">
            <summary>
            Property to notify of selected items.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem">
            <summary>
            Item representing a dependency.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable">
            <summary>
            Common interface for items that can be selected. It also specifies what data to propagate
            as beeing selected.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable.IsSelected">
            <summary>
            Gets or sets whether the control is selected or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable.SelectedData">
            <summary>
            Gets the selected data.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.IsSelectedProperty">
            <summary>
            Is selected dependency property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Update selection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.UpdateSelection(System.Boolean)">
            <summary>
            Updates the selection for this item.
            </summary>
            <param name="bSelect">True if this item should be selected; false otherwise.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.GetDiagramDesigner(System.Windows.DependencyObject)">
            <summary>
            Gets the dependencies items control.
            </summary>
            <param name="startObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.GetDiagramDesignerItem(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type DiagramDesignerItem that represents an element
            starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.IsSelected">
            <summary>
            Property to notify the control that it is selected.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies.GraphicalDependenciesItem.SelectedData">
            <summary>
            Gets the selected data.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguageViewModel">
            <summary>
            View model used to represent a language.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguageViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="culture">Culture assigned to this language.</param>
            <param name="displayName">DisplayName for this language.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguageViewModel.Culture">
            <summary>
            Gets the culture for this language.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguageViewModel.DisplayName">
            <summary>
            Gets the display name for this language.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.LoaderAnimation">
            <summary>
            Contains a loader animation for the WaitWindow
            </summary>
            <summary>
            LoaderAnimation
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.LoaderAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.LoaderAnimation"/> class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.LoaderAnimation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner">
            <summary>
            Drag adorner.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.#ctor(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="adornedElement"></param>
            <param name="adornment"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.Detatch">
            <summary>
            Detach.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange override.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Desired transformation.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.GetVisualChild(System.Int32)">
            <summary>
            Gets the visual child.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure override.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.MousePosition">
            <summary>
            Gets or sets the position of the mouse.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragAdorner.VisualChildrenCount">
            <summary>
            Gets the visual children count.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel">
            <summary>
            Edge point vm interface.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.EdgePointType">
            <summary>
            Gets the edge point type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.EdgePoint">
            <summary>
            Gets the edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.EdgePointSide">
            <summary>
            Gets or sets the edge point side.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.EdgePointOperation">
            <summary>
            Gets or set the edge point operation.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.EdgeId">
            <summary>
            Gets the id of the edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.X">
            <summary>
            Gets the x coordinate.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.IEdgePointViewModel.Y">
            <summary>
            Gets the y coordinate.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior">
            <summary>
            Clicked item behavior for the treeview.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type TreeViewItem or ToggleButton starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.ClickedItemProperty">
            <summary>
            Clicked item dependency property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.SelectedItemProperty">
            <summary>
            Selected item dependency property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.ClickedItem">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TreeViewClickedAndSelectedItemBehavior.SelectedItem">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.FrameworkElementContextMenuBehavior">
            <summary>
            Context menu behavior, which supresses the context menu opening twice. Additionally, whenever the items of the context menu are binded and the
            user opens the menu very fast and the menu items change, there is an ugly visual update, which is suppressed here as well. Furthermore, 
            if the menu is empty, it is not shown.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.FrameworkElementContextMenuBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.FrameworkElementContextMenuBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent">
            <summary>
            Notifies that a model element's property value has changed. There are multiple subscription possibilities
            available, which allow to subscribe to specific changes.
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Subscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Subscribes to the property changed event. Observers are notified, whenever a property changes on a
            specific model element.
            </summary>
            <param name="elementId">Id of the model element, on which property changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Subscribes to the property changed event. Observers are notified, whenever a property of a specific type
            changes.
            </summary>
            <param name="domainPropertyInfo">Property info specifying a property type, which changes cause a notification.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Subscribes to the property changed event. Observers are notified, whenever a property type on a specific 
            element changes.
            </summary>
            <param name="domainPropertyInfo">Property info specifying a property type, which changes cause a notification.</param>
            <param name="elementId">Id of the model element, on which property changes to notify the observer.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Subscribes to the property changed event. Observers are notified, whenever a property of a specific type
            changes on a model element of a specific type.
            </summary>
            <param name="domainPropertyInfo">Property info specifying a property type, which changes cause a notification.</param>
            <param name="domainClassInfo">
            Domain class info specifying the type of model element, which property changes cause a notification (All derived
            model element types are included).
            </param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Publish(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Unsubscribe(System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="elementId">Model element id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainPropertyInfo">Domain property info specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainPropertyInfo">Domain property info specifying when to unsubscribe.</param>
            <param name="elementId">Model element id specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementPropertyChangedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Action{Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainClassInfo">Domain class info specifying when to unsubscribe.</param>
            <param name="domainPropertyInfo">Domain property info specifying when to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent">
            <summary>
            Notifies of a new element link beeing added to the domain model.
            
            An observer can either subscribe to the event in general (Warning, this will provide a notification for each 
            new domain element) or subscribe to a more specific event.
            
            This specific event allows to provide a domain class info of the model element, on which addition the
            given action is called (for alle other elements, the action is ignored).
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementAddedEventArgs})">
            <summary>
            Subscribe to the event. The observer will be notified, whenever a element link of
            the given domain relationship type (which does include all descendants) with the specified 
            parent element is included in the specific event. 
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying when to notify the observer.</param>
            <param name="bSourceRole">Boolean value indicating source or target role.</param>
            <param name="parentElementId">ElementId of the parent element specifying when to notify.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementAddedEventArgs})">
            <summary>
            Subscribe to the event. The observer will be notified, whenever a element link of
            the given domain relationship type (which does include all descendants) with the specified 
            element in a role is included in the specific event. 
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying when to notify the observer.</param>
            <param name="elementId">ElementId of the element specifying when to notify.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.Publish(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementAddedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying from what to unsubscribe.</param>
            <param name="bSourceRole">Boolean value indicating source or target role.</param>
            <param name="parentElementId">Parent element Id specifying from what to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkAddedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementAddedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying when to notify the observer.</param>
            <param name="elementId">ElementId of the element specifying when to notify.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEvent`1">
            <summary>
            Custom event class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEvent`1.Subscribe(System.String,System.Guid,System.Action{`0})">
            <summary>
            Subscribe to a specific event. 
            <param name="eventName">Name of the event to subscribe to</param>
            <param name="elementId">ElementId of the model element, which specifies when to notify the observer.</param>
            <param name="action">Action to call on notification.</param>
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEvent`1.Publish(`0,System.String,System.Guid)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
            <param name="eventName">Event name.</param>
            <param name="elementId">Element id.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEvent`1.PruneAndReturnStrategies(`0,System.String,System.Guid)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <param name="eventName">Event name for which to notify observers.</param>
            <param name="elementId">ElementId for which to notify observers.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEvent`1.Unsubscribe(System.String,System.Guid,System.Action{`0})">
            <summary>
            Unsubscribe to a specific event. 
            <param name="eventName">Name of the event to unsubscribe from</param>
            <param name="elementId">ElementId specifying what to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEvent">
            <summary>
            Notifies of a 'IsActive' property change of a view.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ActivationMode">
            <summary>
            Activate mode enumeratoin.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ActivationMode.Normal">
            <summary>
            Activation on click.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.ViewModel.ActivationMode.None">
            <summary>
            Not activation.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.ConversionErrorMessageFormatString">
            <summary>
              Looks up a localized string similar to ResExtension Type conversion failed. Id: {0}, Error: {1}.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.DeletionViewModel_Description">
            <summary>
              Looks up a localized string similar to The following depenendencies are about to be deleted from the model (Warning: Embedding Relationships denote Parent-Child relationships and as such the child element is also deleted from the model).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.DeletionViewModel_Titel">
            <summary>
              Looks up a localized string similar to Please confirm deletion of model element(s)....
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.InvalidAssemblyExceptionMessage">
            <summary>
              Looks up a localized string similar to Invalid assembly passed or assembly is not loaded..
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.InvalidStaticBindingSyntax">
            <summary>
              Looks up a localized string similar to Invalid Static Binding Syntax.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.LanguageViewModel_LanguageChange">
            <summary>
              Looks up a localized string similar to For the language change to take effect, please restart the application.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_Name">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_NameAndType">
            <summary>
              Looks up a localized string similar to Name and Type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_PropertiesWithoutName">
            <summary>
              Looks up a localized string similar to Properties without Name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_Roles">
            <summary>
              Looks up a localized string similar to Roles.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchCriteriaEnum_Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchResultViewModel_FindResults">
            <summary>
              Looks up a localized string similar to Find Results.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchSourceEnum_Elements">
            <summary>
              Looks up a localized string similar to Elements.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchSourceEnum_ElementsAndReferenceRelationships">
            <summary>
              Looks up a localized string similar to Elements and Reference Relationships.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchSourceEnum_ReferenceRelationships">
            <summary>
              Looks up a localized string similar to Reference Relationships.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchViewModel_FindAdvanced">
            <summary>
              Looks up a localized string similar to Find Advanced.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchViewModel_OptionsSummary">
            <summary>
              Looks up a localized string similar to Find all &apos;{0}&apos;, Source: {1}, Criteria: {2}.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchViewModel_OptionsSummaryAdv">
            <summary>
              Looks up a localized string similar to Find all &apos;{0}&apos;, Source: {1}, Criteria: {2} and in results find &apos;{3}&apos; , Criteria: {4}.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchViewModel_ResultsFound">
            <summary>
              Looks up a localized string similar to Results found.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Properties.Resources.SearchViewModel_TotalElementsSearched">
            <summary>
              Looks up a localized string similar to Total elements searched.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MenuIconConverter">
            <summary>
            This class simply converts a image url into a Image for use within a MenuItem
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MenuIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.MenuIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToOppositeConverter">
            <summary>
            Converts a boolean value to its opposite.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToOppositeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToOppositeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid">
            <summary>
            This class represents the property grid.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.HeaderDefaultWidth">
            <summary>
            Default width of the header.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.#cctor">
            <summary>
            Static constructor to set style.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.SelectedEditorProperty">
            <summary>
            Selected editor dependency property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Set the selected editor.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type PropertyGridItem starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.SelectedPropertyGridItem">
            <summary>
            Gets or sets the selected editor in the property grid. Can be null.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGrid.SelectedEditor">
            <summary>
            Gets the property grid selected editor data object.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel">
            <summary>
            This vm is used to group dependency shapes together.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.OnNestedChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren)">
            <summary>
            Add nested children.
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.OnNestedChildShapeElementRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Remove nested children.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.OnRelativeChildShapeElementAdded(Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren)">
            <summary>
            Not supported.
            </summary>
            <param name="con"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.AutomaticallyDeletesHostedElement">
            <summary>
            Never delete hosted element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.Diagram">
            <summary>
            Gets the diagram this item belongs to.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.CanHaveRelativeChildren">
            <summary>
            Cant have relative children.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.CanHaveNestedChildren">
            <summary>
            Has nested children.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyHostViewModel.RelationshipName">
            <summary>
            Name of the represented relationship.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchWindowControl">
            <summary>
            Interaction logic for SearchWindowControl.xaml
            </summary>
            <summary>
            SearchWindowControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchWindowControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.SearchWindowControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.ModalDiagram">
            <summary>
            Interaction logic for ModalDiagram.xaml
            </summary>
            <summary>
            ModalDiagram
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.ModalDiagram.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.Templates.ModalDiagram.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TextBoxEnterBehavior">
            <summary>
            Textbox behavior for the enter key: Enter key in the active textbox specifies the
            end of the editing process.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TextBoxEnterBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.TextBoxEnterBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource">
            <summary>
            This class represents a search source.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource.#ctor(Tum.PDE.ToolFramework.Modeling.SearchSourceEnum,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source.</param>
            <param name="displayName">Display name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchSource.Id">
            <summary>
            Gets the id of this search source.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel">
            <summary>
            This is the class for a modal diagram surface implementation.
            </summary>
            <remarks>
            The idea behind this class is to create a diagram surface that is opened for a specific element such
            as a 'Product' or a 'Milestone'. Therefore, this view model can not be opened from the default
            view menu, but either via the context menu of the model tree or programatically.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.DomainModelElement)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="element">Element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor. This meant to be called if the model is beeing restored. Initialize in this
            case is called from the restore method.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.GetInformationForRestore">
            <summary>
            Get the necessary information to restore this vm after it has been closed.
            </summary>
            <returns>Restore information.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.GetDockingPaneType">
            <summary>
            Get the docking pane type as string.
            </summary>
            <returns>Docking pane type.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.Restore(System.Xml.Linq.XElement)">
            <summary>
            Restore the VM based on stored information.
            </summary>
            <param name="element">Info.</param>
            <returns>
            True if the restore process was successful. False otherwise.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.Initialize">
            <summary>
            Initialization routine.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.OnModelElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Callen if the hosted element is deleted.
            </summary>
            <param name="arg">Data</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.CreateRibbonMenu(Fluent.Ribbon)">
            <summary>
            Not required.
            </summary>
            <param name="ribbonMenu"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.HideOnClose">
            <summary>
            Gets whether this vm should only be hidden whenever its closed. Otherwise, the vm is removed.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.HostedElement">
            <summary>
            Gets the hosted element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.HostedElementVM">
            <summary>
            Gets the domain model element.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.TitleExtension">
            <summary>
            Title extension that is shown after the diagram name in the docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.Templates.ModalDesignerSurfaceViewModel.NameExtension">
            <summary>
            Name extension. Since this diagram can be opened multiple times for different elements of a 
            specific type, we need to ensure that each of those diagrams has its own unique name.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ErrorListControl">
            <summary>
            Interaction logic for ErrorListControl.xaml
            </summary>
            <summary>
            ErrorListControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ErrorListControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ErrorListControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands">
            <summary>
            This class is used to provide attached commands for base view models.
            
            Supported Commands: Activated (whenever a mouse click occurs in the view), Loaded, Unloaded. (Loaded and Unloaded for UserControl)
            </summary>
            <example>
            <![CDATA[ vma:ViewModelAttachedCommands.IsActivated="{Binding ActivatedCommand}"]]>
            </example>
            <remarks>
            Basen on Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.ActivatedProperty">
            <summary>
            Dependency property which holds the ICommand for the IsActivated event
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.GetActivated(System.Windows.DependencyObject)">
            <summary>
            Attached Property getter to retrieve the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <returns>ICommand</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.SetActivated(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attached Property setter to change the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <param name="command">ICommand</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.OnActivatedPropertyPropertyEventInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This is the property changed handler for the IsActivated property.
            </summary>
            <param name="sender">Dependency Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.LoadedProperty">
            <summary>
            Dependency property which holds the ICommand for the Loaded event
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.GetLoaded(System.Windows.DependencyObject)">
            <summary>
            Attached Property getter to retrieve the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <returns>ICommand</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.SetLoaded(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attached Property setter to change the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <param name="command">ICommand</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.OnLoadedEventInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This is the property changed handler for the Loaded property.
            </summary>
            <param name="sender">Dependency Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.OnUserControlLoaded(System.Object,System.EventArgs)">
            <summary>
            This is the handler for the Loaded event to raise the command.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.UnloadedProperty">
            <summary>
            Dependency property which holds the ICommand for the Unloaded event
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.GetUnloaded(System.Windows.DependencyObject)">
            <summary>
            Attached Property getter to retrieve the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <returns>ICommand</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.SetUnloaded(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attached Property setter to change the ICommand
            </summary>
            <param name="source">Dependency Object</param>
            <param name="command">ICommand</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.OnUnloadedEventInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This is the property changed handler for the Unloaded property.
            </summary>
            <param name="sender">Dependency Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.OnUserControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            This is the handler for the Unloaded event to raise the command.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.CommandParameterProperty">
            <summary>
            Parameter for the ICommand
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>
            This retrieves the CommandParameter used for the command.
            </summary>
            <param name="source">Dependency object</param>
            <returns>Command Parameter passed to ICommand</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Attached.ViewModelAttachedCommands.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            This changes the CommandParameter used with this command.
            </summary>
            <param name="source">Dependency Object</param>
            <param name="value">New Value</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService">
            <summary>
            Selection service for the diagram surface.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner)">
            <summary>
            Constructor.
            </summary>
            <param name="diagramDesigner">Designer for which this service is to be initialized.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.SelectItem(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable)">
            <summary>
            Selects an item.
            </summary>
            <param name="item">Item to be selected.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.SelectItems(System.Collections.ObjectModel.Collection{Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable})">
            <summary>
            Selects multiple items.
            </summary>
            <param name="itemsToSelect">Items to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.AddToSelection(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable)">
            <summary>
            Adds an item to selection.
            </summary>
            <param name="item">Item to add to selection.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.AddToSelection(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable,System.Boolean)">
            <summary>
            Adds an item to selection.
            </summary>
            <param name="item">Item to add to selection.</param>
            <param name="bNotify">True to notify of this selection change. False otherwise.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.RemoveFromSelection(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable)">
            <summary>
            Removes an item from the selection.
            </summary>
            <param name="item">Item to be removed from the selection.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.RemoveFromSelection(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.ISelectable,System.Boolean)">
            <summary>
            Removes an item from the selection.
            </summary>
            <param name="item">Item to be removed from the selection.</param>
            <param name="bNotify">True to notify of this selection change. False otherwise.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.ClearSelection(System.Boolean)">
            <summary>
            Clears selection.
            </summary>
            <param name="bNotify">True if notification of this change is required. False if this is an internal clear command.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.Notify">
            <summary>
            Notifies the diagram of change by updating the selected items property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.CurrentSelection">
            <summary>
            Gets the currently selected items.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerSelectionService.DiagramDesigner">
            <summary>
            Gets the diagram designer, for which this selection service is active.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl.txtElementName_Text">
            <summary>
              Looks up a localized string similar to Element name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl.txtPath_Text">
            <summary>
              Looks up a localized string similar to Path.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchResultControl.txtReason_Text">
            <summary>
              Looks up a localized string similar to Reason.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Ribbon.EmbeddedRibbon">
            <summary>
            Customization of the fluent ribbon control to make it work inside user controls.
            </summary>
            <remarks>
            Required change in fluent's source code:
            
            RibbonTabsContainer: ArrangeOverride.
            
             /*
              *  CHANGE: 
              *  if( (InternalChildren[i] as RibbonTabItem).Group.Parent != null )
             */
             if ( (InternalChildren[i] as RibbonTabItem).Group.Parent != null )
                 ((InternalChildren[i] as RibbonTabItem).Group.Parent as RibbonTitleBar).InvalidateMeasure();
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Ribbon.EmbeddedRibbon.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Ribbon.EmbeddedRibbon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock">
            <summary>
            Tab item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.TitleProperty">
            <summary>
            Title property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.ImageSourceProperty">
            <summary>
            ImageSource property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.HasImageProperty">
            <summary>
            HasImage property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.Title">
            <summary>
            Title property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.ImageSource">
            <summary>
            ImageSource property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.TabItemAvalonDock.HasImage">
            <summary>
            HasImage property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ComboBoxWithDisplayText">
            <summary>
            Combobox with a display text dependency property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ComboBoxWithDisplayText.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ComboBoxWithDisplayText.DisplayTextProperty">
            <summary>
            DisplayText dependency property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.ComboBoxWithDisplayText.DisplayText">
            <summary>
            Gets or sets the text displayed in the ComboBox
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior">
            <summary>
            Selection in the list box doesn't really work reliable enough to bind something to the selected item. (Even
            with IsSynchronizedWithCurrentItem set to true, it is possible to select an item in the data template, 
            without setting the selected item.
            
            This behavior provides an extra property, where the selected item (based on where the user clicked) is always
            updated.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type ListBoxItem starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior.SelectedItemProperty">
            <summary>
            Selected item dependency property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListBoxSelectedItemBehavior.SelectedItem">
            <summary>
            Gets or sets the object that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentClosedEvent">
            <summary>
            Notifies after an opened document has been closed.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.SeparatorMenuItemViewModel">
            <summary>
            This class represents a separator menu item.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel">
            <summary>
            This class provides a view model for an ui menu item representation.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="text">Text of the menu item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="text">Text of the menu item.</param>
            <param name="iconUrl">Icon of the menu item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.OnDispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.Text">
            <summary>
            Gets or sets the text to display in the menu item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.IconUrl">
            <summary>
            Gets or sets the url of the icon to display in the menu item. Can be null.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.IsEnabled">
            <summary>
            Gets or sets whether this menu item is enabled or not. True by default.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.HasIcon">
            <summary>
            Gets whether this menu item vm has an icon.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.Children">
            <summary>
            Gets the child items of this menu item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel.Command">
            <summary>
            Gets or set command of this menu item.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.SeparatorMenuItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel">
            <summary>
            This is the error list item view model for an model element error. This is
            for instance used during automatic validation to notify the error list of
            new errors.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.ModelValidationMessage)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="message">Message from the model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.GetUniqueId">
            <summary>
            This method provides an unique id for the current model item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.Navigate">
            <summary>
            Navigate to model element
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.ConvertCategory(Tum.PDE.ToolFramework.Modeling.ModelValidationViolationType)">
            <summary>
            Converts a model violation type to an error list item category.
            </summary>
            <param name="kind">Violation type to convert.</param>
            <returns>Error list item category that is corresponding to the violation type.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ErrorList.ModelErrorListItemViewModel.Source">
            <summary>
            Gets the source of the error.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollBar">
            <summary>
            Scrollbar for the model tree view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollBar.#cctor">
            <summary>
            Static constructor to set style.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyMainItemViewModel">
            <summary>
            This view model represents a GraphicalDependencyMainShape which is the main shape dependencies
            are centered around.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependencyMainItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel,Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyMainShape)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagram">The Diagram this item belongs to.</param>
            <param name="shapeElement">Model element, that is hosted by this view model.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.LeftMarginMultiplierConverter">
            <summary>
            http://stackoverflow.com/questions/664632/highlight-whole-treeviewitem-line-in-wpf
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.LeftMarginMultiplierConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.LeftMarginMultiplierConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.LeftMarginMultiplierConverter.Length">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb">
            <summary>
            This class is used to resize diagram items.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.MinDistanceToStart">
            <summary>
            Value indicating the minimal distance the dragging operation requires to have 
            passed before starting the actual resizing of the selected elements.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.ResizeThumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Dragging has started, see if VM is IDiagramDesignerItem and notify of resizing start.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.Start">
            <summary>
            Start the drag operation.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.ResizeThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Dragging has ended, see if VM is IDiagramDesignerItem and notify of resizing end.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemResizeThumb.ResizeThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Resize item(s).
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem">
            <summary>
            This class is used to represent a diagram item on the diagram surface. 
            </summary>
            <remarks>A diagram item can represent either an element or a link.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.IsSelectedProperty">
            <summary>
            Is selected dependency property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Update selection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.UpdateSelection(System.Boolean)">
            <summary>
            Updates the selection for this item.
            </summary>
            <param name="bSelect">True if this item should be selected; false otherwise.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.IsDiagramLink">
            <summary>
            Gets whether this element represents a diagram link or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.AbsoluteLocation">
            <summary>
            Gets the absolute location of this item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.IsSelected">
            <summary>
            Property to notify the control that it is selected.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.SelectedData">
            <summary>
            Gets the selected data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.ParentCanvas">
            <summary>
            Gets the parent diagram designer item. If there is none, null is returned.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItem.ParentChildrenHost">
            <summary>
            Gets the parent diagram designer children host. If there is none, null is returned.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas">
            <summary>
            This is used as the panel in the DiagramDesignerItems control.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Set the starting point for a possible rubberband selection. Clear selection if
            this is the top most container.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Start rubberband selection if mouse button is still pressed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas.IsTopMostContainer">
            <summary>
            Verifies if this is the top most container in the canvas hierarchy.
            </summary>
            <returns>True if this is the top most container; False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Calculate the actual size because it is unknown otherwise, since we
            are using a canvas.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguagesViewModel">
            <summary>
            View model used to represent a collection of languages.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguagesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguagesViewModel.Languages">
            <summary>
            Gets the available languages.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.LanguagesViewModel.SelectedLanguage">
            <summary>
            Gets or sets the selected language.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel">
            <summary>
            This abstract class contains the base functionality of a main view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="bCallIntialize">True if the Initialize method should be called.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.PreInitialize">
            <summary>
            This is called to preinitialize the main vm. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.Initialize">
            <summary>
            This method is used to initialize the view model and can be overriden for customization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ShowPluginIfShownBefore(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel)">
            <summary>
            Show plugin if it was shown before (layout manager stores the information).
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.AddViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Adds a view model as a child model of this view model.
            </summary>
            <param name="viewModel">View model to add to the children collection.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.EnsureViewModelVisibility">
            <summary>
            Ensures that only those view models are visible, that are general to all or specific to the current vm.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.SwitchContexts(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel)">
            <summary>
            Switch model contexts.
            </summary>
            <param name="newContextVM">New model context vm.</param>
            <param name="oldContextVM">Old model context vm.</param>
            <returns>True if a switch did occur. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.BeforeSwitchContexts(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel)">
            <summary>
            This method is called from the SwitchContexts method before a switch occurs.
            </summary>
            <param name="newContextVM">New model context vm.</param>
            <param name="oldContextVM">Old model context vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.AfterSwitchContexts(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel)">
            <summary>
            This method is called from the SwitchContexts method after a switch occurs.
            </summary>
            <param name="newContextVM">New model context vm.</param>
            <param name="oldContextVM">Old model context vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ReactOnViewActivation(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEventArgs)">
            <summary>
            Called whenver a subview becomes active. This is used to track what subview is currently active.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.OpenViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs)">
            <summary>
            Reacts on the OpenViewModel event.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ShowViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs)">
            <summary>
            Reacts on ShowViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.CloseViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs)">
            <summary>
            React on CloseViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.BringtToFrontViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.BringToFrontViewModelRequestEventArgs)">
            <summary>
            React on ShowViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ValidateAllCommandExecuted">
            <summary>
            Validate all command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateForwardCommandExecuted">
            <summary>
            Navigate forward command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateForwardCommandCanExecute">
            <summary>
            Navigate forward command can execute.
            </summary>
            <returns>True if the save command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateBackwardCommandExecuted">
            <summary>
            Navigate backward command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateBackwardCommandCanExecute">
            <summary>
            Navigate backward command can execute.
            </summary>
            <returns>True if the save command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.Reset">
            <summary>
            Reset ressources.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.OnExit">
            <summary>
            Called when the application exists.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.CanExit">
            <summary>
            Called when the application is about to exist.
            </summary>
            <returns>
            True if the application can exit. False to abbort exit.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.WindowTitle">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.SelectedModelContextViewModel">
            <summary>
            Gets the selected model context vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.AvailableModelModelContextViewModels">
            <summary>
            Gets the available model context vms.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.AllViewModelsRO">
            <summary>
            Readonly collection of all view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.AllViewModels">
            <summary>
            Readonly collection of all view models.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.UnknownOpenedModels">
            <summary>
            Gets unknown opened models (Modal VMs).
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.LanguagesViewModel">
            <summary>
            Gets the languages view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ActiveViewModel">
            <summary>
            Gets the currently active view model. Can be null if none have been activated yet.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.CreditsViewModel">
            <summary>
            Gets the credits view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.HasCredits">
            <summary>
            Gets whether there are credits that should be displayed or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.FurtherReadingViewModel">
            <summary>
            Gets the further reading view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.HasFurtherReadings">
            <summary>
            Gets whether there are further readings that should be displayed or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.IsValidationMenuVisible">
            <summary>
            Gets whether the validation menu is visible or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.Ribbon">
            <summary>
            Gets or sets the main ribbon menu.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigationManager">
            <summary>
            Gets the navigation manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.ValidateAllCommand">
            <summary>
            Validate all command, used to validate all elements in the domain model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateBackwardCommand">
            <summary>
            NavigateBackwardCommand.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseMainViewModel.NavigateForwardCommand">
            <summary>
            NavigateForwardCommand.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.RadioButtonBindable">
            <summary>
            RadioButton with bindable IsChecked property.
            </summary>
            <remarks>
            http://pstaev.blogspot.com/2008/10/binding-ischecked-property-of.html
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.RadioButtonBindable.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.RadioButtonBindable.IsCheckedRealProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCheckedReal. This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Common.RadioButtonBindable.IsCheckedReal">
            <summary>
            Bindable is checked property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ContextMenuHelper">
            <summary>
            Behaviors for the context menu.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ContextMenuHelper.GetShouldHideIfEmpty(System.Windows.DependencyObject)">
            <summary>
            Gets the dialog result value for the ShouldHideIfEmptyProperty on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ContextMenuHelper.SetShouldHideIfEmpty(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the dialog result value for the ShouldHideIfEmptyProperty on the given dependency object.
            </summary>
            <param name="obj">Dependency object.</param>
            <param name="value">Value.</param>
            <returns>Value of the property.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ContextMenuHelper.ShouldHideIfEmptyProperty">
            <summary>
            Dialog result property.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModelAttribute">
            <summary>
            Property grid editor vm attribute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModelAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="vm">Type of the editor.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModelAttribute.#ctor(System.Type,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModelConstructor{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Constructor.
            </summary>
            <param name="vm">Type of the editor.</param>
            <param name="constructor">Constructor delegate.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModelAttribute.ViewModelType">
            <summary>
            Gets or sets the view model type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModelAttribute.ConstructorDelegate">
            <summary>
            Gets or sets the constructor delegate.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager">
            <summary>
            This class is used to navigate forward and back. The "navigation" itself is simulated via
            selection events.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constructor.
            </summary>
            <param name="store">View model store containing the event manager used to subscribe and publish selection events.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.NavigateForward">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.CanNavigateForward">
            <summary>
            Method to verify if navigation can occur. 
            </summary>
            <returns>True if navigation can occur. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.NavigateBackward">
            <summary>
            Navigates backward.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.CanNavigateBackward">
            <summary>
            Method to verify if navigation can occur. 
            </summary>
            <returns>True if navigation can occur. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.NavigationManager.Reset">
            <summary>
            Resets the navigation manager.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ResetViewModelEvent">
            <summary>
            Event, that notifies that the view models need to be reset.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyWindowControl">
            <summary>
            Interaction logic for PropertyWindowControl.xaml
            </summary>
            <summary>
            PropertyWindowControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyWindowControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyWindowControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner">
            <summary>
            Rubberband selection adorner.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerCanvas,System.Nullable{System.Windows.Point})">
            <summary>
            Contructor.
            </summary>
            <param name="designerCanvas">Designer items canvas.</param>
            <param name="dragStartPoint">Start point.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Release mouse and update selection if necessary.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Remove layer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the rubberband selection adorner.
            </summary>
            <param name="dc">Drawing context.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.UpdateSelection">
            <summary>
            Updates the selection.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRubberbandAdorner.DragDecoratorInflateValue">
            <summary>
            Used to itemBounds.Inflate(-DragDecoratorInflateValue, -DragDecoratorInflateValue). ItemBounds specify
            the bounds of a diagram item.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRelativeItems">
            <summary>
            This items control is used as the bindable host for child items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRelativeItems.GetContainerForItemOverride">
            <summary>
            Creates a DiagramDesignerItem to use to display content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRelativeItems.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems">
            <summary>
            This items control is used as the bindable host for child items, which can either be elements or links.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.GetContainerForItemOverride">
            <summary>
            Creates a DiagramDesignerItem to use to display content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.IsTopMostHost">
            <summary>
            Verifies if this is the top most items host.
            </summary>
            <returns>True if this is the top most items host; False otherwise.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.ActsAsTopMostProperty">
            <summary>
            Selected items property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.ActsAsTopMost">
            <summary>
            ActsAsTopMost-Property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItems.SecondaryMargin">
            <summary>
            Gets or sets the secondary margin, which is used to extend the size of this control on the surface.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow">
            <summary>
            Please wait window to show a please wait window with the option to customize the text.
            </summary>
            <remarks>
            Parts of this code comes from this blog: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx
            </remarks>
            <summary>
            PleaseWaitWindow
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.#ctor(System.String)">
            <summary>
            Initializes a please wait window with default text.
            </summary>
            <param name="text">Text to display in the window.</param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.ChangeOwnerDimming(System.Boolean)">
            <summary>
            Changes the owner dimming.
            </summary>
            <param name="dimm">if set to <c>true</c>, the owner should be dimmed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the window is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the layout of the window is updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.CreateMediaElementOnWorkerThread">
            <summary>
            Creates the media element on worker thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.MediaWorkerThread(System.Object)">
            <summary>
            Medias the worker thread.
            </summary>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.CreateMediaElement">
            <summary>
            Creates the media element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitWindow.IsOwnerDimmed">
            <summary>
            Gets or sets a value indicating whether this instance is dimmed.
            </summary>
            <value><c>true</c> if this instance is dimmed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper">
            <summary>
            PleaseWait window Helper class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper"/> class.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate,System.String,System.Double)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Show(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler,System.String,System.Double)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.UpdateStatus(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Hide">
            <summary>
            Hides the Please Wait window.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.UpdateStatusText(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="text">The text.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.ShowWindow">
            <summary>
            Shows the window delayed by using the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.MinimumDurationBeforeShow"/>.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.HideWindow">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.Instance">
            <summary>
            Gets the instance of this singleton class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWindow">
            <summary>
            Gets or sets the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWindow"/> instance.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.MinimumDurationBeforeShow">
            <summary>
            Gets or sets the minimum duration in milliseconds that an operation must take before the window is actually shown.
            </summary>
            <value>The minimum duration in milliseconds that an operation must take before the window is actually shown.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.MinimumShowTime">
            <summary>
            Gets or sets the minimum show time in milliseconds.
            </summary>
            <value>The minimum show time in milliseconds.</value>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWorkDelegate">
            <summary>
            Please wait work delegate.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.HideWindowDelegate">
            <summary>
            Delegate that allows this class to re-invoke the HideWindow method.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.UpdateStatusTextDelegate">
            <summary>
            Delegate to update the status text of the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.PleaseWaitHelper.PleaseWaitWindow"/>.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel">
            <summary>
            This class represents a search result view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByNameCommand_Executed">
            <summary>
            SortByNumberCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByReasonCommand_Executed">
            <summary>
            SortByReason Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByPathCommand_Executed">
            <summary>
            SortByPathCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.NavigateCommand_Executed">
            <summary>
            NvigateToSourceCommand Executed
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.Sort(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultSortOrder,System.Boolean)">
            <summary>
            Sorts the dependencies list.
            </summary>
            <param name="order">Order to sort the dependencies list by.</param>
            <param name="bAscending">Ascending or descending order.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.OnReset">
            <summary>
            Reset vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.DockingPaneName">
            <summary>
            Unique name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.DockingPaneTitle">
            <summary>
            Title of the dockable window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SearchResults">
            <summary>
            Gets the search result list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SelectedSearchResultItem">
            <summary>
            Gets or sets the selected search result item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SearchOptionsSummary">
            <summary>
            Gets or sets the search options summary.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SearchResultSummary">
            <summary>
            Gets or sets the search result summary.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortOrder">
            <summary>
            Sort order in the search result view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.IsSortedAscending">
            <summary>
            Ascending or descending sort order.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.NavigateCommand">
            <summary>
            Navigate Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByNameCommand">
            <summary>
            SortByNameCommand Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByReasonCommand">
            <summary>
            SortByReasonCommand Command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultViewModel.SortByPathCommand">
            <summary>
            SortByPathCommand Command.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.ViewModelEventManager">
            <summary>
            This is the main event manager, that is derived from Prism's EventAggregator (EventAggregator pattern).
            
            We use this for communication between viewmodels (Viewmodels are not aware of each other!).
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventAggregator">
            <summary>
            Implements <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IEventAggregator"/>.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventAggregator.GetEvent``1">
            <summary>
            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name="TEventType"/> returns the same event instance.
            </summary>
            <typeparam name="TEventType">The type of event to get. This must inherit from <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase"/>.</typeparam>
            <returns>A singleton instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEventNames">
            <summary>
            Event names helper class.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementCustomEventNames.ModelElementMoveModeStatus">
            <summary>
            Move mode status event name.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1">
            <summary>
            This class provides a view model for an ui menu item representation.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="text">Text of the menu item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="text">Text of the menu item.</param>
            <param name="iconUrl">Icon of the menu item.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.OnDispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.Command">
            <summary>
            Gets or set command of this menu item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu.MenuItemViewModel`1.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToUnderlineConverter">
            <summary>
            Converts bool to "Underline" if true; to null if false.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToUnderlineConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Converters.BoolToUnderlineConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to its target type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Optional parameter to use during conversion.</param>
            <param name="culture">CultureInfo to use during conversion.</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection">
            <summary>
            Resize direction info struct.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.Left">
            <summary>
            Resize in the left directin.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.Top">
            <summary>
            Resize in the upper direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.Right">
            <summary>
            Resize in the right direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.Bottom">
            <summary>
            Resize in the bottom direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.LeftTop">
            <summary>
            Resize in the left+top direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.LeftBottom">
            <summary>
            Resize in the left+bottom direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.RightTop">
            <summary>
            Resize in the right+top direction.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeDirection.RightBottom">
            <summary>
            Resize in the left+bottom direction.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramLinkAnchorStyle">
            <summary>
            Anchor styles enumeration.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramLinkAnchorStyle.None">
            <summary>
            No anchor style.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramLinkAnchorStyle.Arrow">
            <summary>
            Arrow anchor style.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramLinkAnchorStyle.Diamond">
            <summary>
            Diamond anchor style.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecute(`0)"/>.
            It also implements the IActiveAware interface, which is
            useful when registering this command in a CompositeCommand/&gt;
            that monitors command's activity.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <remarks><seealso cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null"/>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <see langword="null" />.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the CompositeCommand can execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecuteChanged"/> on the UI thread so every command invoker
            can requery to check if the command can execute.
            <remarks>Note that this will trigger the execution of <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecute(`0)"/> once for each invoker.</remarks>
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>        
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.Execute"/> and <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecute"/>.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <remarks><seealso cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecute"/> will always return true.</remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null"/>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null"/>.</exception>
            <param name="autoCanExecuteUpdating">Use this flag only if you can not invoke RaiseCanExecuteChanged</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecute">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.Execute">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the CompositeCommand can execute.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecuteChanged"/> on the UI thread so every command invoker
            can requery to check if the command can execute.
            <remarks>Note that this will trigger the execution of <see cref="M:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecute"/> once for each invoker.</remarks>
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.Commands.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>        
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CloseRequestEventArgs">
            <summary>
            This is used to send result parameters to a CloseRequest
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CloseRequestEventArgs.Result">
            <summary>
             Final result for ShowDialog
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel">
            <summary>
            Selects an element from the model in a new window.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.Collections.Generic.List{System.Object})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="selectableElements">
            List of existing elements, that are allowed to be selected. Can be null to specify that
            the is no such restriction needed and that all elements can be selected.
            </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.SubModel_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            React on sub model property changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.SetSelectedElement(System.Object)">
            <summary>
            Tries to set the selected elements to the given object. Not all sub viewmodels might be
            capable of setting a selection.
            </summary>
            <param name="element">Element to select.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.SelectElementTreeViewModel">
            <summary>
            Gets the select element tree vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.SelectElementSearchViewModel">
            <summary>
            Gets the select element search vm.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.IsSelectionValid">
            <summary>
            Gets or sets whether the current selection is valid or not.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SelectElementViewModel.SelectedElement">
            <summary>
            Gets  the selected element.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken">
            <summary>
            Subsription token returned from <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken.Equals(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SearchEvent">
            <summary>
            Event, requesting a search to be started using the given data.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEventArgs">
            <summary>
            Data for the ActiveViewChangedEvent.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseViewModel,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
            <param name="isActive">True if the view model is the current active view. False otherwise.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEventArgs.IsActive">
            <summary>
            Gets whether the view is the current active view or not.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo">
            <summary>
            Class hosting information about a relationship, that should be created.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramItemElementViewModel)">
            <summary>
            Constructor
            </summary>
            <param name="source">View model holding the source element.</param>
            <param name="target">View model holding the target element.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="source">View model holding the source element.</param>
            <param name="target">View model holding the target element.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.Source">
            <summary>
            Gets the view model that holds the source of the relationship, that is to be created.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.Target">
            <summary>
            Gets the view model that holds the target of the relationship, that is to be created.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.ProposedSourcePoint">
            <summary>
            Proposed source point for the link.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.ViewModelRelationshipCreationInfo.ProposedTargetPoint">
            <summary>
            Proposed target point for the link.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMType">
            <summary>
            Edge point vm type.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMType.Start">
            <summary>
            Start point.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMType.End">
            <summary>
            End point.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMType.Normal">
            <summary>
            Normal point.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide">
            <summary>
            Edge point vm side.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide.Left">
            <summary>
            Left side.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide.Top">
            <summary>
            Top side.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide.Right">
            <summary>
            Right side.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMSide.Bottom">
            <summary>
            Bottom side.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMOperation">
            <summary>
            Edge point vm operation.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMOperation.Move">
            <summary>
            Move operation.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMOperation.MoveVertical">
            <summary>
            Move vertical.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMOperation.MoveHorizontal">
            <summary>
            Move horizontal.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel">
            <summary>
            This is a view model for an edge point.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Diagrams.EdgePoint,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointVMType)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="edgePoint">Edge point.</param>
            <param name="edgePointType">EdgePointVMType.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.EdgePointType">
            <summary>
            Gets the edge point type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.EdgePoint">
            <summary>
            Gets the edge point.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.EdgePointSide">
            <summary>
            Gets or sets the edge point side.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.EdgePointOperation">
            <summary>
            Gets or set the edge point operation.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.X">
            <summary>
            Gets the x coordinate.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.Y">
            <summary>
            Gets the y coordinate.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.TranslateX">
            <summary>
            Gets or sets the translate x coordinate.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.TranslateY">
            <summary>
            Gets or sets the translate y coordinate.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.EdgePointViewModel.EdgeId">
            <summary>
            Gets the id of the edge point.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel">
            <summary>
            This class represents a specific item in the dependencies view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.DependencyItem)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="dependencyItem">The model element that is hosted by this view model.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.DependencyItem,System.Boolean)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="dependencyItem">The model element that is hosted by this view model.</param>
            <param name="bSubscribeToEvents">True if updates on elements name changes are needed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.NavigateToSource">
            <summary>
            Navigate to source model element
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.NavigateToTarget">
            <summary>
            Navigate to target model element
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.Category">
            <summary>
            Gets the dependency items category.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.DependencyItem">
            <summary>
            Gets the dependency item that is hosted by this view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.LinkElementName">
            <summary>
            Gets the element link name if it has one. Otherwise the type of the link is returned.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.SourceModelElementName">
            <summary>
            Gets the source model element's name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.TargetModelElementName">
            <summary>
            Gets the source model element's name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.DependencyItemViewModel.Number">
            <summary>
            Gets or sets the number of this item in the list.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo">
            <summary>
            Resize info struct.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo.WidthChange">
            <summary>
            Width change value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo.HeightChange">
            <summary>
            Height change value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo.LeftChange">
            <summary>
            X-Position change value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.DiagramItemsResizeInfo.TopChange">
            <summary>
            Y-Position change value.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRelativeCanvas">
            <summary>
            This is used as the panel in the DiagramDesignerRelativeItems control.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerRelativeCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Calculate the actual size because it is unknown otherwise, since we
            are using a canvas.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner">
            <summary>
            This class represents the global diagram surface of a diagram.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesigner">
            <summary>
            Interface describing a diagram designer.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesigner.GetCurrentMousePositionOnSelectedElement">
            <summary>
            Gets the current mouse position relative to the selected element.
            </summary>
            <returns>Mouse position relative to the selected element coordinates.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesigner.GetCurrentMousePosition">
            <summary>
            Gets the current mouse position relative to the diagram designer.
            </summary>
            <returns>Mouse position relative to the diagram designer coordinates.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.View.IDiagramDesigner.GetItemAtPosition(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD)">
            <summary>
            Gets the item that is directly under the mouse.
            </summary>
            <param name="position">Position.</param>
            <returns>Item under the mouse or null.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Notify view model of key down.
            </summary>
            <param name="e">The System.Windows.Input.KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Whenever context menu opens, verify if it has items. If not, disallow opening.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Whenever context menu closes, reset its items..
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Updates the clicked point value, which is always relative to the source of the click event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnPreviewDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Drag enter event: Taken to track mouse location, as 
            Mouse.GetPosition does not work properly in GetCurrentMousePosition
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.OnPreviewDragOver(System.Windows.DragEventArgs)">
            <summary>
            Drag over event: Taken to track mouse location, as 
            Mouse.GetPosition does not work properly in GetCurrentMousePosition
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.GetParentFromVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the parent object of the type ISelectable starting with the start dependency object.
            </summary>
            <param name="startObject">Dependency object to start the search from.</param>
            <returns>Parent of the specified type if found. Null otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.GetCurrentMousePosition">
            <summary>
            Gets the current mouse position relative to the diagram designer.
            </summary>
            <returns>Mouse position relative to the diagram designer coordinates.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.GetCurrentMousePositionOnSelectedElement">
            <summary>
            Gets the current mouse position relative to the selected element.
            </summary>
            <returns>Mouse position relative to the selected element coordinates.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.GetItemAtPosition(Tum.PDE.ToolFramework.Modeling.Diagrams.PointD)">
            <summary>
            Gets the item that is directly under the mouse.
            </summary>
            <param name="position">Position.</param>
            <returns>Item under the mouse or null.</returns>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.SelectedItemsProperty">
            <summary>
            Selected items property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.CreateRelationshipCommandProperty">
            <summary>
            Create relationship command property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.ContextMenuOptionsProperty">
            <summary>
            Context menu options property.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.ClickedPointProperty">
            <summary>
            Clicked point property.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.SelectionService">
            <summary>
            Gets the selection service, that is active for this diagram.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.SelectedItems">
            <summary>
            Property to notify of selected items.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.CreateRelationshipCommand">
            <summary>
            Gets or sets the create relationship command.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.ContextMenuOptions">
            <summary>
            Context menu options.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner.ClickedPoint">
            <summary>
            Clicked point.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore">
            <summary>
            Specific view model store. Stores view models to
            1. prevent stack overflows
            2. reuse view models where applicable.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.TryGetVM(System.String,System.Guid)">
            <summary>
            Tries to get a vm of a specific type hosting a specific element.
            </summary>
            <param name="type"></param>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.TryGetVM(System.String)">
            <summary>
            Tries to get a vm by the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.AddVM(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel,System.Guid)">
            <summary>
            Adds a vm.
            </summary>
            <param name="vm"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.RemoveVM(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel,System.Guid)">
            <summary>
            Removes a vm.
            </summary>
            <param name="vm"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.IsVMInUse(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel)">
            <summary>
            Verifies if a vm is still in use.
            </summary>
            <param name="vm"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.GetKey(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseSpecificModelElementViewModel)">
            <summary>
            Creates and returns a key for given vm.
            </summary>
            <param name="vm"></param>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.Mapping">
            <summary>
            Gets the mapping dictionary.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.SpecificViewModelStore.MappingElements">
            <summary>
            Gets the mapping elements dictionary.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.chkDoFindInResult_Content">
            <summary>
              Looks up a localized string similar to Do find in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.chkMatchCase_Content">
            <summary>
              Looks up a localized string similar to Match case.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.chkMatchWholeWord_Content">
            <summary>
              Looks up a localized string similar to Match whole word.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.grpFindInResult_Header">
            <summary>
              Looks up a localized string similar to Find in result.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.grpFindOptions_Header">
            <summary>
              Looks up a localized string similar to Find options.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.txtFindAll_Text">
            <summary>
              Looks up a localized string similar to Find all.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.txtFindCriteria_Text">
            <summary>
              Looks up a localized string similar to Find criteria:.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.txtFindWhat_Text">
            <summary>
              Looks up a localized string similar to Find what:.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.LocalResources.SearchWindowControl.txtFindWhere_Text">
            <summary>
              Looks up a localized string similar to Find where:.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource">
            <summary>
            Support for multi-threaded host visuals.
            </summary>
            <remarks>
            The original code can be found here: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            When overridden in a derived class, returns a visual target for the given source.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.Media.CompositionTarget"/> that is target for rendering the visual.
            </returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource.RootVisual">
            <summary>
            When overridden in a derived class, gets or sets the root visual being presented in the source.
            </summary>
            <value></value>
            <returns>
            The root visual.
            </returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Loaders.VisualTargetPresentationSource.IsDisposed">
            <summary>
            When overridden in a derived class, gets a value that declares whether the object is disposed.
            </summary>
            <value></value>
            <returns>true if the object is disposed; otherwise, false.
            </returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ExpanderHelper">
            <summary>
            Expander attached properties.
            </summary>
            <remarks>
            http://stackoverflow.com/questions/1070685/hidding-the-arrows-for-the-wpf-expander-control
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ExpanderHelper.GetHideExpanderArrow(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ExpanderHelper.SetHideExpanderArrow(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.ExpanderHelper.HideExpanderArrowProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideExpanderArrow.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultSortOrder">
            <summary>
            This enumeration defines possible sort order values for the result items view.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultSortOrder.Name">
            <summary>
            Sort by name.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultSortOrder.Reason">
            <summary>
            Search by find reason.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchResultSortOrder.Path">
            <summary>
            Search by embedding path.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel">
            <summary>
            This class represents a category in the property grid, which consists of a category name as well as
            a collection of editor view models.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,System.String,System.Collections.Generic.List{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorViewModel})">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="categoryName">Category name.</param>
            <param name="editorVms">Editors.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel.CategoryName">
            <summary>
            Name of the category.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridEditorCategoryViewModel.CategoryChildren">
            <summary>
            Children of the category. These are the actual editor view models.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.ContextMenuBarCreater">
            <summary>
            Context menu bar creater for property grid editors.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.ContextMenuBarCreater.CreateRibbonMenuBar(Fluent.Ribbon)">
            <summary>
            This method needs to overriden in the actual instances of this class to create contextual
            or regular ribbon bars if required.
            </summary>
            <param name="ribbonMenu">Main ribbon menu.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1"/> to invoke the <see cref="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.BackgroundEventSubscription`1.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Prism.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.ComponentModel.BackgroundWorker"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs">
            <summary>
            Data for the ShowViewModelRequestEvent.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="viewName">View model name.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseDockingViewModel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceViewModel">View model that triggers the event.</param>
            <param name="viewName">View model name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.DockingPaneStyle">
            <summary>
            Gets the docking pane style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.DockingPaneAnchorStyle">
            <summary>
            Gets the docking pane anchor style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkDeletedEvent">
            <summary>
            Notifies of a new element link beeing deleted to the domain model.
            
            An observer can either subscribe to the event in general (Warning, this will provide a notification for each 
            deleted domain element) or subscribe to a more specific event.
            </summary>
            <remarks>
            These events are treated as a weak events.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkDeletedEvent.Subscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs})">
            <summary>
            Subscribe to the event. The observer will be notified, whenever a element link of
            the given domain relationship type (which does include all descendants) with the specified 
            parent element is included in the specific event. 
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying when to notify the observer.</param>
            <param name="bSourceRole">Boolean value indicating source or target role.</param>
            <param name="parentElementId">ElementId of the parent element specifying when to notify.</param>
            <param name="action">Action to call on the observer.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkDeletedEvent.Publish(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Publish an event.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkDeletedEvent.PruneAndReturnStrategies(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Evaluates the given payload and retrieves active subscribers.
            </summary>
            <param name="args">Payload, that is beeing published.</param>
            <returns>List of actions to call.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ModelElementLinkDeletedEvent.Unsubscribe(Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs})">
            <summary>
            Unsubscribes from a specific event.
            </summary>
            <param name="domainRelationshipInfo">DomainRelationshipInfo specifying from what to unsubscribe.</param>
            <param name="bSourceRole">Boolean value indicating source or target role.</param>
            <param name="parentElementId">Parent element Id specifying from what to unsubscribe.</param>
            <param name="action">Action identifying what to unsubscribe.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementPopup">
            <summary>
            Interaction logic for SelectElementPopup.xaml
            </summary>
            <summary>
            SelectElementPopup
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementPopup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementPopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollViewer">
            <summary>
            Scrollviewer for the model tree view.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollViewer.#cctor">
            <summary>
            Static constructor to set style.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            Fix horizontal offset on scrolling changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.ModelTree.ModelTreeViewScrollViewer.OnApplyTemplate">
            <summary>
            Apply desired template.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGridEditors">
            <summary>
            Property grid editors control.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGridEditors.GetContainerForItemOverride">
            <summary>
            Creates a PropertyGridItem to use to display content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.PropertyGrid.PropertyGridEditors.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Method to find out if the given item is the desired container item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementWithRSTypePopup">
            <summary>
            Interaction logic for SelectElementWithRSTypePopup.xaml
            </summary>
            <summary>
            SelectElementWithRSTypePopup
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementWithRSTypePopup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Popups.SelectElementWithRSTypePopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem">
            <summary>
            View model used to filter out relationships on the depedencies diagram.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel,System.Guid)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagramVM">Diagram vm.</param>
            <param name="relationshipType">Type of the relationship.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesViewModel,System.String)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
            <param name="diagramVM">Diagram vm.</param>
            <param name="customFilterInformation">Filtering information.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.IsFiltered">
            <summary>
            Gets or sets the is filtered value.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.RelationshipType">
            <summary>
            Gets or sets the relationship type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.Title">
            <summary>
            Gets or sets the display title.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies.GraphicalDependenciesFilterItem.CustomFilterInformation">
            <summary>
            Gets or sets the filtering information.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesViewControl">
            <summary>
            Interaction logic for DependenciesViewControl.xaml
            </summary>
            <summary>
            DependenciesViewControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesViewControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesViewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetHighlightAdorner">
            <summary>
            Drop target highlight adorner class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetHighlightAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor.
            </summary>
            <param name="adornedElement"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetHighlightAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorners">
            <summary>
            Drop target adorners class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorners.Highlight">
            <summary>
            Gets the highlight class type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DropTargetAdorners.Insert">
            <summary>
            Gets the insert class type.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo">
            <summary>
            Drag info class.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.#ctor(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Constructor.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.Data">
            <summary>
            Gets or sets the dragged data.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.DragStartPosition">
            <summary>
            Gets the drag start position.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.Effects">
            <summary>
            Gets or sets the drag drop effects.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.MouseButton">
            <summary>
            Gets the pressed mouse buttons.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.SourceCollection">
            <summary>
            Gets the source elements.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.SourceItem">
            <summary>
            Gets the source item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.SourceItems">
            <summary>
            Gets the source items.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.VisualSource">
            <summary>
            Gets the visual source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.VisualSourceItem">
            <summary>
            Gets the visual source item.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragInfo.IsNotHandled">
            <summary>
            Extension: Property to allow for bubbling of events.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewContextMenuBehavior">
            <summary>
            Extends the context menu behavior to hide the context menu if no items are selected.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewContextMenuBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors.ListViewContextMenuBehavior.OnDetaching">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService">
            <summary>
            This class implements the IMessageBoxService for WPF purposes.
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService">
            <summary>
            This interface defines a interface that will allow 
            a ViewModel to show a messagebox
            </summary>
            <remarks>
            From the Cinch framework by Sacha Barber: http://cinch.codeplex.com/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowError(System.String)">
            <summary>
            Shows an error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowInformation(System.String)">
            <summary>
            Shows an information message
            </summary>
            <param name="message">The information message</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowWarning(System.String)">
            <summary>
            Shows an warning message
            </summary>
            <param name="message">The warning message</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowYesNo(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a Yes/No dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowYesNoCancel(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a Yes/No/Cancel dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.IMessageBoxService.ShowOkCancel(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a OK/Cancel dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowError(System.String)">
            <summary>
            Displays an error dialog with a given message.
            </summary>
            <param name="message">The message to be displayed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowInformation(System.String)">
            <summary>
            Displays an error dialog with a given message.
            </summary>
            <param name="message">The message to be displayed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowWarning(System.String)">
            <summary>
            Displays an error dialog with a given message.
            </summary>
            <param name="message">The message to be displayed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowYesNo(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a Yes/No dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowYesNoCancel(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a Yes/No/Cancel dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowOkCancel(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Displays a OK/Cancel dialog and returns the user input.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <returns>User selection.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowMessage(System.String,System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Shows a standard System.Windows.MessageBox using the parameters requested
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="heading">The heading to be displayed</param>
            <param name="icon">The icon to be displayed.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.ShowQuestionWithButton(System.String,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons)">
            <summary>
            Shows a standard System.Windows.MessageBox using the parameters requested
            but will return a translated result to enable adhere to the IMessageBoxService
            implementation required. 
            
            This abstraction allows for different frameworks to use the same ViewModels but supply
            alternative implementations of core service interfaces
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="icon">The icon to be displayed.</param>
            <param name="button"></param>
            <returns>CustomDialogResults results to use</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.GetImage(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons)">
            <summary>
            Translates a CustomDialogIcons into a standard WPF System.Windows.MessageBox MessageBoxImage.
            This abstraction allows for different frameworks to use the same ViewModels but supply
            alternative implementations of core service interfaces
            </summary>
            <param name="icon">The icon to be displayed.</param>
            <returns>A standard WPF System.Windows.MessageBox MessageBoxImage</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.GetButton(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons)">
            <summary>
            Translates a CustomDialogButtons into a standard WPF System.Windows.MessageBox MessageBoxButton.
            This abstraction allows for different frameworks to use the same ViewModels but supply
            alternative implementations of core service interfaces
            </summary>
            <param name="btn">The button type to be displayed.</param>
            <returns>A standard WPF System.Windows.MessageBox MessageBoxButton</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.MessageBoxService.GetResult(System.Windows.MessageBoxResult)">
            <summary>
            Translates a standard WPF System.Windows.MessageBox MessageBoxResult into a
            CustomDialogIcons.
            This abstraction allows for different frameworks to use the same ViewModels but supply
            alternative implementations of core service interfaces
            </summary>
            <param name="result">The standard WPF System.Windows.MessageBox MessageBoxResult</param>
            <returns>CustomDialogResults results to use</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons">
            <summary>
            Available Button options. 
            Abstracted to allow some level of UI Agnosticness
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons.OK">
            <summary>
            Ok button.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons.OKCancel">
            <summary>
            Ok, Cancel buttons.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons.YesNo">
            <summary>
            Yes, No buttons.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogButtons.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons">
            <summary>
            Available Icon options.
            Abstracted to allow some level of UI Agnosticness
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.None">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.Information">
            <summary>
            Information icon.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.Question">
            <summary>
            Question icon.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.Exclamation">
            <summary>
            Exclamation icon.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.Stop">
            <summary>
            Stop icon.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogIcons.Warning">
            <summary>
            Warning icon.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults">
            <summary>
            Available DialogResults options.
            Abstracted to allow some level of UI Agnosticness
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults.None">
            <summary>
            No dialog result.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults.OK">
            <summary>
            OK result.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults.Cancel">
            <summary>
            Cancel result.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults.Yes">
            <summary>
            Yes result.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services.CustomDialogResults.No">
            <summary>
            No result.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType">
            <summary>
            Helper class to search within elements of type SearchRSType.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.Search(System.String,System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct})">
            <summary>
            Function that can be used as a delegate to execute the search.
            </summary>
            <param name="textToSearch">Text to search for.</param>
            <param name="itemsToSearchWithin">List to search within.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.Sort(System.Collections.ObjectModel.ObservableCollection{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct})">
            <summary>
            Function that can be used to sort item list of type SearchElementWithRSTypeStruct.
            </summary>
            <param name="items">List to sort.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct">
            <summary>
            Struct to define elements that we want to search within. Those elements
            are defined via a model element VM and a specific relationship type.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="domainClassId">Domain class ID specifying the type of RS.</param>
            <param name="relationshipTypeDisplayName">Display name of RS.</param>
            <param name="relationshipShapeDisplayName">Display name of the RS shape.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct.RelationshipType">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct.RelationshipShapeType">
            <summary>
            Gets the relationship shape type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct.FullName">
            <summary>
            Gets the full name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchRSType.SearchRSTypeStruct.DomainClassId">
            <summary>
            Gets the domain class Id of the relationship.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType">
            <summary>
            Helper class to search within elements of type SearchElementWithRSTypeStruct.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.Search(System.String,System.Collections.Generic.IEnumerable{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct})">
            <summary>
            Function that can be used as a delegate to execute the search.
            </summary>
            <param name="textToSearch">Text to search for.</param>
            <param name="itemsToSearchWithin">List to search within.</param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.Sort(System.Collections.ObjectModel.ObservableCollection{Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct})">
            <summary>
            Function that can be used to sort item list of type SearchElementWithRSTypeStruct.
            </summary>
            <param name="items">List to sort.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct">
            <summary>
            Struct to define elements that we want to search within. Those elements
            are defined via a model element VM and a specific relationship type.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.BaseModelElementViewModel,System.String,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="elementVM"></param>
            <param name="relationshipType"></param>
            <param name="relationshipDomainClassId"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct.ElementViewModel">
            <summary>
            Gets the element VM.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct.RelationshipType">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.SearchElementWithRSType.SearchElementWithRSTypeStruct.RelationshipDomainClassId">
            <summary>
            Gets the relationship type.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Selection.GenericSearchDelegate`1">
            <summary>
            Delegate that can be used to search within an generic collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">Text to search for.</param>
            <param name="itemsToSearchWithin">Items to search within.</param>
            <returns>Found items collection.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria">
            <summary>
            This class represents a search criteria.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria.#ctor(Tum.PDE.ToolFramework.Modeling.SearchCriteriaEnum,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="criteria">Criteria.</param>
            <param name="displayName">Display name.</param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria.Criteria">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Search.SearchCriteria.Id">
            <summary>
            Gets the id of this search criteria.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid.PropertyGridViewModelConstructor`1">
            <summary>
            Represents the method that decides if the given element should be removed from the collection or not.
            </summary>
            <typeparam name="T">The type of the element. </typeparam>
            <returns>Created PropertyGridEditorViewModel for this element. False otherwise.</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEvent">
            <summary>
            Event, requesting a docking view model to be opened by the main view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ResetDataEvent">
            <summary>
            Event, that notifies that data needs to be reset. This should be sent within
            a transaction context.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentSavingEvent">
            <summary>
            Notifies during the saving process of an opened document.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.DocumentSavedEvent">
            <summary>
            Notifies after an opened document has been saved.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel">
            <summary>
            This class represents the main view model. A main view model hosts multiple sub views of type BaseDockingViewModel.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OnDocumentLoaded">
            <summary>
            Document loaded.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.PreInitialize">
            <summary>
            This is called to preinitialize the main vm. 
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.InitializeVM">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.Initialize">
            <summary>
            This method is used to initialize the view model and can be overriden for customization.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ReactOnActivePaneChanged(System.Object,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ActivePaneChangedEventArgs)">
            <summary>
            React on active window pane changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OnCultureInfoChanged(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CultureInfoChangedEventArgs)">
            <summary>
            Culture info changed
            </summary>
            <param name="args">Culture info changed event arguments.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ReactOnViewActivation(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ActiveViewChangedEventArgs)">
            <summary>
            Called whenver a subview becomes active. This is used to track what subview is currently active.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OpenViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.OpenViewModelEventArgs)">
            <summary>
            Reacts on the OpenViewModel event.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.ShowViewModelRequestEventArgs)">
            <summary>
            Reacts on ShowViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.CloseViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.CloseViewModelRequestEventArgs)">
            <summary>
            React on CloseViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.BringtToFrontViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.BringToFrontViewModelRequestEventArgs)">
            <summary>
            React on ShowViewModelRequestEvent.
            </summary>
            <param name="args">Event data.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowPluginIfShownBefore(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface.BaseDiagramSurfaceViewModel)">
            <summary>
            Show plugin if it was shown before (layout manager stores the information).
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.BeforeSwitchContexts(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel)">
            <summary>
            This method is called from the SwitchContexts method before a switch occurs.
            </summary>
            <param name="newContextVM">New model context vm.</param>
            <param name="oldContextVM">Old model context vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.AfterSwitchContexts(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel,Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelContextViewModel)">
            <summary>
            This method is called from the SwitchContexts method after a switch occurs.
            </summary>
            <param name="newContextVM">New model context vm.</param>
            <param name="oldContextVM">Old model context vm.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.NewModelCommandExecuted">
            <summary>
            New command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OpenModelCommandExecuted">
            <summary>
            Open command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OpenModel(System.String)">
            <summary>
            Open model.
            </summary>
            <param name="fileName">File to open.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveModelCommandExecuted">
            <summary>
            Save command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveModelCommandCanExecute">
            <summary>
            Save command can execute.
            </summary>
            <returns>True if the save command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveAsModelCommandExecuted">
            <summary>
            Save As command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveAsModelCommandCanExecute">
            <summary>
            Save as command can execute.
            </summary>
            <returns>True if the save as command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.CloseModelCommandExecuted">
            <summary>
            Close command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.CloseModelCommandExecute">
            <summary>
            Close model command executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.CloseModelCommandCanExecute">
            <summary>
            Close command can execute.
            </summary>
            <returns>True if the close command can be executed. False otherwise.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowModelTreeCommandExecuted">
            <summary>
            ShowModelTreeview command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowPropertiesCommandExecuted">
            <summary>
            ShowProperties command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowDependenciesCommandExecuted">
            <summary>
            ShowProperties command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowErrorListCommandExecuted">
            <summary>
            ShowErrorList command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowDiagramSurfaceCommandCommandExecuted">
            <summary>
            ShowDiagramSurface command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.PluginInformationCommandExecuted">
            <summary>
            Navigate forward command executed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OnExit">
            <summary>
            Called when the application exists.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OnLayoutManagerInitialized(System.EventArgs)">
            <summary>
            Called after the layout manager has been initialized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SelectedModelContextViewModel">
            <summary>
            Gets the selected model context VM.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ModelTreeModel">
            <summary>
            Gets or sets the view model used for the model tree.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ErrorListModel">
            <summary>
            Gets or sets the view model used for the error list.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.PropertyGridModel">
            <summary>
            Gets or sets the view model used for the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.DependenciesModel">
            <summary>
            Gets or sets the view model used to manage dependencies.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SearchModel">
            <summary>
            Gets or sets the view model used for searching the domain model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.MRUFilesViewModel">
            <summary>
            Gets the mru files view model.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.Ribbon">
            <summary>
            Gets or sets the main ribbon menu.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.LayoutManager">
            <summary>
            Gets or sets the layout docking manager.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.NewModelCommand">
            <summary>
            New command, used to create a new document.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.OpenModelCommand">
            <summary>
            New command, used to open an existing document.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveModelCommand">
            <summary>
            New command, used to save an opened document.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.SaveAsModelCommand">
            <summary>
            New command, used to save an opened document to a new file.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.CloseModelCommand">
            <summary>
            New command, used to close an opened document.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowModelTreeCommand">
            <summary>
            ShowModelTreeview command, used to show the model tree docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowPropertiesCommand">
            <summary>
            ShowProperties command, used to show the properties docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowDependenciesCommand">
            <summary>
            ShowDependencies command, used to show the dependencies docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowErrorListCommand">
            <summary>
            ShowErrorList command, used to show the error list docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.ShowDiagramSurfaceCommand">
            <summary>
            ShowDiagramSurface command, used to show the default diagram surface docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.PluginInformationCommand">
            <summary>
            PluginInformationCommand.
            </summary>
        </member>
        <member name="E:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainViewModel.LayoutManagerInitialized">
            <summary>
            Fires after the layout manager has been initialized.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel">
            <summary>
            Main view model to display dependencies.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Constuctor.
            </summary>
            <param name="viewModelStore">The store this view model belongs to.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.Initialize">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.ReactOnViewSelection(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events.SelectionChangedEventArgs)">
            <summary>
            Callback from SelectionChangedEvent. 
            Executes UpdatePropertyGrid asynchronously on the thread Dispatcher.Current is associated with.
            </summary>
            <param name="eventArgs">SelectionChangedEventArgs.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.UpdateDependenciesVM">
            <summary>
            Updates the dependencies vm, based on SelectedItemsCollection.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.OnReset">
            <summary>
            Reset view model.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.OnDispose">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.OnVisibilityChanged(System.Boolean)">
            <summary>
            Visibility changed.
            </summary>
            <param name="bVisible"></param>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.DockingPaneName">
            <summary>
            Unique name of the property grid docking window.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.DockingPaneTitle">
            <summary>
            Title of the docking windo.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.SelectedItemsCollection">
            <summary>
            Gets the currently selected items in the property grid.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.MainDependenciesViewModel.DependenciesViewModel">
            <summary>
            Gets the dependencies view model.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Search.SearchModusConverter">
            <summary>
            Value converter or the search modus property.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Search.SearchModusConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from SearchModus to int.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Search.SearchModusConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from integer value to SearchModus-Value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemsContainerStyleSelector">
            <summary>
            Style selector for the context menu items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemsContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects a style based on the current item.
            </summary>
            <param name="item">Item</param>
            <param name="container">Container</param>
            <returns>Style or null.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemsContainerStyleSelector.ItemStyle">
            <summary>
            Normal menu item style.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesignerItemsContainerStyleSelector.LinkStyle">
            <summary>
            Separator menu item style.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner">
            <summary>
            Diagram connector adorners are used to create the actual relationships between diagram items.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.#ctor(Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramDesigner,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnector,System.Windows.Point)">
            <summary>
            Constructor
            </summary>
            <param name="designer">Diagram designer.</param>
            <param name="sourceConnector">Source item of the relationship.</param>
            <param name="startPoint">Start point.</param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            See if we have found a suitable item to create a relationship during movement as long a mouse is pressed. Release mouse otherwise.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Create relationship if possible. Release mouse afterwards.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render the connector adorner.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.GetPathGeometry(System.Windows.Point)">
            <summary>
            Updates the path geometry.
            </summary>
            <param name="position">Target position.</param>
            <returns>Calculates path geometry.</returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface.DiagramConnectorAdorner.HitTesting(System.Windows.Point)">
            <summary>
            Hit testing.
            </summary>
            <param name="hitPoint">Location to do a hit test at.</param>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension">
            <summary>
            Based on Christian Moser's implementation:
            http://www.wpftutorial.net/LocalizeMarkupExtension.html
            
            ResExtension markup extension returns localized values from a Resources Manager     
            
            To use:
              * in App.xaml.cs set the resource assembly and default resource manager
                ResExtension.InitializeResExtension(Assembly.GetExecutingAssembly(),WpfClickOnce.Properties.Resources.ResourceManager);
              * Make sure you register the namespace of this extension in the document header
                xmlns:local="http://www.west-wind.com/WpfControls"
                or
                xmlns:local="clr-namespace:Westwind.Wpf.Controls,assembly=WpfControls"    
              * Embed the extension as follows:
                Content="{local:Res Id=HelloWorld,Default=Hello World}"   // gets from Resources
                Content="{local:Res Id=HelloWorld,Default=Hello World,ResourceSet=WpfLocalizationResx.ResxResource,Format=You said: \{0\}"    
                in addition you can pass Format (string.Format() string) and Convert (WPF Type Converter) as parameters
              * Use Default values to ensure the designer displays correct content
              * If you want live Resource values (rather than default values) copy this MarkupExtension
                into your WPF project. It'll automatically pick up the default Resx resourcemanager and
                startup assembly.
                
            This extension requires that you have a Properties.Resources object defined
            in order to find the default resource set, and assembly.
            
            NOTE:
            THIS MARKUP EXTENSION MUST BE PLACED IN THE SAME PROJECT AS THE RESOURCES YOU ARE TRYING
            IF YOU WANT TO SEE LIVE RESOURCE BINDINGS IN THE DESIGNER RATHER THAN DEFAULT VALUES.
            IF YOU LEAVE IT IN AN EXTERNAL ASSEMBLY DEFAULT VALUES WILL BE USED AND IF THEY ARE 
            MISSING BLANKS WILL BE RENDERED IN THE DESIGNER.
            
            I've been unable to find a solution how to get access to the default assembly via code
            as the designer doesn't load App.Xaml nor provides a normal execution context. It also
            doesn't provide Parent properties on controls. If you know of a way to get a reference
            to the startup assembly or even the parent page from a control instance please contact me.    
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension._targetObject">
            <summary>
            Caches the depending target object
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension._targetProperty">
            <summary>
            Caches the depending target property
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension._typeConverter">
            <summary>
            Caches the resolved default type converter
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension._propertyInfo">
            <summary>
            internally cached type that we are bound to when 
            binding using Static
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension._serviceProvider">
            <summary>
            Cache the ServiceProvider
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.UpdateTarget">
            <summary>
            Updates the target explicitly so we can update when culture changed.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.#ctor(System.String)">
            <summary>
            Allow calling the extension with a default parameter (id).
            Content="{local:Res HelloWorld}"
            </summary>
            <param name="id">The key that specifies a localization </param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            The core method to provide a localized value.
            
            Note the value can also be a non-string value to set non-string properties
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.ProvideValueInternal">
            <summary>
            Internal value retrieval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.FindDefaultResourceAssembly">
            <summary>
            This method tries to find the assembly of resources and the strongly 
            typed Resource class in a project so the designer works properly.
            
            It's recommended your application ALWAYS explicitly initializes the
            DefaultResourceAssembly and DefaultResourceManager in LocalizationSettings.
            
            When running in the designer this code tries to find 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Id">
            <summary>
            The ResourceId to retrieve
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Static">
            <summary>
            A static value expression like props:Resources.HelloWorld in the 
            same format as used in the x:Static extension. This uses the
            strongly typed resources but avoids any of the lookups to find
            the resource manager.
            
            When using this syntax to point at strongly typed resources
            you don't need to specify a ResourceSet or Assembly because it
            these are explicitly tied to the strongly typed resource.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.ResourceSet">
            <summary>
            Optional Resource Set Name. If not provided it's
            assumed you want to access the global Resources
            resource set in Properties.Resources
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Default">
            <summary>
            A default value that is returned when the the resource
            cannot be resolved. Also returned in the designer if
            there are no resources available.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Format">
            <summary>
            A string.Format format string that is applied.
            Note when provided the result value is always 
            converted into a string.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Converter">
            <summary>
            Allows to specify a custom Value Converter using standard WPF syntax.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Localization.ResExtension.Assembly">
            <summary>
            Optional assembly name - use this if you are using
            this component in more than one assembly to uniquely
            identify the resource assembly
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesControl">
            <summary>
            Interaction logic for DependenciesControl.xaml
            </summary>
            <summary>
            DependenciesControl
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DependenciesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.EventHandlerGenerator">
            <summary>
            Generates delegates according to the specified signature on runtime
            </summary>
            <remarks>
            Source: http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.EventHandlerGenerator.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Generates a delegate with a matching signature of the supplied eventHandlerType
            This method only supports Events that have a delegate of type void
            </summary>
            <param name="eventHandlerType">The delegate type to wrap. Note that this must always be a void delegate</param>
            <param name="methodToInvoke">The method to invoke</param>
            <param name="methodInvoker">The object where the method resides</param>
            <returns>Returns a delegate with the same signature as eventHandlerType that calls the methodToInvoke inside</returns>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop">
            <summary>
            This class provides drag and drop behavior.
            </summary>
            <remarks>
            Source: http://www.codeproject.com/KB/WPF/gong-wpf-dragdrop-ii.aspx
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.GetDragAdornerTemplate(System.Windows.UIElement)">
            <summary>
            Get drag adorner template.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.SetDragAdornerTemplate(System.Windows.UIElement,System.Windows.DataTemplate)">
            <summary>
            Set drag adorner template.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.GetIsDragSource(System.Windows.UIElement)">
            <summary>
            Get is drag source.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.SetIsDragSource(System.Windows.UIElement,System.Boolean)">
            <summary>
            Set is drag source.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.GetIsDropTarget(System.Windows.UIElement)">
            <summary>
            Get is drop target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.SetIsDropTarget(System.Windows.UIElement,System.Boolean)">
            <summary>
            Set is drop target.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.GetDragHandler(System.Windows.UIElement)">
            <summary>
            Get drag handler.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.SetDragHandler(System.Windows.UIElement,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDragSource)">
            <summary>
            Set drag handler.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.GetDropHandler(System.Windows.UIElement)">
            <summary>
            Get drop handler.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.SetDropHandler(System.Windows.UIElement,Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.IDropTarget)">
            <summary>
            Set drop handler.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.DragAdornerTemplateProperty">
            <summary>
            Drag adorner template.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.DragHandlerProperty">
            <summary>
            Drag handler.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.DropHandlerProperty">
            <summary>
            Drop handler.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.IsDragSourceProperty">
            <summary>
            Is drag source.
            </summary>
        </member>
        <member name="F:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.IsDropTargetProperty">
            <summary>
            Is drop target.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.DefaultDragHandler">
            <summary>
            Default drag handler.
            </summary>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Attached.DragDrop.DragDrop.DefaultDropHandler">
            <summary>
            Default drop handler.
            </summary>
        </member>
        <member name="T:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IViewModelPlugin">
            <summary>
            Advanced Plugin-Interface to provide view model plugins.
            </summary>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IViewModelPlugin.GetViewModel(Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data.ViewModelStore)">
            <summary>
            Gets a diagram surface view model, that represents the plugins functions.
            </summary>
            <param name="store">View model store.</param>
            <returns>Diagram surface view model.</returns>
            <remarks>
            Ribbon bars can be created by overriding the CreateRibbonMenu method in the diagram surface view model.
            </remarks>
        </member>
        <member name="M:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IViewModelPlugin.GetViewModelRessourceDictionary">
            <summary>
            Gets the resource dictionary, which contains the data template to visualize the view model plugin.
            </summary>
            <returns>Resource dictionary.</returns>
        </member>
        <member name="P:Tum.PDE.ToolFramework.Modeling.Visualization.Contracts.IViewModelPlugin.ModelContext">
            <summary>
            Gets the model context this plugin should extend.
            </summary>
            <remarks>
            If this value is null, this plugin is considered for every context in the model.
            </remarks>
        </member>
    </members>
</doc>
