//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace Tum.PDE.LanguageDSL
{
/// <summary>
	/// Class which provides names and display names for domain classes as well as methods to create names for new domain classes.
	/// </summary>
	public partial class LanguageDSLElementNameProvider
	{
		#region Singleton Instance
		private static LanguageDSLElementNameProvider elementNameProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static LanguageDSLElementNameProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementNameProvider == null )
				{
					elementNameProvider = new LanguageDSLElementNameProvider();
				}
				
				return elementNameProvider;
            }
        }
		
		private LanguageDSLElementNameProvider()
		{
		}
        #endregion
		
		#region Methods
        /// <summary>
        /// Verifies if a given modelElement has a name property or not.
        /// </summary>
        /// <param name="modelElement">ModelElement to verify.</param>
        /// <returns>
        /// True if the given model element has a property marked with "IsElementName" set to true. False otherwise.
        /// </returns>
        public bool HasName(DslModeling::ModelElement modelElement)
		{
			if( modelElement is global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ShapeClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ModalDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ReferenceRelationship )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.EmbeddingRelationship )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationDomainClassElement )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.RelationshipShapeClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelContext )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationElementClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificElementsDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRelationship )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.AttributedDomainElement )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternModelContext )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.LibraryModelContext )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DependencyDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ChildlessDiagram )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseModelContext )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.GeneratedDomainElement )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRole )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.CreditItem )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModel )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.InformationItem )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainProperty )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.NamedDomainElement )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainEnumeration )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternalType )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerDiagramClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.EnumerationLiteral )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClass )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainType )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.LinkItem )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModelLibrary )
				return true;
			if( modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor )
				return true;

			return false;
		}

        /// <summary>
        /// Gets the element name from the property that is marked as "IsElementName".
        /// </summary>
        /// <param name="modelElement">Domain class to get the name for.</param>
        /// <returns>Name of the domain class as string if found. Null otherwise.</returns>
        public string GetName(DslModeling::ModelElement modelElement)
		{
			if( modelElement is global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ShapeClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.ShapeClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ModalDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.ModalDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ReferenceRelationship )
				return (modelElement as global::Tum.PDE.LanguageDSL.ReferenceRelationship).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.EmbeddingRelationship )
				return (modelElement as global::Tum.PDE.LanguageDSL.EmbeddingRelationship).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationDomainClassElement )
				return (modelElement as global::Tum.PDE.LanguageDSL.PresentationDomainClassElement).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.RelationshipShapeClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.RelationshipShapeClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelContext )
				return (modelElement as global::Tum.PDE.LanguageDSL.ModelContext).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationElementClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.PresentationElementClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificElementsDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.SpecificElementsDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRelationship )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainRelationship).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly )
				return (modelElement as global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.AttributedDomainElement )
				return (modelElement as global::Tum.PDE.LanguageDSL.AttributedDomainElement).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly )
				return (modelElement as global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternModelContext )
				return (modelElement as global::Tum.PDE.LanguageDSL.ExternModelContext).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.LibraryModelContext )
				return (modelElement as global::Tum.PDE.LanguageDSL.LibraryModelContext).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DependencyDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.DependencyDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ChildlessDiagram )
				return (modelElement as global::Tum.PDE.LanguageDSL.ChildlessDiagram).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseModelContext )
				return (modelElement as global::Tum.PDE.LanguageDSL.BaseModelContext).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.GeneratedDomainElement )
				return (modelElement as global::Tum.PDE.LanguageDSL.GeneratedDomainElement).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRole )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainRole).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.CreditItem )
				return (modelElement as global::Tum.PDE.LanguageDSL.CreditItem).Title;
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModel )
				return (modelElement as global::Tum.PDE.LanguageDSL.MetaModel).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.InformationItem )
				return (modelElement as global::Tum.PDE.LanguageDSL.InformationItem).Title;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainProperty )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainProperty).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.NamedDomainElement )
				return (modelElement as global::Tum.PDE.LanguageDSL.NamedDomainElement).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.TemplatedDiagramClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainEnumeration )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainEnumeration).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternalType )
				return (modelElement as global::Tum.PDE.LanguageDSL.ExternalType).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerDiagramClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.DesignerDiagramClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.EnumerationLiteral )
				return (modelElement as global::Tum.PDE.LanguageDSL.EnumerationLiteral).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClass )
				return (modelElement as global::Tum.PDE.LanguageDSL.DiagramClass).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainType )
				return (modelElement as global::Tum.PDE.LanguageDSL.DomainType).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.LinkItem )
				return (modelElement as global::Tum.PDE.LanguageDSL.LinkItem).Title;
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModelLibrary )
				return (modelElement as global::Tum.PDE.LanguageDSL.MetaModelLibrary).Name;
			if( modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor )
				return (modelElement as global::Tum.PDE.LanguageDSL.PropertyGridEditor).Name;
		
			return null;
		}
		
		/// <summary>
        /// Gets the name property info for a given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the name property info for.</param>
        /// <returns>DomainPropertyInfo for the name property if found. Null otherwise.</returns>
        public DslModeling::DomainPropertyInfo GetNamePropertyInfo(DslModeling::ModelElement modelElement)
		{
			if( modelElement is global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ShapeClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ShapeClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModalDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ModalDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ReferenceRelationship )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ReferenceRelationship.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.EmbeddingRelationship )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.EmbeddingRelationship.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationDomainClassElement )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.RelationshipShapeClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.RelationshipShapeClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelContext )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ModelContext.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationElementClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.PresentationElementClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificElementsDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRelationship )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainRelationship.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.AttributedDomainElement )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.AttributedDomainElement.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternModelContext )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ExternModelContext.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.LibraryModelContext )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.LibraryModelContext.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DependencyDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DependencyDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ChildlessDiagram )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ChildlessDiagram.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseModelContext )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.BaseModelContext.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.GeneratedDomainElement )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.GeneratedDomainElement.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRole )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainRole.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.CreditItem )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.CreditItem.TitleDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModel )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.MetaModel.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.InformationItem )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.InformationItem.TitleDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainProperty )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainProperty.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.NamedDomainElement )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.NamedDomainElement.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.TemplatedDiagramClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainEnumeration )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainEnumeration.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ExternalType )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.ExternalType.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DesignerDiagramClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DesignerDiagramClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.EnumerationLiteral )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.EnumerationLiteral.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClass )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DiagramClass.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainType )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.DomainType.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.LinkItem )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.LinkItem.TitleDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModelLibrary )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.MetaModelLibrary.NameDomainPropertyId);
			if( modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(global::Tum.PDE.LanguageDSL.PropertyGridEditor.NameDomainPropertyId);
		
			return null;
		}
		#endregion
	}
	
	/// <summary>
	/// Class which provides type names and type display names for domain classes.
	/// </summary>
	public partial class LanguageDSLElementTypeProvider
    {
		#region Singleton Instance
		private static LanguageDSLElementTypeProvider elementTypeProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static LanguageDSLElementTypeProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementTypeProvider == null )
				{
					elementTypeProvider = new LanguageDSLElementTypeProvider();
				}
				
				return elementTypeProvider;
            }
        }
		
		private LanguageDSLElementTypeProvider()
		{
			Initialize();
		}
        #endregion
		
		#region Fields
        private static readonly System.Collections.Generic.Dictionary<System.Guid, System.Type> domainClassToTypeDictionary = new System.Collections.Generic.Dictionary<System.Guid,System.Type>();
		private static readonly System.Collections.Generic.Dictionary<System.Type, System.Guid> typeToDomainClassDictionary = new System.Collections.Generic.Dictionary<System.Type, System.Guid>();
        private static readonly System.Collections.Generic.Dictionary<System.Guid, string> domainClassToNameDictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
        private static readonly System.Collections.Generic.Dictionary<System.Guid, string> domainClassToNameRSStringDictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
		#endregion
		
		#region Initialize
		/// <summary>
        /// Initializes dictionaries for lookup.
        /// </summary>
		private void Initialize()
		{
			#region DomainClassToTypeDictionary
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ModalDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RelationshipShapeClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationElementClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.PresentationElementClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.AttributedDomainElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ExternModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LibraryModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DependencyDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DependencyDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ChildlessDiagram.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ChildlessDiagram));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainProperty.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainProperty));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedIdProperty.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedIdProperty));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.BaseModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.BaseModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RootDiagramNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RootDiagramNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RootNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RootNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.InheritanceNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.InheritanceNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.GeneratedDomainElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.GeneratedDomainElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRole.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRole));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.CreditItem.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.CreditItem));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClassNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.InformationItem.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.InformationItem));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainProperty.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainProperty));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ExternViewContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.NamedDomainElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.NamedDomainElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationAttributeElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationAttributeElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumeration.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainEnumeration));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ExternalType.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ExternalType));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeRelationshipNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRole.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRole));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EnumerationLiteral.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EnumerationLiteral));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTree.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ModelTree));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramTreeNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.FurtherInformation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramClassView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainType.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainType));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LinkItem.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LinkItem));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibrary.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelLibrary));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.Credits.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.Credits));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.AdditionalInformation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.PropertyGridEditor.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.PropertyGridEditor));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTreeNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ModelTreeNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.BaseViewContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.BaseViewContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.BaseMetaModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.BaseMetaModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.Validation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.Validation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.View.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.View));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.CreditsHasCreditItems));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationModelHasChildren));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationClassHasProperties));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasModelTree.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewHasModelTree));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasView.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasView));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasViewContexts.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ViewHasViewContexts));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasValidation.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.MetaModelHasValidation));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes));
			domainClassToTypeDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DomainClassId, typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes));
			#endregion
			
			#region TypeToDomainClassDictionary
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass), global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClass), global::Tum.PDE.LanguageDSL.ShapeClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ModalDiagram), global::Tum.PDE.LanguageDSL.ModalDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceRelationship), global::Tum.PDE.LanguageDSL.ReferenceRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingRelationship), global::Tum.PDE.LanguageDSL.EmbeddingRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement), global::Tum.PDE.LanguageDSL.PresentationDomainClassElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RelationshipShapeClass), global::Tum.PDE.LanguageDSL.RelationshipShapeClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ModelContext), global::Tum.PDE.LanguageDSL.ModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.PresentationElementClass), global::Tum.PDE.LanguageDSL.PresentationElementClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram), global::Tum.PDE.LanguageDSL.SpecificElementsDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRelationship), global::Tum.PDE.LanguageDSL.DomainRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainClass), global::Tum.PDE.LanguageDSL.DomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly), global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship), global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainModel), global::Tum.PDE.LanguageDSL.SerializedDomainModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.AttributedDomainElement), global::Tum.PDE.LanguageDSL.AttributedDomainElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram), global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly), global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship), global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram), global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram), global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ExternModelContext), global::Tum.PDE.LanguageDSL.ExternModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LibraryModelContext), global::Tum.PDE.LanguageDSL.LibraryModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DependencyDiagram), global::Tum.PDE.LanguageDSL.DependencyDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ChildlessDiagram), global::Tum.PDE.LanguageDSL.ChildlessDiagram.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainClass), global::Tum.PDE.LanguageDSL.SerializedDomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainProperty), global::Tum.PDE.LanguageDSL.SerializedDomainProperty.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedIdProperty), global::Tum.PDE.LanguageDSL.SerializedIdProperty.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedRelationship), global::Tum.PDE.LanguageDSL.SerializedRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.BaseModelContext), global::Tum.PDE.LanguageDSL.BaseModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RootDiagramNode), global::Tum.PDE.LanguageDSL.RootDiagramNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RootNode), global::Tum.PDE.LanguageDSL.RootNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.InheritanceNode), global::Tum.PDE.LanguageDSL.InheritanceNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceNode), global::Tum.PDE.LanguageDSL.ReferenceNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.GeneratedDomainElement), global::Tum.PDE.LanguageDSL.GeneratedDomainElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingNode), global::Tum.PDE.LanguageDSL.EmbeddingNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRole), global::Tum.PDE.LanguageDSL.DomainRole.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewContext), global::Tum.PDE.LanguageDSL.ViewContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.CreditItem), global::Tum.PDE.LanguageDSL.CreditItem.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClassNode), global::Tum.PDE.LanguageDSL.ShapeClassNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModel), global::Tum.PDE.LanguageDSL.MetaModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.InformationItem), global::Tum.PDE.LanguageDSL.InformationItem.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNode), global::Tum.PDE.LanguageDSL.ReferenceRSNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNode), global::Tum.PDE.LanguageDSL.EmbeddingRSNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNode), global::Tum.PDE.LanguageDSL.TreeNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainProperty), global::Tum.PDE.LanguageDSL.DomainProperty.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ExternViewContext), global::Tum.PDE.LanguageDSL.ExternViewContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.NamedDomainElement), global::Tum.PDE.LanguageDSL.NamedDomainElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass), global::Tum.PDE.LanguageDSL.TemplatedDiagramClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationClass), global::Tum.PDE.LanguageDSL.SerializationClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode), global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationAttributeElement), global::Tum.PDE.LanguageDSL.SerializationAttributeElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainEnumeration), global::Tum.PDE.LanguageDSL.DomainEnumeration.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ExternalType), global::Tum.PDE.LanguageDSL.ExternalType.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeRelationshipNode), global::Tum.PDE.LanguageDSL.ShapeRelationshipNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRole), global::Tum.PDE.LanguageDSL.SerializedDomainRole.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClass), global::Tum.PDE.LanguageDSL.DesignerDiagramClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EnumerationLiteral), global::Tum.PDE.LanguageDSL.EnumerationLiteral.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramClass), global::Tum.PDE.LanguageDSL.DiagramClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeView), global::Tum.PDE.LanguageDSL.DomainModelTreeView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ModelTree), global::Tum.PDE.LanguageDSL.ModelTree.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationModel), global::Tum.PDE.LanguageDSL.SerializationModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramTreeNode), global::Tum.PDE.LanguageDSL.DiagramTreeNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainElement), global::Tum.PDE.LanguageDSL.DomainElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.FurtherInformation), global::Tum.PDE.LanguageDSL.FurtherInformation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramClassView), global::Tum.PDE.LanguageDSL.DiagramClassView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationElement), global::Tum.PDE.LanguageDSL.SerializationElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainType), global::Tum.PDE.LanguageDSL.DomainType.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LinkItem), global::Tum.PDE.LanguageDSL.LinkItem.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelLibrary), global::Tum.PDE.LanguageDSL.MetaModelLibrary.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.Credits), global::Tum.PDE.LanguageDSL.Credits.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.AdditionalInformation), global::Tum.PDE.LanguageDSL.AdditionalInformation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramView), global::Tum.PDE.LanguageDSL.DiagramView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.PropertyGridEditor), global::Tum.PDE.LanguageDSL.PropertyGridEditor.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ModelTreeNode), global::Tum.PDE.LanguageDSL.ModelTreeNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.BaseViewContext), global::Tum.PDE.LanguageDSL.BaseViewContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.BaseMetaModel), global::Tum.PDE.LanguageDSL.BaseMetaModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.Validation), global::Tum.PDE.LanguageDSL.Validation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.View), global::Tum.PDE.LanguageDSL.View.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation), global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems), global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation), global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits), global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries), global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView), global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses), global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary), global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView), global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.CreditsHasCreditItems), global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass), global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship), global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty), global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles), global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship), global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationModelHasChildren), global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationClassHasProperties), global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty), global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass), global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses), global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses), global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape), global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewHasModelTree), global::Tum.PDE.LanguageDSL.ViewHasModelTree.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext), global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses), global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses), global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship), global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass), global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass), global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors), global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasView), global::Tum.PDE.LanguageDSL.MetaModelHasView.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor), global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships), global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext), global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor), global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext), global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel), global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts), global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ViewHasViewContexts), global::Tum.PDE.LanguageDSL.ViewHasViewContexts.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel), global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite), global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship), global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass), global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship), global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer), global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes), global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren), global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement), global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren), global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements), global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource), global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget), global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties), global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles), global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship), global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType), global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass), global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes), global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals), global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole), global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource), global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget), global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass), global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes), global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass), global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass), global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass), global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes), global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes), global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews), global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes), global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes), global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes), global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.MetaModelHasValidation), global::Tum.PDE.LanguageDSL.MetaModelHasValidation.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode), global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode), global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes), global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes), global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DomainClassId);
			typeToDomainClassDictionary.Add(typeof(global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes), global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DomainClassId);
			#endregion
			
			#region DomainClassToNameDictionary
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.DomainClassId, "MappingRelationshipShapeClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClass.DomainClassId, "ShapeClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagram.DomainClassId, "ModalDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRelationship.DomainClassId, "ReferenceRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRelationship.DomainClassId, "EmbeddingRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement.DomainClassId, "PresentationDomainClassElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClass.DomainClassId, "RelationshipShapeClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ModelContext.DomainClassId, "ModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationElementClass.DomainClassId, "PresentationElementClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram.DomainClassId, "SpecificElementsDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationship.DomainClassId, "DomainRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClass.DomainClassId, "DomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.DomainClassId, "RestorableTemplatedDiagramVMOnly");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship.DomainClassId, "SerializedReferenceRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainModel.DomainClassId, "SerializedDomainModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElement.DomainClassId, "AttributedDomainElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram.DomainClassId, "RestorableChildlessDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.DomainClassId, "TemplatedDiagramViewModelOnly");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship.DomainClassId, "SerializedEmbeddingRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram.DomainClassId, "SpecificDependencyDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.DomainClassId, "DesignerSurfaceDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContext.DomainClassId, "ExternModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContext.DomainClassId, "LibraryModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DependencyDiagram.DomainClassId, "DependencyDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ChildlessDiagram.DomainClassId, "ChildlessDiagram");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClass.DomainClassId, "SerializedDomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainProperty.DomainClassId, "SerializedDomainProperty");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedIdProperty.DomainClassId, "SerializedIdProperty");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationship.DomainClassId, "SerializedRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.BaseModelContext.DomainClassId, "BaseModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RootDiagramNode.DomainClassId, "RootDiagramNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RootNode.DomainClassId, "RootNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.InheritanceNode.DomainClassId, "InheritanceNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceNode.DomainClassId, "ReferenceNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.GeneratedDomainElement.DomainClassId, "GeneratedDomainElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingNode.DomainClassId, "EmbeddingNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRole.DomainClassId, "DomainRole");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContext.DomainClassId, "ViewContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.CreditItem.DomainClassId, "CreditItem");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNode.DomainClassId, "ShapeClassNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModel.DomainClassId, "MetaModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.InformationItem.DomainClassId, "InformationItem");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNode.DomainClassId, "ReferenceRSNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNode.DomainClassId, "EmbeddingRSNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNode.DomainClassId, "TreeNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainProperty.DomainClassId, "DomainProperty");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContext.DomainClassId, "ExternViewContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.NamedDomainElement.DomainClassId, "NamedDomainElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass.DomainClassId, "TemplatedDiagramClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClass.DomainClassId, "SerializationClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode.DomainClassId, "EmbeddingDiagramNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationAttributeElement.DomainClassId, "SerializationAttributeElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumeration.DomainClassId, "DomainEnumeration");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ExternalType.DomainClassId, "ExternalType");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNode.DomainClassId, "ShapeRelationshipNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRole.DomainClassId, "SerializedDomainRole");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClass.DomainClassId, "DesignerDiagramClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EnumerationLiteral.DomainClassId, "EnumerationLiteral");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClass.DomainClassId, "DiagramClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeView.DomainClassId, "DomainModelTreeView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTree.DomainClassId, "ModelTree");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModel.DomainClassId, "SerializationModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNode.DomainClassId, "DiagramTreeNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainElement.DomainClassId, "DomainElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformation.DomainClassId, "FurtherInformation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassView.DomainClassId, "DiagramClassView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationElement.DomainClassId, "SerializationElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainType.DomainClassId, "DomainType");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LinkItem.DomainClassId, "LinkItem");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibrary.DomainClassId, "MetaModelLibrary");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.Credits.DomainClassId, "Credits");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformation.DomainClassId, "AdditionalInformation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramView.DomainClassId, "DiagramView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.PropertyGridEditor.DomainClassId, "PropertyGridEditor");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTreeNode.DomainClassId, "ModelTreeNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.BaseViewContext.DomainClassId, "BaseViewContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.BaseMetaModel.DomainClassId, "BaseMetaModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.Validation.DomainClassId, "Validation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.View.DomainClassId, "View");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DomainClassId, "AdditionalInformationHasFurtherInformation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DomainClassId, "FurtherInformationHasInformationItems");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DomainClassId, "MetaModelHasAdditionalInformation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DomainClassId, "AdditionalInformationHasCredits");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DomainClassId, "MetaModelHasMetaModelLibraries");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DomainClassId, "ViewContextHasDiagramView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassId, "LibraryModelContextHasClasses");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DomainClassId, "MetaModelLibraryHasImportedLibrary");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainClassId, "ViewContextHasDomainModelTreeView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.DomainClassId, "CreditsHasCreditItems");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClassId, "SerializedDomainClassReferencesDomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DomainClassId, "SerializedEmbeddingRelationshipReferencesEmbeddingRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DomainClassId, "SerializationClassHasIdProperty");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DomainClassId, "SerializedRelationshipHasSerializedDomainRoles");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DomainClassId, "SerializedReferenceRelationshipReferencesReferenceRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.DomainClassId, "SerializationModelHasChildren");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.DomainClassId, "SerializationClassHasProperties");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainClassId, "SerializedDomainPropertyReferencesDomainProperty");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DomainClassId, "SerializedDomainRoleReferencesSerializationClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DomainClassId, "LibraryModelContextHasDiagramClasses");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DomainClassId, "DesignerDiagramClassReferencesImportedDiagramClasses");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DomainClassId, "ShapeClassReferencesBaseShape");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasModelTree.DomainClassId, "ViewHasModelTree");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DomainClassId, "ExternModelContextReferencesModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DomainClassId, "DesignerDiagramClassReferencesIncludedDiagramClasses");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClassId, "SpecificElementsDiagramReferencesDomainClasses");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainClassId, "RelationshipShapeClassReferencesReferenceRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClassId, "SpecificDependencyDiagramReferencesDomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClassId, "ModalDiagramReferencesDomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DomainClassId, "MetaModelHasPropertyGridEditors");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasView.DomainClassId, "MetaModelHasView");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainClassId, "DomainTypeReferencesPropertyGridEditor");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainClassId, "LibraryModelContextHasRelationships");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DomainClassId, "ViewContextReferencesModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainClassId, "DomainRoleReferencesCustomPropertyGridEditor");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DomainClassId, "ExternViewContextReferencesExternModelContext");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DomainClassId, "LibraryModelContextHasSerializationModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DomainClassId, "MetaModelHasModelContexts");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasViewContexts.DomainClassId, "ViewHasViewContexts");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DomainClassId, "SerializationModelHasSerializedDomainModel");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DomainClassId, "DomainRoleReferencesOpposite");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainClassId, "EmbeddingRSNodeReferencesRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DomainClassId, "DomainClassReferencesBaseClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DomainClassId, "DomainRelationshipReferencesBaseRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainClassId, "DomainRoleReferencesRolePlayer");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DomainClassId, "DiagramClassViewHasRootDiagramNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DomainClassId, "SerializationClassReferencesChildren");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DomainClassId, "TreeNodeReferencesDomainElement");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DomainClassId, "ShapeClassReferencesChildren");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DomainClassId, "DiagramClassHasPresentationElements");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DomainClassId, "DomainRelationshipReferencesSource");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DomainClassId, "DomainRelationshipReferencesTarget");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainClassId, "AttributedDomainElementHasProperties");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DomainClassId, "DomainRelationshipHasRoles");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DomainClassId, "ReferenceRSNodeReferencesReferenceRelationship");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainClassId, "DomainPropertyReferencesType");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DomainClassId, "DiagramClassViewReferencesDiagramClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainClassId, "MetaModelHasDomainTypes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainClassId, "DomainEnumerationHasLiterals");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainClassId, "SerializedDomainRoleReferencesDomainRole");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DomainClassId, "MappingRelationshipShapeClassReferencesSource");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DomainClassId, "MappingRelationshipShapeClassReferencesTarget");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DomainClassId, "DiagramTreeNodeReferencesPresentationElementClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DomainClassId, "EmbeddingDiagramNodeHasEmbeddingDiagramNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DomainClassId, "ShapeRelationshipNodeReferencesRelationshipShapeClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClassId, "ShapeClassReferencesDomainClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DomainClassId, "ShapeClassNodeReferencesShapeClass");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainClassId, "DomainModelTreeViewHasModelTreeNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DomainClassId, "ReferenceRSNodeReferencesShapeRelationshipNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DomainClassId, "DiagramViewHasDiagramClassViews");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainClassId, "DomainModelTreeViewReferencesRootNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DomainClassId, "TreeNodeReferencesEmbeddingRSNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DomainClassId, "SerializationClassReferencesAttributes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasValidation.DomainClassId, "MetaModelHasValidation");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DomainClassId, "EmbeddingRSNodeReferencesEmbeddingNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DomainClassId, "ReferenceRSNodeReferencesReferenceNode");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DomainClassId, "TreeNodeReferencesShapeClassNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DomainClassId, "TreeNodeReferencesInheritanceNodes");
			domainClassToNameDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DomainClassId, "TreeNodeReferencesReferenceRSNodes");
			#endregion			
			
			#region DomainClassToNameRSStringDictionary
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.DomainClassId, "Tum.PDE.LanguageDSL.MappingRelationshipShapeClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClass.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagram.DomainClassId, "Tum.PDE.LanguageDSL.ModalDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRelationship.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRelationship.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationDomainClassElement.DomainClassId, "Tum.PDE.LanguageDSL.PresentationDomainClassElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClass.DomainClassId, "Tum.PDE.LanguageDSL.RelationshipShapeClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ModelContext.DomainClassId, "Tum.PDE.LanguageDSL.ModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.PresentationElementClass.DomainClassId, "Tum.PDE.LanguageDSL.PresentationElementClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagram.DomainClassId, "Tum.PDE.LanguageDSL.SpecificElementsDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationship.DomainClassId, "Tum.PDE.LanguageDSL.DomainRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClass.DomainClassId, "Tum.PDE.LanguageDSL.DomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.DomainClassId, "Tum.PDE.LanguageDSL.RestorableTemplatedDiagramVMOnly.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship.DomainClassId, "Tum.PDE.LanguageDSL.SerializedReferenceRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainModel.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElement.DomainClassId, "Tum.PDE.LanguageDSL.AttributedDomainElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RestorableChildlessDiagram.DomainClassId, "Tum.PDE.LanguageDSL.RestorableChildlessDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.DomainClassId, "Tum.PDE.LanguageDSL.TemplatedDiagramViewModelOnly.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship.DomainClassId, "Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram.DomainClassId, "Tum.PDE.LanguageDSL.SpecificDependencyDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.DomainClassId, "Tum.PDE.LanguageDSL.DesignerSurfaceDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContext.DomainClassId, "Tum.PDE.LanguageDSL.ExternModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContext.DomainClassId, "Tum.PDE.LanguageDSL.LibraryModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DependencyDiagram.DomainClassId, "Tum.PDE.LanguageDSL.DependencyDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ChildlessDiagram.DomainClassId, "Tum.PDE.LanguageDSL.ChildlessDiagram.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClass.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainProperty.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainProperty.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedIdProperty.DomainClassId, "Tum.PDE.LanguageDSL.SerializedIdProperty.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationship.DomainClassId, "Tum.PDE.LanguageDSL.SerializedRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.BaseModelContext.DomainClassId, "Tum.PDE.LanguageDSL.BaseModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RootDiagramNode.DomainClassId, "Tum.PDE.LanguageDSL.RootDiagramNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RootNode.DomainClassId, "Tum.PDE.LanguageDSL.RootNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.InheritanceNode.DomainClassId, "Tum.PDE.LanguageDSL.InheritanceNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceNode.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.GeneratedDomainElement.DomainClassId, "Tum.PDE.LanguageDSL.GeneratedDomainElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingNode.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRole.DomainClassId, "Tum.PDE.LanguageDSL.DomainRole.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContext.DomainClassId, "Tum.PDE.LanguageDSL.ViewContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.CreditItem.DomainClassId, "Tum.PDE.LanguageDSL.CreditItem.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNode.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClassNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModel.DomainClassId, "Tum.PDE.LanguageDSL.MetaModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.InformationItem.DomainClassId, "Tum.PDE.LanguageDSL.InformationItem.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNode.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceRSNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNode.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingRSNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNode.DomainClassId, "Tum.PDE.LanguageDSL.TreeNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainProperty.DomainClassId, "Tum.PDE.LanguageDSL.DomainProperty.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContext.DomainClassId, "Tum.PDE.LanguageDSL.ExternViewContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.NamedDomainElement.DomainClassId, "Tum.PDE.LanguageDSL.NamedDomainElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TemplatedDiagramClass.DomainClassId, "Tum.PDE.LanguageDSL.TemplatedDiagramClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClass.DomainClassId, "Tum.PDE.LanguageDSL.SerializationClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingDiagramNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationAttributeElement.DomainClassId, "Tum.PDE.LanguageDSL.SerializationAttributeElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumeration.DomainClassId, "Tum.PDE.LanguageDSL.DomainEnumeration.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ExternalType.DomainClassId, "Tum.PDE.LanguageDSL.ExternalType.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNode.DomainClassId, "Tum.PDE.LanguageDSL.ShapeRelationshipNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRole.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainRole.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClass.DomainClassId, "Tum.PDE.LanguageDSL.DesignerDiagramClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EnumerationLiteral.DomainClassId, "Tum.PDE.LanguageDSL.EnumerationLiteral.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClass.DomainClassId, "Tum.PDE.LanguageDSL.DiagramClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeView.DomainClassId, "Tum.PDE.LanguageDSL.DomainModelTreeView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTree.DomainClassId, "Tum.PDE.LanguageDSL.ModelTree.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModel.DomainClassId, "Tum.PDE.LanguageDSL.SerializationModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNode.DomainClassId, "Tum.PDE.LanguageDSL.DiagramTreeNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainElement.DomainClassId, "Tum.PDE.LanguageDSL.DomainElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformation.DomainClassId, "Tum.PDE.LanguageDSL.FurtherInformation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassView.DomainClassId, "Tum.PDE.LanguageDSL.DiagramClassView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationElement.DomainClassId, "Tum.PDE.LanguageDSL.SerializationElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainType.DomainClassId, "Tum.PDE.LanguageDSL.DomainType.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LinkItem.DomainClassId, "Tum.PDE.LanguageDSL.LinkItem.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibrary.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelLibrary.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.Credits.DomainClassId, "Tum.PDE.LanguageDSL.Credits.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformation.DomainClassId, "Tum.PDE.LanguageDSL.AdditionalInformation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramView.DomainClassId, "Tum.PDE.LanguageDSL.DiagramView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.PropertyGridEditor.DomainClassId, "Tum.PDE.LanguageDSL.PropertyGridEditor.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ModelTreeNode.DomainClassId, "Tum.PDE.LanguageDSL.ModelTreeNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.BaseViewContext.DomainClassId, "Tum.PDE.LanguageDSL.BaseViewContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.BaseMetaModel.DomainClassId, "Tum.PDE.LanguageDSL.BaseMetaModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.Validation.DomainClassId, "Tum.PDE.LanguageDSL.Validation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.View.DomainClassId, "Tum.PDE.LanguageDSL.View.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DomainClassId, "Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DomainClassId, "Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DomainClassId, "Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DomainClassId, "Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassId, "Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainClassId, "Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.DomainClassId, "Tum.PDE.LanguageDSL.CreditsHasCreditItems.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DomainClassId, "Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DomainClassId, "Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DomainClassId, "Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DomainClassId, "Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.DomainClassId, "Tum.PDE.LanguageDSL.SerializationModelHasChildren.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.DomainClassId, "Tum.PDE.LanguageDSL.SerializationClassHasProperties.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DomainClassId, "Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DomainClassId, "Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasModelTree.DomainClassId, "Tum.PDE.LanguageDSL.ViewHasModelTree.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DomainClassId, "Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DomainClassId, "Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClassId, "Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainClassId, "Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClassId, "Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClassId, "Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasView.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasView.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainClassId, "Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainClassId, "Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DomainClassId, "Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainClassId, "Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DomainClassId, "Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DomainClassId, "Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ViewHasViewContexts.DomainClassId, "Tum.PDE.LanguageDSL.ViewHasViewContexts.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DomainClassId, "Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DomainClassId, "Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DomainClassId, "Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DomainClassId, "Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainClassId, "Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DomainClassId, "Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DomainClassId, "Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DomainClassId, "Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DomainClassId, "Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DomainClassId, "Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DomainClassId, "Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainClassId, "Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DomainClassId, "Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainClassId, "Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DomainClassId, "Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainClassId, "Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainClassId, "Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DomainClassId, "Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DomainClassId, "Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DomainClassId, "Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DomainClassId, "Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DomainClassId, "Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainClassId, "Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DomainClassId, "Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainClassId, "Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DomainClassId, "Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DomainClassId, "Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.MetaModelHasValidation.DomainClassId, "Tum.PDE.LanguageDSL.MetaModelHasValidation.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DomainClassId, "Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DomainClassId, "Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DomainClassId, "Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DomainClassId, "Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DisplayName");
			domainClassToNameRSStringDictionary.Add(global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DomainClassId, "Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DisplayName");
			#endregion						
			
		}
		#endregion
		
		#region Methods
		/// <summary>
        /// Get the name of type of the element as string.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the type for.</param>
        /// <returns>Type name as a string.</returns>
        /// <remarks>
        /// This is essentially equal to modelElement.GetType().Name. But as this
        /// is generated, we dont required to access the actual Type of the element to get its name.
        /// </remarks>
        public string GetTypeName(DslModeling::ModelElement modelElement)
        {
			if( modelElement == null )
				return "";
				
            return GetTypeName(modelElement.GetDomainClass().Id);
        }

        /// <summary>
        /// Gets the name of the type based on the given domain class Id.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Type name as a string.</returns>
        public string GetTypeName(System.Guid domainClassId)
        {
            string val = null;
            domainClassToNameDictionary.TryGetValue(domainClassId, out val);
            
            return val;
        }

        /// <summary>
        /// Get type of the element that is specified by the given domain class Id.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Type of the element.</returns>
        public System.Type GetTypeOfElement(System.Guid domainClassId)
        {
			System.Type val = null;
            domainClassToTypeDictionary.TryGetValue(domainClassId, out val);
            
            return val;
        }

        /// <summary>
        /// Get the display name of type of the element as string.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the type display name for.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(DslModeling::ModelElement modelElement)
        {
			if( modelElement == null )
				return "";
				
            return GetTypeDisplayName(modelElement.GetDomainClass().Id);
        }

        /// <summary>
        /// Get the display name of the given type.
        /// </summary>
        /// <param name="type">Type to get the display name for.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(System.Type type)
        {
            System.Guid val;
            typeToDomainClassDictionary.TryGetValue(type, out val);
            if( val != null )
                if( val != System.Guid.Empty )
                return GetTypeDisplayName(val);

            return null;
        }

        /// <summary>
        /// Get the display name of type that is specified by the given domain class Id as string.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(System.Guid domainClassId)
        {
			string val = null;
            domainClassToNameRSStringDictionary.TryGetValue(domainClassId, out val);

            if( val != null )
            	return LanguageDSLDomainModel.SingletonResourceManager.GetString(domainClassToNameRSStringDictionary[domainClassId]);
				
			return null;
        }
		#endregion
    }


	/// <summary>
	/// Class which retrieves parent elements for domain classes.
	/// </summary>
	public partial class LanguageDSLElementParentProvider
    {
		#region Singleton Instance
		private static LanguageDSLElementParentProvider elementParentProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static LanguageDSLElementParentProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementParentProvider == null )
				{
					elementParentProvider = new LanguageDSLElementParentProvider();
				}
				
				return elementParentProvider;
            }
        }
		
		private LanguageDSLElementParentProvider()
		{
		}
        #endregion
		
		#region Methods
		/// <summary>
        /// Gets the embedding domain model for a given model element. The embedding domain model
        /// is the domain model that contains the given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain model for.</param>
        /// <returns>Domain model as ModelElement if found. Null otherwise.</returns>
        public DslModeling::ModelElement GetEmbeddingDomainModel(DslModeling::ModelElement modelElement)
		{
			DslModeling::ModelElement temp = GetEmbeddingParent(modelElement);
			while(temp != null )
			{
				if( temp is global::Tum.PDE.LanguageDSL.MetaModel )
					return temp as global::Tum.PDE.LanguageDSL.MetaModel;
			
				temp = GetEmbeddingParent(temp);
			}
		
			return null;
		}
		
        /// <summary>
        /// Gets the embedding domain element for a given model element. The embedding domain element
        /// is the parent domain element that is embedding the given model domain element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
        public DslModeling::ModelElement GetEmbeddingParent(DslModeling::ModelElement modelElement)
		{
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationElementClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.PresentationElementClass);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRelationship )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainRelationship);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainClass);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainModel);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainProperty);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedIdProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedIdProperty);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseModelContext )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseModelContext);
			if( modelElement is global::Tum.PDE.LanguageDSL.RootDiagramNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.RootDiagramNode);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRole )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainRole);
			if( modelElement is global::Tum.PDE.LanguageDSL.CreditItem )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.CreditItem);
			if( modelElement is global::Tum.PDE.LanguageDSL.InformationItem )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.InformationItem);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainProperty);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializationClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializationClass);
			if( modelElement is global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainRole )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainRole);
			if( modelElement is global::Tum.PDE.LanguageDSL.EnumerationLiteral )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.EnumerationLiteral);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramClass);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainModelTreeView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainModelTreeView);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelTree )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.ModelTree);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializationModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializationModel);
			if( modelElement is global::Tum.PDE.LanguageDSL.FurtherInformation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.FurtherInformation);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClassView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramClassView);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainType )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainType);
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModelLibrary )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.MetaModelLibrary);
			if( modelElement is global::Tum.PDE.LanguageDSL.Credits )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.Credits);
			if( modelElement is global::Tum.PDE.LanguageDSL.AdditionalInformation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.AdditionalInformation);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramView);
			if( modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.PropertyGridEditor);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelTreeNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.ModelTreeNode);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseViewContext )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseViewContext);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseMetaModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseMetaModel);
			if( modelElement is global::Tum.PDE.LanguageDSL.Validation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.Validation);
			if( modelElement is global::Tum.PDE.LanguageDSL.View )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.View);

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element of a specific type for a given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain element for.</param>
        /// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
        public DslModeling::ModelElement GetEmbeddingParent(DslModeling::ModelElement modelElement, System.Guid parentTypeDomainClassId)
		{
			if( modelElement is global::Tum.PDE.LanguageDSL.PresentationElementClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.PresentationElementClass, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRelationship )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainRelationship, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainClass, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainModel, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainProperty, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedIdProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedIdProperty, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseModelContext )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseModelContext, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.RootDiagramNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.RootDiagramNode, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainRole )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainRole, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.CreditItem )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.CreditItem, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.InformationItem )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.InformationItem, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainProperty )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainProperty, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializationClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializationClass, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializedDomainRole )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializedDomainRole, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.EnumerationLiteral )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.EnumerationLiteral, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClass )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramClass, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainModelTreeView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainModelTreeView, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelTree )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.ModelTree, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.SerializationModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.SerializationModel, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.FurtherInformation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.FurtherInformation, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramClassView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramClassView, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DomainType )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DomainType, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.MetaModelLibrary )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.MetaModelLibrary, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.Credits )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.Credits, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.AdditionalInformation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.AdditionalInformation, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.DiagramView )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.DiagramView, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.PropertyGridEditor, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.ModelTreeNode )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.ModelTreeNode, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseViewContext )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseViewContext, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.BaseMetaModel )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.BaseMetaModel, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.Validation )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.Validation, parentTypeDomainClassId);
			if( modelElement is global::Tum.PDE.LanguageDSL.View )
				return GetEmbeddingParent(modelElement as global::Tum.PDE.LanguageDSL.View, parentTypeDomainClassId);

			return null;
		}
		
		#region Generated GetEmbeddingParent
		/// <summary>
        /// Gets the embedding domain element for a given model element of type PresentationElementClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type PresentationElementClass to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.PresentationElementClass modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> linksDiagramClassHasPresentationElements = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(modelElement, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.PresentationElementClassDomainRoleId);
			if( linksDiagramClassHasPresentationElements.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements allMDiagramClassHasPresentationElementsInstance = linksDiagramClassHasPresentationElements[0];
				if( allMDiagramClassHasPresentationElementsInstance != null )
				{
					return allMDiagramClassHasPresentationElementsInstance.DiagramClass;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type PresentationElementClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type PresentationElementClass to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.PresentationElementClass modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> linksDiagramClassHasPresentationElements = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(modelElement, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.PresentationElementClassDomainRoleId);
			if( linksDiagramClassHasPresentationElements.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements allMDiagramClassHasPresentationElementsInstance = linksDiagramClassHasPresentationElements[0];
				if( allMDiagramClassHasPresentationElementsInstance != null )
				{
					if( allMDiagramClassHasPresentationElementsInstance.DiagramClass.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDiagramClassHasPresentationElementsInstance.DiagramClass;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDiagramClassHasPresentationElementsInstance.DiagramClass, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainRelationship.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainRelationship to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainRelationship modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> linksLibraryModelContextHasRelationships = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainRelationshipDomainRoleId);
			if( linksLibraryModelContextHasRelationships.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships allMLibraryModelContextHasRelationshipsInstance = linksLibraryModelContextHasRelationships[0];
				if( allMLibraryModelContextHasRelationshipsInstance != null )
				{
					return allMLibraryModelContextHasRelationshipsInstance.LibraryModelContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainRelationship.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainRelationship to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainRelationship modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> linksLibraryModelContextHasRelationships = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainRelationshipDomainRoleId);
			if( linksLibraryModelContextHasRelationships.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships allMLibraryModelContextHasRelationshipsInstance = linksLibraryModelContextHasRelationships[0];
				if( allMLibraryModelContextHasRelationshipsInstance != null )
				{
					if( allMLibraryModelContextHasRelationshipsInstance.LibraryModelContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMLibraryModelContextHasRelationshipsInstance.LibraryModelContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMLibraryModelContextHasRelationshipsInstance.LibraryModelContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainClass to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainClass modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> linksLibraryModelContextHasClasses = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassDomainRoleId);
			if( linksLibraryModelContextHasClasses.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses allMLibraryModelContextHasClassesInstance = linksLibraryModelContextHasClasses[0];
				if( allMLibraryModelContextHasClassesInstance != null )
				{
					return allMLibraryModelContextHasClassesInstance.LibraryModelContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainClass to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainClass modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> linksLibraryModelContextHasClasses = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassDomainRoleId);
			if( linksLibraryModelContextHasClasses.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses allMLibraryModelContextHasClassesInstance = linksLibraryModelContextHasClasses[0];
				if( allMLibraryModelContextHasClassesInstance != null )
				{
					if( allMLibraryModelContextHasClassesInstance.LibraryModelContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMLibraryModelContextHasClassesInstance.LibraryModelContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMLibraryModelContextHasClassesInstance.LibraryModelContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainModel to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainModel modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> linksSerializationModelHasSerializedDomainModel = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(modelElement, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializedDomainModelDomainRoleId);
			if( linksSerializationModelHasSerializedDomainModel.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel allMSerializationModelHasSerializedDomainModelInstance = linksSerializationModelHasSerializedDomainModel[0];
				if( allMSerializationModelHasSerializedDomainModelInstance != null )
				{
					return allMSerializationModelHasSerializedDomainModelInstance.SerializationModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainModel to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainModel modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> linksSerializationModelHasSerializedDomainModel = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(modelElement, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializedDomainModelDomainRoleId);
			if( linksSerializationModelHasSerializedDomainModel.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel allMSerializationModelHasSerializedDomainModelInstance = linksSerializationModelHasSerializedDomainModel[0];
				if( allMSerializationModelHasSerializedDomainModelInstance != null )
				{
					if( allMSerializationModelHasSerializedDomainModelInstance.SerializationModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMSerializationModelHasSerializedDomainModelInstance.SerializationModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMSerializationModelHasSerializedDomainModelInstance.SerializationModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainProperty to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainProperty modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> linksSerializationClassHasProperties = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(modelElement, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializedDomainPropertyDomainRoleId);
			if( linksSerializationClassHasProperties.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationClassHasProperties allMSerializationClassHasPropertiesInstance = linksSerializationClassHasProperties[0];
				if( allMSerializationClassHasPropertiesInstance != null )
				{
					return allMSerializationClassHasPropertiesInstance.SerializationClass;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainProperty to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainProperty modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> linksSerializationClassHasProperties = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(modelElement, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializedDomainPropertyDomainRoleId);
			if( linksSerializationClassHasProperties.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationClassHasProperties allMSerializationClassHasPropertiesInstance = linksSerializationClassHasProperties[0];
				if( allMSerializationClassHasPropertiesInstance != null )
				{
					if( allMSerializationClassHasPropertiesInstance.SerializationClass.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMSerializationClassHasPropertiesInstance.SerializationClass;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMSerializationClassHasPropertiesInstance.SerializationClass, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedIdProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedIdProperty to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedIdProperty modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> linksSerializationClassHasIdProperty = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(modelElement, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializedIdPropertyDomainRoleId);
			if( linksSerializationClassHasIdProperty.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty allMSerializationClassHasIdPropertyInstance = linksSerializationClassHasIdProperty[0];
				if( allMSerializationClassHasIdPropertyInstance != null )
				{
					return allMSerializationClassHasIdPropertyInstance.SerializationClass;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedIdProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedIdProperty to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedIdProperty modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> linksSerializationClassHasIdProperty = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(modelElement, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializedIdPropertyDomainRoleId);
			if( linksSerializationClassHasIdProperty.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty allMSerializationClassHasIdPropertyInstance = linksSerializationClassHasIdProperty[0];
				if( allMSerializationClassHasIdPropertyInstance != null )
				{
					if( allMSerializationClassHasIdPropertyInstance.SerializationClass.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMSerializationClassHasIdPropertyInstance.SerializationClass;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMSerializationClassHasIdPropertyInstance.SerializationClass, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseModelContext.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseModelContext to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseModelContext modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> linksMetaModelHasModelContexts = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.BaseModelContextDomainRoleId);
			if( linksMetaModelHasModelContexts.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts allMMetaModelHasModelContextsInstance = linksMetaModelHasModelContexts[0];
				if( allMMetaModelHasModelContextsInstance != null )
				{
					return allMMetaModelHasModelContextsInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseModelContext.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseModelContext to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseModelContext modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> linksMetaModelHasModelContexts = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.BaseModelContextDomainRoleId);
			if( linksMetaModelHasModelContexts.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts allMMetaModelHasModelContextsInstance = linksMetaModelHasModelContexts[0];
				if( allMMetaModelHasModelContextsInstance != null )
				{
					if( allMMetaModelHasModelContextsInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasModelContextsInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasModelContextsInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type RootDiagramNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type RootDiagramNode to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.RootDiagramNode modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> linksDiagramClassViewHasRootDiagramNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(modelElement, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.RootDiagramNodeDomainRoleId);
			if( linksDiagramClassViewHasRootDiagramNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes allMDiagramClassViewHasRootDiagramNodesInstance = linksDiagramClassViewHasRootDiagramNodes[0];
				if( allMDiagramClassViewHasRootDiagramNodesInstance != null )
				{
					return allMDiagramClassViewHasRootDiagramNodesInstance.DiagramClassView;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type RootDiagramNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type RootDiagramNode to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.RootDiagramNode modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> linksDiagramClassViewHasRootDiagramNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(modelElement, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.RootDiagramNodeDomainRoleId);
			if( linksDiagramClassViewHasRootDiagramNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes allMDiagramClassViewHasRootDiagramNodesInstance = linksDiagramClassViewHasRootDiagramNodes[0];
				if( allMDiagramClassViewHasRootDiagramNodesInstance != null )
				{
					if( allMDiagramClassViewHasRootDiagramNodesInstance.DiagramClassView.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDiagramClassViewHasRootDiagramNodesInstance.DiagramClassView;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDiagramClassViewHasRootDiagramNodesInstance.DiagramClassView, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainRole.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainRole to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainRole modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> linksDomainRelationshipHasRoles = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(modelElement, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RoleDomainRoleId);
			if( linksDomainRelationshipHasRoles.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles allMDomainRelationshipHasRolesInstance = linksDomainRelationshipHasRoles[0];
				if( allMDomainRelationshipHasRolesInstance != null )
				{
					return allMDomainRelationshipHasRolesInstance.Relationship;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainRole.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainRole to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainRole modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> linksDomainRelationshipHasRoles = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(modelElement, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RoleDomainRoleId);
			if( linksDomainRelationshipHasRoles.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles allMDomainRelationshipHasRolesInstance = linksDomainRelationshipHasRoles[0];
				if( allMDomainRelationshipHasRolesInstance != null )
				{
					if( allMDomainRelationshipHasRolesInstance.Relationship.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDomainRelationshipHasRolesInstance.Relationship;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDomainRelationshipHasRolesInstance.Relationship, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type CreditItem.
        /// </summary>
        /// <param name="modelElement">ModelElement of type CreditItem to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.CreditItem modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> linksCreditsHasCreditItems = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(modelElement, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditItemDomainRoleId);
			if( linksCreditsHasCreditItems.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.CreditsHasCreditItems allMCreditsHasCreditItemsInstance = linksCreditsHasCreditItems[0];
				if( allMCreditsHasCreditItemsInstance != null )
				{
					return allMCreditsHasCreditItemsInstance.Credits;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type CreditItem.
        /// </summary>
        /// <param name="modelElement">ModelElement of type CreditItem to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.CreditItem modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> linksCreditsHasCreditItems = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(modelElement, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditItemDomainRoleId);
			if( linksCreditsHasCreditItems.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.CreditsHasCreditItems allMCreditsHasCreditItemsInstance = linksCreditsHasCreditItems[0];
				if( allMCreditsHasCreditItemsInstance != null )
				{
					if( allMCreditsHasCreditItemsInstance.Credits.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMCreditsHasCreditItemsInstance.Credits;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMCreditsHasCreditItemsInstance.Credits, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type InformationItem.
        /// </summary>
        /// <param name="modelElement">ModelElement of type InformationItem to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.InformationItem modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> linksFurtherInformationHasInformationItems = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(modelElement, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.InformationItemDomainRoleId);
			if( linksFurtherInformationHasInformationItems.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems allMFurtherInformationHasInformationItemsInstance = linksFurtherInformationHasInformationItems[0];
				if( allMFurtherInformationHasInformationItemsInstance != null )
				{
					return allMFurtherInformationHasInformationItemsInstance.FurtherInformation;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type InformationItem.
        /// </summary>
        /// <param name="modelElement">ModelElement of type InformationItem to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.InformationItem modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> linksFurtherInformationHasInformationItems = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(modelElement, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.InformationItemDomainRoleId);
			if( linksFurtherInformationHasInformationItems.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems allMFurtherInformationHasInformationItemsInstance = linksFurtherInformationHasInformationItems[0];
				if( allMFurtherInformationHasInformationItemsInstance != null )
				{
					if( allMFurtherInformationHasInformationItemsInstance.FurtherInformation.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMFurtherInformationHasInformationItemsInstance.FurtherInformation;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMFurtherInformationHasInformationItemsInstance.FurtherInformation, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainProperty to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainProperty modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> linksAttributedDomainElementHasProperties = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(modelElement, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainPropertyDomainRoleId);
			if( linksAttributedDomainElementHasProperties.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties allMAttributedDomainElementHasPropertiesInstance = linksAttributedDomainElementHasProperties[0];
				if( allMAttributedDomainElementHasPropertiesInstance != null )
				{
					return allMAttributedDomainElementHasPropertiesInstance.DomainElement;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainProperty.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainProperty to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainProperty modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> linksAttributedDomainElementHasProperties = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(modelElement, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainPropertyDomainRoleId);
			if( linksAttributedDomainElementHasProperties.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties allMAttributedDomainElementHasPropertiesInstance = linksAttributedDomainElementHasProperties[0];
				if( allMAttributedDomainElementHasPropertiesInstance != null )
				{
					if( allMAttributedDomainElementHasPropertiesInstance.DomainElement.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMAttributedDomainElementHasPropertiesInstance.DomainElement;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMAttributedDomainElementHasPropertiesInstance.DomainElement, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializationClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializationClass to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializationClass modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> linksSerializationModelHasChildren = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(modelElement, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationClassDomainRoleId);
			if( linksSerializationModelHasChildren.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationModelHasChildren allMSerializationModelHasChildrenInstance = linksSerializationModelHasChildren[0];
				if( allMSerializationModelHasChildrenInstance != null )
				{
					return allMSerializationModelHasChildrenInstance.SerializationModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializationClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializationClass to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializationClass modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> linksSerializationModelHasChildren = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(modelElement, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationClassDomainRoleId);
			if( linksSerializationModelHasChildren.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializationModelHasChildren allMSerializationModelHasChildrenInstance = linksSerializationModelHasChildren[0];
				if( allMSerializationModelHasChildrenInstance != null )
				{
					if( allMSerializationModelHasChildrenInstance.SerializationModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMSerializationModelHasChildrenInstance.SerializationModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMSerializationModelHasChildrenInstance.SerializationModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type EmbeddingDiagramNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type EmbeddingDiagramNode to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(modelElement, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.TargetEmbeddingDiagramNodeDomainRoleId);
			if( linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance = linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes[0];
				if( allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance != null )
				{
					return allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance.SourceEmbeddingDiagramNode;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type EmbeddingDiagramNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type EmbeddingDiagramNode to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(modelElement, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.TargetEmbeddingDiagramNodeDomainRoleId);
			if( linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance = linksEmbeddingDiagramNodeHasEmbeddingDiagramNodes[0];
				if( allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance != null )
				{
					if( allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance.SourceEmbeddingDiagramNode.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance.SourceEmbeddingDiagramNode;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMEmbeddingDiagramNodeHasEmbeddingDiagramNodesInstance.SourceEmbeddingDiagramNode, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainRole.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainRole to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainRole modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> linksSerializedRelationshipHasSerializedDomainRoles = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(modelElement, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedDomainRoleDomainRoleId);
			if( linksSerializedRelationshipHasSerializedDomainRoles.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles allMSerializedRelationshipHasSerializedDomainRolesInstance = linksSerializedRelationshipHasSerializedDomainRoles[0];
				if( allMSerializedRelationshipHasSerializedDomainRolesInstance != null )
				{
					return allMSerializedRelationshipHasSerializedDomainRolesInstance.SerializedRelationship;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializedDomainRole.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializedDomainRole to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializedDomainRole modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> linksSerializedRelationshipHasSerializedDomainRoles = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(modelElement, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedDomainRoleDomainRoleId);
			if( linksSerializedRelationshipHasSerializedDomainRoles.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles allMSerializedRelationshipHasSerializedDomainRolesInstance = linksSerializedRelationshipHasSerializedDomainRoles[0];
				if( allMSerializedRelationshipHasSerializedDomainRolesInstance != null )
				{
					if( allMSerializedRelationshipHasSerializedDomainRolesInstance.SerializedRelationship.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMSerializedRelationshipHasSerializedDomainRolesInstance.SerializedRelationship;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMSerializedRelationshipHasSerializedDomainRolesInstance.SerializedRelationship, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type EnumerationLiteral.
        /// </summary>
        /// <param name="modelElement">ModelElement of type EnumerationLiteral to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.EnumerationLiteral modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> linksDomainEnumerationHasLiterals = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(modelElement, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.EnumerationLiteralDomainRoleId);
			if( linksDomainEnumerationHasLiterals.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals allMDomainEnumerationHasLiteralsInstance = linksDomainEnumerationHasLiterals[0];
				if( allMDomainEnumerationHasLiteralsInstance != null )
				{
					return allMDomainEnumerationHasLiteralsInstance.DomainEnumeration;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type EnumerationLiteral.
        /// </summary>
        /// <param name="modelElement">ModelElement of type EnumerationLiteral to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.EnumerationLiteral modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> linksDomainEnumerationHasLiterals = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(modelElement, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.EnumerationLiteralDomainRoleId);
			if( linksDomainEnumerationHasLiterals.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals allMDomainEnumerationHasLiteralsInstance = linksDomainEnumerationHasLiterals[0];
				if( allMDomainEnumerationHasLiteralsInstance != null )
				{
					if( allMDomainEnumerationHasLiteralsInstance.DomainEnumeration.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDomainEnumerationHasLiteralsInstance.DomainEnumeration;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDomainEnumerationHasLiteralsInstance.DomainEnumeration, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramClass to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramClass modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> linksLibraryModelContextHasDiagramClasses = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DiagramClassDomainRoleId);
			if( linksLibraryModelContextHasDiagramClasses.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses allMLibraryModelContextHasDiagramClassesInstance = linksLibraryModelContextHasDiagramClasses[0];
				if( allMLibraryModelContextHasDiagramClassesInstance != null )
				{
					return allMLibraryModelContextHasDiagramClassesInstance.LibraryModelContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramClass.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramClass to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramClass modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> linksLibraryModelContextHasDiagramClasses = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DiagramClassDomainRoleId);
			if( linksLibraryModelContextHasDiagramClasses.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses allMLibraryModelContextHasDiagramClassesInstance = linksLibraryModelContextHasDiagramClasses[0];
				if( allMLibraryModelContextHasDiagramClassesInstance != null )
				{
					if( allMLibraryModelContextHasDiagramClassesInstance.LibraryModelContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMLibraryModelContextHasDiagramClassesInstance.LibraryModelContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMLibraryModelContextHasDiagramClassesInstance.LibraryModelContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainModelTreeView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainModelTreeView to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainModelTreeView modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> linksViewContextHasDomainModelTreeView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(modelElement, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainModelTreeViewDomainRoleId);
			if( linksViewContextHasDomainModelTreeView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView allMViewContextHasDomainModelTreeViewInstance = linksViewContextHasDomainModelTreeView[0];
				if( allMViewContextHasDomainModelTreeViewInstance != null )
				{
					return allMViewContextHasDomainModelTreeViewInstance.ViewContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainModelTreeView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainModelTreeView to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainModelTreeView modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> linksViewContextHasDomainModelTreeView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(modelElement, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainModelTreeViewDomainRoleId);
			if( linksViewContextHasDomainModelTreeView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView allMViewContextHasDomainModelTreeViewInstance = linksViewContextHasDomainModelTreeView[0];
				if( allMViewContextHasDomainModelTreeViewInstance != null )
				{
					if( allMViewContextHasDomainModelTreeViewInstance.ViewContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMViewContextHasDomainModelTreeViewInstance.ViewContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMViewContextHasDomainModelTreeViewInstance.ViewContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type ModelTree.
        /// </summary>
        /// <param name="modelElement">ModelElement of type ModelTree to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.ModelTree modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> linksViewHasModelTree = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(modelElement, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ModelTreeDomainRoleId);
			if( linksViewHasModelTree.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewHasModelTree allMViewHasModelTreeInstance = linksViewHasModelTree[0];
				if( allMViewHasModelTreeInstance != null )
				{
					return allMViewHasModelTreeInstance.View;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type ModelTree.
        /// </summary>
        /// <param name="modelElement">ModelElement of type ModelTree to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.ModelTree modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> linksViewHasModelTree = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(modelElement, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ModelTreeDomainRoleId);
			if( linksViewHasModelTree.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewHasModelTree allMViewHasModelTreeInstance = linksViewHasModelTree[0];
				if( allMViewHasModelTreeInstance != null )
				{
					if( allMViewHasModelTreeInstance.View.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMViewHasModelTreeInstance.View;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMViewHasModelTreeInstance.View, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializationModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializationModel to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializationModel modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> linksLibraryModelContextHasSerializationModel = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.SerializationModelDomainRoleId);
			if( linksLibraryModelContextHasSerializationModel.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel allMLibraryModelContextHasSerializationModelInstance = linksLibraryModelContextHasSerializationModel[0];
				if( allMLibraryModelContextHasSerializationModelInstance != null )
				{
					return allMLibraryModelContextHasSerializationModelInstance.LibraryModelContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type SerializationModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type SerializationModel to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.SerializationModel modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> linksLibraryModelContextHasSerializationModel = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(modelElement, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.SerializationModelDomainRoleId);
			if( linksLibraryModelContextHasSerializationModel.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel allMLibraryModelContextHasSerializationModelInstance = linksLibraryModelContextHasSerializationModel[0];
				if( allMLibraryModelContextHasSerializationModelInstance != null )
				{
					if( allMLibraryModelContextHasSerializationModelInstance.LibraryModelContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMLibraryModelContextHasSerializationModelInstance.LibraryModelContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMLibraryModelContextHasSerializationModelInstance.LibraryModelContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type FurtherInformation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type FurtherInformation to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.FurtherInformation modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> linksAdditionalInformationHasFurtherInformation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(modelElement, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.FurtherInformationDomainRoleId);
			if( linksAdditionalInformationHasFurtherInformation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation allMAdditionalInformationHasFurtherInformationInstance = linksAdditionalInformationHasFurtherInformation[0];
				if( allMAdditionalInformationHasFurtherInformationInstance != null )
				{
					return allMAdditionalInformationHasFurtherInformationInstance.AdditionalInformation;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type FurtherInformation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type FurtherInformation to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.FurtherInformation modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> linksAdditionalInformationHasFurtherInformation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(modelElement, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.FurtherInformationDomainRoleId);
			if( linksAdditionalInformationHasFurtherInformation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation allMAdditionalInformationHasFurtherInformationInstance = linksAdditionalInformationHasFurtherInformation[0];
				if( allMAdditionalInformationHasFurtherInformationInstance != null )
				{
					if( allMAdditionalInformationHasFurtherInformationInstance.AdditionalInformation.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMAdditionalInformationHasFurtherInformationInstance.AdditionalInformation;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMAdditionalInformationHasFurtherInformationInstance.AdditionalInformation, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramClassView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramClassView to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramClassView modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> linksDiagramViewHasDiagramClassViews = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(modelElement, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramClassViewDomainRoleId);
			if( linksDiagramViewHasDiagramClassViews.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews allMDiagramViewHasDiagramClassViewsInstance = linksDiagramViewHasDiagramClassViews[0];
				if( allMDiagramViewHasDiagramClassViewsInstance != null )
				{
					return allMDiagramViewHasDiagramClassViewsInstance.DiagramView;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramClassView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramClassView to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramClassView modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> linksDiagramViewHasDiagramClassViews = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(modelElement, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramClassViewDomainRoleId);
			if( linksDiagramViewHasDiagramClassViews.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews allMDiagramViewHasDiagramClassViewsInstance = linksDiagramViewHasDiagramClassViews[0];
				if( allMDiagramViewHasDiagramClassViewsInstance != null )
				{
					if( allMDiagramViewHasDiagramClassViewsInstance.DiagramView.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDiagramViewHasDiagramClassViewsInstance.DiagramView;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDiagramViewHasDiagramClassViewsInstance.DiagramView, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainType.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainType to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainType modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> linksMetaModelHasDomainTypes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainTypeDomainRoleId);
			if( linksMetaModelHasDomainTypes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes allMMetaModelHasDomainTypesInstance = linksMetaModelHasDomainTypes[0];
				if( allMMetaModelHasDomainTypesInstance != null )
				{
					return allMMetaModelHasDomainTypesInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DomainType.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DomainType to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DomainType modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> linksMetaModelHasDomainTypes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainTypeDomainRoleId);
			if( linksMetaModelHasDomainTypes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes allMMetaModelHasDomainTypesInstance = linksMetaModelHasDomainTypes[0];
				if( allMMetaModelHasDomainTypesInstance != null )
				{
					if( allMMetaModelHasDomainTypesInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasDomainTypesInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasDomainTypesInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type MetaModelLibrary.
        /// </summary>
        /// <param name="modelElement">ModelElement of type MetaModelLibrary to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.MetaModelLibrary modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> linksMetaModelHasMetaModelLibraries = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelLibraryDomainRoleId);
			if( linksMetaModelHasMetaModelLibraries.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries allMMetaModelHasMetaModelLibrariesInstance = linksMetaModelHasMetaModelLibraries[0];
				if( allMMetaModelHasMetaModelLibrariesInstance != null )
				{
					return allMMetaModelHasMetaModelLibrariesInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type MetaModelLibrary.
        /// </summary>
        /// <param name="modelElement">ModelElement of type MetaModelLibrary to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.MetaModelLibrary modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> linksMetaModelHasMetaModelLibraries = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelLibraryDomainRoleId);
			if( linksMetaModelHasMetaModelLibraries.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries allMMetaModelHasMetaModelLibrariesInstance = linksMetaModelHasMetaModelLibraries[0];
				if( allMMetaModelHasMetaModelLibrariesInstance != null )
				{
					if( allMMetaModelHasMetaModelLibrariesInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasMetaModelLibrariesInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasMetaModelLibrariesInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type Credits.
        /// </summary>
        /// <param name="modelElement">ModelElement of type Credits to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.Credits modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> linksAdditionalInformationHasCredits = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(modelElement, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.CreditsDomainRoleId);
			if( linksAdditionalInformationHasCredits.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits allMAdditionalInformationHasCreditsInstance = linksAdditionalInformationHasCredits[0];
				if( allMAdditionalInformationHasCreditsInstance != null )
				{
					return allMAdditionalInformationHasCreditsInstance.AdditionalInformation;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type Credits.
        /// </summary>
        /// <param name="modelElement">ModelElement of type Credits to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.Credits modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> linksAdditionalInformationHasCredits = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(modelElement, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.CreditsDomainRoleId);
			if( linksAdditionalInformationHasCredits.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits allMAdditionalInformationHasCreditsInstance = linksAdditionalInformationHasCredits[0];
				if( allMAdditionalInformationHasCreditsInstance != null )
				{
					if( allMAdditionalInformationHasCreditsInstance.AdditionalInformation.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMAdditionalInformationHasCreditsInstance.AdditionalInformation;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMAdditionalInformationHasCreditsInstance.AdditionalInformation, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type AdditionalInformation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type AdditionalInformation to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.AdditionalInformation modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> linksMetaModelHasAdditionalInformation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.AdditionalInformationDomainRoleId);
			if( linksMetaModelHasAdditionalInformation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation allMMetaModelHasAdditionalInformationInstance = linksMetaModelHasAdditionalInformation[0];
				if( allMMetaModelHasAdditionalInformationInstance != null )
				{
					return allMMetaModelHasAdditionalInformationInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type AdditionalInformation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type AdditionalInformation to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.AdditionalInformation modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> linksMetaModelHasAdditionalInformation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.AdditionalInformationDomainRoleId);
			if( linksMetaModelHasAdditionalInformation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation allMMetaModelHasAdditionalInformationInstance = linksMetaModelHasAdditionalInformation[0];
				if( allMMetaModelHasAdditionalInformationInstance != null )
				{
					if( allMMetaModelHasAdditionalInformationInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasAdditionalInformationInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasAdditionalInformationInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramView to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramView modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> linksViewContextHasDiagramView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(modelElement, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DiagramViewDomainRoleId);
			if( linksViewContextHasDiagramView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView allMViewContextHasDiagramViewInstance = linksViewContextHasDiagramView[0];
				if( allMViewContextHasDiagramViewInstance != null )
				{
					return allMViewContextHasDiagramViewInstance.ViewContext;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type DiagramView.
        /// </summary>
        /// <param name="modelElement">ModelElement of type DiagramView to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.DiagramView modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> linksViewContextHasDiagramView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(modelElement, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DiagramViewDomainRoleId);
			if( linksViewContextHasDiagramView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView allMViewContextHasDiagramViewInstance = linksViewContextHasDiagramView[0];
				if( allMViewContextHasDiagramViewInstance != null )
				{
					if( allMViewContextHasDiagramViewInstance.ViewContext.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMViewContextHasDiagramViewInstance.ViewContext;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMViewContextHasDiagramViewInstance.ViewContext, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type PropertyGridEditor.
        /// </summary>
        /// <param name="modelElement">ModelElement of type PropertyGridEditor to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.PropertyGridEditor modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> linksMetaModelHasPropertyGridEditors = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.PropertyGridEditorDomainRoleId);
			if( linksMetaModelHasPropertyGridEditors.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors allMMetaModelHasPropertyGridEditorsInstance = linksMetaModelHasPropertyGridEditors[0];
				if( allMMetaModelHasPropertyGridEditorsInstance != null )
				{
					return allMMetaModelHasPropertyGridEditorsInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type PropertyGridEditor.
        /// </summary>
        /// <param name="modelElement">ModelElement of type PropertyGridEditor to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.PropertyGridEditor modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> linksMetaModelHasPropertyGridEditors = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.PropertyGridEditorDomainRoleId);
			if( linksMetaModelHasPropertyGridEditors.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors allMMetaModelHasPropertyGridEditorsInstance = linksMetaModelHasPropertyGridEditors[0];
				if( allMMetaModelHasPropertyGridEditorsInstance != null )
				{
					if( allMMetaModelHasPropertyGridEditorsInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasPropertyGridEditorsInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasPropertyGridEditorsInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type ModelTreeNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type ModelTreeNode to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.ModelTreeNode modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> linksDomainModelTreeViewHasModelTreeNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(modelElement, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.ModelTreeNodeDomainRoleId);
			if( linksDomainModelTreeViewHasModelTreeNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes allMDomainModelTreeViewHasModelTreeNodesInstance = linksDomainModelTreeViewHasModelTreeNodes[0];
				if( allMDomainModelTreeViewHasModelTreeNodesInstance != null )
				{
					return allMDomainModelTreeViewHasModelTreeNodesInstance.DomainModelTreeView;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type ModelTreeNode.
        /// </summary>
        /// <param name="modelElement">ModelElement of type ModelTreeNode to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.ModelTreeNode modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> linksDomainModelTreeViewHasModelTreeNodes = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(modelElement, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.ModelTreeNodeDomainRoleId);
			if( linksDomainModelTreeViewHasModelTreeNodes.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes allMDomainModelTreeViewHasModelTreeNodesInstance = linksDomainModelTreeViewHasModelTreeNodes[0];
				if( allMDomainModelTreeViewHasModelTreeNodesInstance != null )
				{
					if( allMDomainModelTreeViewHasModelTreeNodesInstance.DomainModelTreeView.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMDomainModelTreeViewHasModelTreeNodesInstance.DomainModelTreeView;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMDomainModelTreeViewHasModelTreeNodesInstance.DomainModelTreeView, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseViewContext.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseViewContext to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseViewContext modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> linksViewHasViewContexts = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(modelElement, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.BaseViewContextDomainRoleId);
			if( linksViewHasViewContexts.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewHasViewContexts allMViewHasViewContextsInstance = linksViewHasViewContexts[0];
				if( allMViewHasViewContextsInstance != null )
				{
					return allMViewHasViewContextsInstance.View;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseViewContext.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseViewContext to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseViewContext modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> linksViewHasViewContexts = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(modelElement, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.BaseViewContextDomainRoleId);
			if( linksViewHasViewContexts.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.ViewHasViewContexts allMViewHasViewContextsInstance = linksViewHasViewContexts[0];
				if( allMViewHasViewContextsInstance != null )
				{
					if( allMViewHasViewContextsInstance.View.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMViewHasViewContextsInstance.View;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMViewHasViewContextsInstance.View, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseMetaModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseMetaModel to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseMetaModel modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> linksMetaModelLibraryHasImportedLibrary = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.BaseMetaModelDomainRoleId);
			if( linksMetaModelLibraryHasImportedLibrary.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary allMMetaModelLibraryHasImportedLibraryInstance = linksMetaModelLibraryHasImportedLibrary[0];
				if( allMMetaModelLibraryHasImportedLibraryInstance != null )
				{
					return allMMetaModelLibraryHasImportedLibraryInstance.MetaModelLibrary;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type BaseMetaModel.
        /// </summary>
        /// <param name="modelElement">ModelElement of type BaseMetaModel to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.BaseMetaModel modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> linksMetaModelLibraryHasImportedLibrary = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.BaseMetaModelDomainRoleId);
			if( linksMetaModelLibraryHasImportedLibrary.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary allMMetaModelLibraryHasImportedLibraryInstance = linksMetaModelLibraryHasImportedLibrary[0];
				if( allMMetaModelLibraryHasImportedLibraryInstance != null )
				{
					if( allMMetaModelLibraryHasImportedLibraryInstance.MetaModelLibrary.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelLibraryHasImportedLibraryInstance.MetaModelLibrary;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelLibraryHasImportedLibraryInstance.MetaModelLibrary, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type Validation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type Validation to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.Validation modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> linksMetaModelHasValidation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.ValidationDomainRoleId);
			if( linksMetaModelHasValidation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasValidation allMMetaModelHasValidationInstance = linksMetaModelHasValidation[0];
				if( allMMetaModelHasValidationInstance != null )
				{
					return allMMetaModelHasValidationInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type Validation.
        /// </summary>
        /// <param name="modelElement">ModelElement of type Validation to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.Validation modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> linksMetaModelHasValidation = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.ValidationDomainRoleId);
			if( linksMetaModelHasValidation.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasValidation allMMetaModelHasValidationInstance = linksMetaModelHasValidation[0];
				if( allMMetaModelHasValidationInstance != null )
				{
					if( allMMetaModelHasValidationInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasValidationInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasValidationInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type View.
        /// </summary>
        /// <param name="modelElement">ModelElement of type View to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.View modelElement)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> linksMetaModelHasView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasView.ViewDomainRoleId);
			if( linksMetaModelHasView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasView allMMetaModelHasViewInstance = linksMetaModelHasView[0];
				if( allMMetaModelHasViewInstance != null )
				{
					return allMMetaModelHasViewInstance.MetaModel;
				}
			}

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type View.
        /// </summary>
        /// <param name="modelElement">ModelElement of type View to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(global::Tum.PDE.LanguageDSL.View modelElement, System.Guid parentTypeDomainClassId)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> linksMetaModelHasView = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(modelElement, global::Tum.PDE.LanguageDSL.MetaModelHasView.ViewDomainRoleId);
			if( linksMetaModelHasView.Count == 1 )
			{			
				global::Tum.PDE.LanguageDSL.MetaModelHasView allMMetaModelHasViewInstance = linksMetaModelHasView[0];
				if( allMMetaModelHasViewInstance != null )
				{
					if( allMMetaModelHasViewInstance.MetaModel.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allMMetaModelHasViewInstance.MetaModel;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allMMetaModelHasViewInstance.MetaModel, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

			return null;
		}		
		#endregion
		#endregion
	}	
}


