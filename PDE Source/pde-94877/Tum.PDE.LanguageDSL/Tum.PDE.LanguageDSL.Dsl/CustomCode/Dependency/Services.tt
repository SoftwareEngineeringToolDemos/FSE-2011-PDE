<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Dsl processor="DslDirectiveProcessor" requires="fileName='..\..\DslDefinition.dsl'" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<# 
	Dsl dm = this.Dsl;
	IEnumerable<DomainClass> sortedByInheritanceClasses = CodeGenerationUtilities.SortDomainClassesByInheritance(dm.Classes);
	IEnumerable<DomainClass> sortedByInheritanceRS = CodeGenerationUtilities.SortDomainClassesByInheritance(dm.Relationships);
	
	List<DomainClass> sortedByInheritance = new List<DomainClass>();
	sortedByInheritance.AddRange(sortedByInheritanceClasses);
	sortedByInheritance.AddRange(sortedByInheritanceRS);	

	DomainClass domainModel = dm.Classes[0];
#>

using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace <#= dm.Namespace #>
{
/// <summary>
	/// Class which provides names and display names for domain classes as well as methods to create names for new domain classes.
	/// </summary>
	public partial class <#= dm.Name #>ElementNameProvider
	{
		#region Singleton Instance
		private static <#= dm.Name #>ElementNameProvider elementNameProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= dm.Name #>ElementNameProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementNameProvider == null )
				{
					elementNameProvider = new <#= dm.Name #>ElementNameProvider();
				}
				
				return elementNameProvider;
            }
        }
		
		private <#= dm.Name #>ElementNameProvider()
		{
		}
        #endregion
		
		#region Methods
        /// <summary>
        /// Verifies if a given modelElement has a name property or not.
        /// </summary>
        /// <param name="modelElement">ModelElement to verify.</param>
        /// <returns>
        /// True if the given model element has a property marked with "IsElementName" set to true. False otherwise.
        /// </returns>
        public bool HasName(DslModeling::ModelElement modelElement)
		{
<#
			foreach(DomainClass d in sortedByInheritance)
			{
				DomainProperty nameProperty = GetNameProperty(d);
				if( nameProperty != null )
				{
#>
			if( modelElement is <#= d.GetFullName(true) #> )
				return true;
<#
				}
			}
#>

			return false;
		}

        /// <summary>
        /// Gets the element name from the property that is marked as "IsElementName".
        /// </summary>
        /// <param name="modelElement">Domain class to get the name for.</param>
        /// <returns>Name of the domain class as string if found. Null otherwise.</returns>
        public string GetName(DslModeling::ModelElement modelElement)
		{
<#
			foreach(DomainClass d in sortedByInheritance)
			{
				DomainProperty nameProperty = GetNameProperty(d);
				if( nameProperty != null )
				{
#>
			if( modelElement is <#= d.GetFullName(true) #> )
				return (modelElement as <#= d.GetFullName(true) #>).<#= nameProperty.Name #>;
<#
				}
			}
#>		
			return null;
		}
		
		/// <summary>
        /// Gets the name property info for a given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the name property info for.</param>
        /// <returns>DomainPropertyInfo for the name property if found. Null otherwise.</returns>
        public DslModeling::DomainPropertyInfo GetNamePropertyInfo(DslModeling::ModelElement modelElement)
		{
<#
			foreach(DomainClass d in sortedByInheritance)
			{
				DomainProperty nameProperty = GetNameProperty(d);
				if( nameProperty != null )
				{
#>
			if( modelElement is <#= d.GetFullName(true) #> )
				return modelElement.Store.DomainDataDirectory.GetDomainProperty(<#= d.GetFullName(true) #>.<#= nameProperty.Name #>DomainPropertyId);
<#
				}
			}
#>		
			return null;
		}
		#endregion
	}
	
	/// <summary>
	/// Class which provides type names and type display names for domain classes.
	/// </summary>
	public partial class <#= dm.Name #>ElementTypeProvider
    {
		#region Singleton Instance
		private static <#= dm.Name #>ElementTypeProvider elementTypeProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= dm.Name #>ElementTypeProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementTypeProvider == null )
				{
					elementTypeProvider = new <#= dm.Name #>ElementTypeProvider();
				}
				
				return elementTypeProvider;
            }
        }
		
		private <#= dm.Name #>ElementTypeProvider()
		{
			Initialize();
		}
        #endregion
		
		#region Fields
        private static readonly System.Collections.Generic.Dictionary<System.Guid, System.Type> domainClassToTypeDictionary = new System.Collections.Generic.Dictionary<System.Guid,System.Type>();
		private static readonly System.Collections.Generic.Dictionary<System.Type, System.Guid> typeToDomainClassDictionary = new System.Collections.Generic.Dictionary<System.Type, System.Guid>();
        private static readonly System.Collections.Generic.Dictionary<System.Guid, string> domainClassToNameDictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
        private static readonly System.Collections.Generic.Dictionary<System.Guid, string> domainClassToNameRSStringDictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
		#endregion
		
		#region Initialize
		/// <summary>
        /// Initializes dictionaries for lookup.
        /// </summary>
		private void Initialize()
		{
			#region DomainClassToTypeDictionary
<#
			foreach(DomainClass d in sortedByInheritance)
			{
#>
			domainClassToTypeDictionary.Add(<#= d.GetFullName(true) #>.DomainClassId, typeof(<#= d.GetFullName(true) #>));
<#
			}
#>
			#endregion
			
			#region TypeToDomainClassDictionary
<#
			foreach(DomainClass d in sortedByInheritance)
			{
#>
			typeToDomainClassDictionary.Add(typeof(<#= d.GetFullName(true) #>), <#= d.GetFullName(true) #>.DomainClassId);
<#
			}
#>
			#endregion
			
			#region DomainClassToNameDictionary
<#
			foreach(DomainClass d in sortedByInheritance)
			{
#>
			domainClassToNameDictionary.Add(<#= d.GetFullName(true) #>.DomainClassId, "<#= d.Name #>");
<#
			}
#>
			#endregion			
			
			#region DomainClassToNameRSStringDictionary
<#
			foreach(DomainClass d in sortedByInheritance)
			{
#>
			domainClassToNameRSStringDictionary.Add(<#= d.GetFullName(true) #>.DomainClassId, "<#= d.GetFullName(false) #>.DisplayName");
<#
			}
#>
			#endregion						
			
		}
		#endregion
		
		#region Methods
		/// <summary>
        /// Get the name of type of the element as string.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the type for.</param>
        /// <returns>Type name as a string.</returns>
        /// <remarks>
        /// This is essentially equal to modelElement.GetType().Name. But as this
        /// is generated, we dont required to access the actual Type of the element to get its name.
        /// </remarks>
        public string GetTypeName(DslModeling::ModelElement modelElement)
        {
			if( modelElement == null )
				return "";
				
            return GetTypeName(modelElement.GetDomainClass().Id);
        }

        /// <summary>
        /// Gets the name of the type based on the given domain class Id.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Type name as a string.</returns>
        public string GetTypeName(System.Guid domainClassId)
        {
            string val = null;
            domainClassToNameDictionary.TryGetValue(domainClassId, out val);
            
            return val;
        }

        /// <summary>
        /// Get type of the element that is specified by the given domain class Id.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Type of the element.</returns>
        public System.Type GetTypeOfElement(System.Guid domainClassId)
        {
			System.Type val = null;
            domainClassToTypeDictionary.TryGetValue(domainClassId, out val);
            
            return val;
        }

        /// <summary>
        /// Get the display name of type of the element as string.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the type display name for.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(DslModeling::ModelElement modelElement)
        {
			if( modelElement == null )
				return "";
				
            return GetTypeDisplayName(modelElement.GetDomainClass().Id);
        }

        /// <summary>
        /// Get the display name of the given type.
        /// </summary>
        /// <param name="type">Type to get the display name for.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(System.Type type)
        {
            System.Guid val;
            typeToDomainClassDictionary.TryGetValue(type, out val);
            if( val != null )
                if( val != System.Guid.Empty )
                return GetTypeDisplayName(val);

            return null;
        }

        /// <summary>
        /// Get the display name of type that is specified by the given domain class Id as string.
        /// </summary>
        /// <param name="domainClassId">DomainClassId specifying the type of the element.</param>
        /// <returns>Display name of the type as a string.</returns>
        public string GetTypeDisplayName(System.Guid domainClassId)
        {
			string val = null;
            domainClassToNameRSStringDictionary.TryGetValue(domainClassId, out val);

            if( val != null )
            	return <#= dm.Name #>DomainModel.SingletonResourceManager.GetString(domainClassToNameRSStringDictionary[domainClassId]);
				
			return null;
        }
		#endregion
    }


	/// <summary>
	/// Class which retrieves parent elements for domain classes.
	/// </summary>
	public partial class <#= dm.Name #>ElementParentProvider
    {
		#region Singleton Instance
		private static <#= dm.Name #>ElementParentProvider elementParentProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= dm.Name #>ElementParentProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( elementParentProvider == null )
				{
					elementParentProvider = new <#= dm.Name #>ElementParentProvider();
				}
				
				return elementParentProvider;
            }
        }
		
		private <#= dm.Name #>ElementParentProvider()
		{
		}
        #endregion
		
		#region Methods
		/// <summary>
        /// Gets the embedding domain model for a given model element. The embedding domain model
        /// is the domain model that contains the given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain model for.</param>
        /// <returns>Domain model as ModelElement if found. Null otherwise.</returns>
        public DslModeling::ModelElement GetEmbeddingDomainModel(DslModeling::ModelElement modelElement)
		{
			DslModeling::ModelElement temp = GetEmbeddingParent(modelElement);
			while(temp != null )
			{
				if( temp is <#= domainModel.GetFullName(true) #> )
					return temp as <#= domainModel.GetFullName(true) #>;
			
				temp = GetEmbeddingParent(temp);
			}
		
			return null;
		}
		
        /// <summary>
        /// Gets the embedding domain element for a given model element. The embedding domain element
        /// is the parent domain element that is embedding the given model domain element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
        public DslModeling::ModelElement GetEmbeddingParent(DslModeling::ModelElement modelElement)
		{
<#
		foreach(DomainClass domainElement in sortedByInheritanceClasses)
		{
			foreach(DomainRole role in domainElement.RolesPlayed)
			{
				if( role.Relationship.IsEmbedding && role.Relationship.Target == role )
				{
#>
			if( modelElement is <#= domainElement.GetFullName(true) #> )
				return GetEmbeddingParent(modelElement as <#= domainElement.GetFullName(true) #>);
<#
					break;
				}
			}
		}
#>

			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element of a specific type for a given model element.
        /// </summary>
        /// <param name="modelElement">ModelElement to get the embedding domain element for.</param>
        /// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
        public DslModeling::ModelElement GetEmbeddingParent(DslModeling::ModelElement modelElement, System.Guid parentTypeDomainClassId)
		{
<#
		foreach(DomainClass domainElement in sortedByInheritanceClasses)
		{
			foreach(DomainRole role in domainElement.RolesPlayed)
			{
				if( role.Relationship.IsEmbedding && role.Relationship.Target == role )
				{
#>
			if( modelElement is <#= domainElement.GetFullName(true) #> )
				return GetEmbeddingParent(modelElement as <#= domainElement.GetFullName(true) #>, parentTypeDomainClassId);
<#
					break;
				}
			}
		}
#>

			return null;
		}
		
		#region Generated GetEmbeddingParent
<#
		foreach(DomainClass domainElement in sortedByInheritanceClasses)
		{
			bool bIsEmbedded = false;
			foreach(DomainRole role in domainElement.RolesPlayed)
			{
				if( role.Relationship.IsEmbedding && role.Relationship.Target == role )
				{
					bIsEmbedded = true;
					break;
				}
			}
			
			if( bIsEmbedded )
			{
#>
		/// <summary>
        /// Gets the embedding domain element for a given model element of type <#= domainElement.Name#>.
        /// </summary>
        /// <param name="modelElement">ModelElement of type <#= domainElement.Name#> to get the embedding domain element for.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(<#= domainElement.GetFullName(true) #> modelElement)
		{
<#
				foreach(DomainRole role in domainElement.RolesPlayed)
				{
					if( role.Relationship.IsEmbedding && role.Relationship.Target == role )
					{
						DomainRelationship con = role.Relationship;
#>
			global::System.Collections.Generic.IList<<#= con.GetFullName(true) #>> links<#= con.Name #> = DslModeling::DomainRoleInfo.GetElementLinks<<#= con.GetFullName(true) #>>(modelElement, <#= con.GetFullName(true) #>.<#= con.Target.Name #>DomainRoleId);
			if( links<#= con.Name #>.Count == 1 )
			{			
				<#= con.GetFullName(true) #> allM<#= con.Name #>Instance = links<#= con.Name #>[0];
				if( allM<#= con.Name #>Instance != null )
				{
					return allM<#= con.Name #>Instance.<#= con.Source.Name #>;
				}
			}

<#
					}
				}
#>
			return null;
		}
		
		/// <summary>
        /// Gets the embedding domain element for a given model element of type <#= domainElement.Name#>.
        /// </summary>
        /// <param name="modelElement">ModelElement of type <#= domainElement.Name#> to get the embedding domain element for.</param>
		/// <param name="parentTypeDomainClassId">Type of the embedding domain element to find.</param>
        /// <returns>Domain element as ModelElement if found. Null otherwise</returns>
		public DslModeling::ModelElement GetEmbeddingParent(<#= domainElement.GetFullName(true) #> modelElement, System.Guid parentTypeDomainClassId)
		{
<#
				foreach(DomainRole role in domainElement.RolesPlayed)
				{
					if( role.Relationship.IsEmbedding && role.Relationship.Target == role )
					{
						DomainRelationship con = role.Relationship;
#>
			global::System.Collections.Generic.IList<<#= con.GetFullName(true) #>> links<#= con.Name #> = DslModeling::DomainRoleInfo.GetElementLinks<<#= con.GetFullName(true) #>>(modelElement, <#= con.GetFullName(true) #>.<#= con.Target.Name #>DomainRoleId);
			if( links<#= con.Name #>.Count == 1 )
			{			
				<#= con.GetFullName(true) #> allM<#= con.Name #>Instance = links<#= con.Name #>[0];
				if( allM<#= con.Name #>Instance != null )
				{
					if( allM<#= con.Name #>Instance.<#= con.Source.Name #>.GetDomainClass().IsDerivedFrom(parentTypeDomainClassId) )
						return allM<#= con.Name #>Instance.<#= con.Source.Name #>;
				
					else
					{
						DslModeling::ModelElement possibleParent = GetEmbeddingParent(allM<#= con.Name #>Instance.<#= con.Source.Name #>, parentTypeDomainClassId);
						if( possibleParent != null )
							return possibleParent;
					}
				}
			}

<#
					}
				}
#>
			return null;
		}		
<#
			}
		}
			
#>
		#endregion
		#endregion
	}	
}


<#+ 
		
private DomainProperty GetNameProperty(DomainClass dClass)
{
	DomainClass d = dClass;

    while (d != null)
    {
        foreach (DomainProperty property in d.Properties)
            if (property.IsElementName)
                return property;

        d = d.BaseClass;
    }

    return null;
}
#>