//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// This class represents the dependencies provider for the domain model.
	/// 
	/// Double-derived class to allow easier code customization.
	/// </summary>
	public partial class LanguageDSLDependenciesItemsProvider : LanguageDSLDependenciesItemsProviderBase
	{
		#region Singleton Instance
		private static LanguageDSLDependenciesItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static LanguageDSLDependenciesItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new LanguageDSLDependenciesItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }
		
		private LanguageDSLDependenciesItemsProvider()
		{
		}
        #endregion
	}

	/// <summary>
	/// This class represents the dependencies provider for the domain model.
	/// 
	/// This is the abstract base class.
	/// </summary>
	public abstract class LanguageDSLDependenciesItemsProviderBase
	{	
		#region Methods
        private static DependencyItemCategory[] AllCategories = null;
		
        /// <summary>
        /// Returns all dependency item categories as an array.
        /// </summary>
        /// <returns>Array of dependency item categories.</returns>
        public static DependencyItemCategory[] GetAllCategories()
        {
            if (AllCategories == null)
                AllCategories = new DependencyItemCategory[]{
                    DependencyItemCategory.Embedding, DependencyItemCategory.Embedded, 
                    DependencyItemCategory.Referencing, DependencyItemCategory.Referenced};

            return AllCategories;
        }
		
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
        /// <param name="modelElements">List of model elements to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        /// <returns>List of dependencies.</returns>
        public virtual DependenciesData GetDependencies(System.Collections.Generic.List<DslModeling::ModelElement> modelElements, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{
			DependenciesData dependenciesData = new DependenciesData();

			foreach(DslModeling::ModelElement modelElement in modelElements)
			{
				if(modelElement is global::Tum.PDE.LanguageDSL.ExternModelContext)
				{
					ExternModelContextDependencyItemsProvider.Instance.GetDependencies(dependenciesData, modelElement, excludedDomainModels, categories);
				}
				else if(modelElement is global::Tum.PDE.LanguageDSL.DomainRole)
				{
					DomainRoleDependencyItemsProvider.Instance.GetDependencies(dependenciesData, modelElement, excludedDomainModels, categories);
				}
				else if(modelElement is global::Tum.PDE.LanguageDSL.DomainProperty)
				{
					DomainPropertyDependencyItemsProvider.Instance.GetDependencies(dependenciesData, modelElement, excludedDomainModels, categories);
				}
				else if(modelElement is global::Tum.PDE.LanguageDSL.PropertyGridEditor)
				{
					PropertyGridEditorDependencyItemsProvider.Instance.GetDependencies(dependenciesData, modelElement, excludedDomainModels, categories);
				}
			}
			
			return dependenciesData;
		}
		#endregion
	}
}

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for ExternModelContext instance.
    /// </summary>
	public partial class ExternModelContextDependencyItemsProvider
	{
		#region Singleton Instance
		private static ExternModelContextDependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static ExternModelContextDependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new ExternModelContextDependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }

		/// <summary>
        /// Constructor.
        /// </summary>
		public ExternModelContextDependencyItemsProvider() : base()  
		{
		}

        #endregion
		
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
			#region ExternModelContextReferencesModelContext
            // get all instances of ExternModelContextReferencesModelContext				
            System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> ExternModelContextReferencesModelContextLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(modelElement, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId);
            if( ExternModelContextReferencesModelContextLinks.Count > 0 )
            {
            	foreach(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext link in ExternModelContextReferencesModelContextLinks)
            	{
            		bool bExclude = false;
            		if( excludedDomainModels.Count > 0 )
            		{	
            			DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.ModelContext);
            			if( excludedDomainModels.Contains(domainModel) )
            				bExclude = true;
            		}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.ExternModelContext, link.ModelContext);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}	
				}
			}
			#endregion
		}
		#endregion
	}
}

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for DomainRole instance.
    /// </summary>
	public partial class DomainRoleDependencyItemsProvider
	{
		#region Singleton Instance
		private static DomainRoleDependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static DomainRoleDependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new DomainRoleDependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }

		/// <summary>
        /// Constructor.
        /// </summary>
		public DomainRoleDependencyItemsProvider() : base()  
		{
		}

        #endregion
		
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
			#region DomainRoleReferencesRolePlayer
				// get all instances of DomainRoleReferencesRolePlayer				
			System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> DomainRoleReferencesRolePlayerLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(modelElement, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId);
			if( DomainRoleReferencesRolePlayerLinks.Count > 0 )
			{
				foreach(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer link in DomainRoleReferencesRolePlayerLinks)
				{
					bool bExclude = false;
					if( excludedDomainModels.Count > 0 )
					{	
						DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.AttributedDomainElement);
						if( excludedDomainModels.Contains(domainModel) )
						bExclude = true;
					}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{						
							if( category == DependencyItemCategory.Embedding )
							{
								if( link.DomainRole.Relationship is EmbeddingRelationship && link.DomainRole.Relationship.Source == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("EmbeddingRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);
								}
							}
							
							if( category == DependencyItemCategory.Embedded )
							{
								if( link.DomainRole.Relationship is EmbeddingRelationship && link.DomainRole.Relationship.Target == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("EmbeddingRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);								
								}
							}				

							if( category == DependencyItemCategory.Referencing )
							{
								if( link.DomainRole.Relationship is ReferenceRelationship && link.DomainRole.Relationship.Source == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("ReferenceRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);
								}																
							}				
							
							if( category == DependencyItemCategory.Referenced )
							{
								if( link.DomainRole.Relationship is ReferenceRelationship && link.DomainRole.Relationship.Target == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("ReferenceRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);								
								}								
							}
						}	
					}
				}
			
				
			}
			#endregion
		}
		#endregion
	}
}

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for DomainProperty instance.
    /// </summary>
	public partial class DomainPropertyDependencyItemsProvider
	{
		#region Singleton Instance
		private static DomainPropertyDependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static DomainPropertyDependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new DomainPropertyDependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }

		/// <summary>
        /// Constructor.
        /// </summary>
		public DomainPropertyDependencyItemsProvider() : base()  
		{
		}

        #endregion
		
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
			#region DomainPropertyReferencesType
			System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> DomainPropertyReferencesTypeLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(modelElement, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainPropertyDomainRoleId);
			if( DomainPropertyReferencesTypeLinks.Count > 0 )
			{
				foreach(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType link in DomainPropertyReferencesTypeLinks)
				{
					bool bExclude = false;
					if( excludedDomainModels.Count > 0 )
					{	
						DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.DomainType);
						if( excludedDomainModels.Contains(domainModel) )
							bExclude = true;
					}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.DomainProperty, link.DomainType);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}	
				}
			}
			#endregion
		}
		#endregion
	}
}

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for DomainType instance.
    /// </summary>
	public abstract class DomainTypeDependencyItemsProviderBase
	{
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
			#region DomainTypeReferencesPropertyGridEditor
		    // get all instances of DomainTypeReferencesPropertyGridEditor				
		    System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> DomainTypeReferencesPropertyGridEditorLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(modelElement, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId);
		    if( DomainTypeReferencesPropertyGridEditorLinks.Count > 0 )
		    {
		    	foreach(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor link in DomainTypeReferencesPropertyGridEditorLinks)
		    	{
		    		bool bExclude = false;
		    		if( excludedDomainModels.Count > 0 )
		    		{	
		    			DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.PropertyGridEditor);
		    			if( excludedDomainModels.Contains(domainModel) )
		    				bExclude = true;
		    		}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.DomainType, link.PropertyGridEditor);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}
		    	}
		    }			
			#endregion
		}
		#endregion
	}
	
	/// <summary>
    /// This class provides methods to retrieve dependency items for DomainType instance.
    /// </summary>
	public partial class DomainTypeDependencyItemsProvider : DomainTypeDependencyItemsProviderBase
	{
	
	}
}

namespace Tum.PDE.LanguageDSL
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for PropertyGridEditor instance.
    /// </summary>
	public abstract class PropertyGridEditorDependencyItemsProviderBase
	{
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
		}
		#endregion
	}
	
	/// <summary>
    /// This class provides methods to retrieve dependency items for PropertyGridEditor instance.
    /// </summary>
	public partial class PropertyGridEditorDependencyItemsProvider : PropertyGridEditorDependencyItemsProviderBase
	{
		#region Singleton Instance
		private static PropertyGridEditorDependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static PropertyGridEditorDependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new PropertyGridEditorDependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }
		
		/// <summary>
        /// Constructor.
        /// </summary>
		protected PropertyGridEditorDependencyItemsProvider() : base()
		{
		}
        #endregion
	
	}
}


