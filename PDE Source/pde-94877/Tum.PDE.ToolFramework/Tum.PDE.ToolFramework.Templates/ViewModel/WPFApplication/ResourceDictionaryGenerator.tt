<#@ template language="C#" inherits="BaseTemplate"#> 
<#@ import namespace="Tum.PDE.LanguageDSL"#>
<#@ output extension=".xaml" #>
<# 
	GenerateResourceDictionary(this.MetaModel);
#>
<#+ 
public void GenerateResourceDictionary(MetaModel dm)
{
#>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:<#= dm.Namespace#>.ViewModel"
					xmlns:view="clr-namespace:Tum.PDE.ToolFramework.Modeling.Visualization.Controls;assembly=Tum.PDE.ToolFramework.Modeling.Visualization"
					xmlns:diagrams="clr-namespace:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.DiagramSurface;assembly=Tum.PDE.ToolFramework.Modeling.Visualization"
					xmlns:dependencies="clr-namespace:Tum.PDE.ToolFramework.Modeling.Visualization.Controls.Dependencies;assembly=Tum.PDE.ToolFramework.Modeling.Visualization"
					xmlns:inter="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:beh="clr-namespace:Tum.PDE.ToolFramework.Modeling.Visualization.Behaviors;assembly=Tum.PDE.ToolFramework.Modeling.Visualization">
<!-- 	
	This code was generated by a tool.
	
	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.	
-->
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/Tum.PDE.ToolFramework.Modeling.Visualization;component/Themes/Generic.xaml"/>
<#+
#>	
	</ResourceDictionary.MergedDictionaries>
<#+
if( this.MetaModel.View.CreateModelTree )
{
#>

	<!-- Model tree template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>ModelTreeViewModel}">
        <view:ModelTreeControl x:Name="ModelTreeviewControl"/>
    </DataTemplate>

<#+
}
if( this.MetaModel.View.CreatePropertyGrid )
{
#>

    <!-- Property grid template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>PropertyGridViewModel}">
        <view:PropertyWindowControl x:Name="PropertyWindow"/>
    </DataTemplate>
<#+
}
if( this.MetaModel.View.CreateErrorList )
{
#>

    <!-- Error list template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>ErrorListViewModel}">
        <view:ErrorListControl x:Name="ErrorList"/>
    </DataTemplate>
<#+
}
if( this.MetaModel.View.CreateDependenciesView )
{
#>

	<!-- Depenendencies list template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>DependenciesViewModel}">
        <view:DependenciesControl x:Name="DependenciesList"/>
    </DataTemplate>	
<#+
}
#>

	<!-- Search template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>SearchViewModel}">
        <view:SearchWindowControl x:Name="SearchViewWnd"/>
    </DataTemplate>	
	
	<!-- Search result template -->
    <DataTemplate DataType="{x:Type c:<#= dm.Name #>SearchResultViewModel}">
        <view:SearchResultControl x:Name="SearchResultCtrl"/>
    </DataTemplate>	
	
	<!-- Diagram view models data templates -->
<#+
	foreach(DiagramClass diagramClass in dm.AllDiagramClasses)
	{
		if( diagramClass is SpecificDependencyDiagram)
		{
			if( (diagramClass as SpecificDependencyDiagram).DomainClass != null )
			{
			
#>
	<DataTemplate DataType="{x:Type c:<#= dm.Name #><#= diagramClass.Name #>SurfaceViewModel}">
		<dependencies:SpecificDependenciesViewControl/>
    </DataTemplate>	
<#+			
			}
		}
		else if( diagramClass is DependencyDiagram)
		{
#>
	<DataTemplate DataType="{x:Type c:<#= dm.Name #><#= diagramClass.Name #>SurfaceViewModel}">
		<dependencies:GraphDependenciesViewControl/>
    </DataTemplate>	
<#+			
		}
		else
		{
			if( diagramClass.IsCustom )
				continue;
#>
	<DataTemplate DataType="{x:Type c:<#= dm.Name #><#= diagramClass.Name #>SurfaceViewModel}">
	    <ScrollViewer x:Name="_tv_scrollviewer_" Background="White" Focusable="false" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible">
    	    <diagrams:DiagramDesigner HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="White" 
                                      ContextMenuOptions="{Binding Path=MenuOptions, Mode=OneWay}">
<#+
			if(this.EditorType == Tum.PDE.ToolFramework.Templates.GenerationEditorType.VSPlugin)
			{
#>
                <diagrams:DiagramDesigner.InputBindings>
                    <KeyBinding Command="{Binding Path=DeleteCommand}" Key="Delete"/>
                </diagrams:DiagramDesigner.InputBindings>

<#+
			}
			
#>
				<diagrams:DiagramDesigner.ContextMenu>
					<ContextMenu ItemContainerStyleSelector="{StaticResource ContextMenuItemStyleSelector}"/>
				</diagrams:DiagramDesigner.ContextMenu>
				<inter:Interaction.Behaviors>
                    <beh:FrameworkElementContextMenuBehavior/>
                </inter:Interaction.Behaviors>
			</diagrams:DiagramDesigner>
        </ScrollViewer>
    </DataTemplate>	
<#+
		}
		foreach(PresentationElementClass p in diagramClass.PresentationElements)
		{
			if( p is ShapeClass )
			{
				ShapeClass r = p as ShapeClass;
				if( !r.IsAutoGenerated )
					continue;
				
				string bindingTextBlockName = "DomainElementName";
				if( (p as ShapeClass).DomainClass != null )
				{
					if( CodeGenerationUtilities.GetNameProperty((p as ShapeClass).DomainClass) == null )
						bindingTextBlockName = "DomainElementFullName";
				}
					
#>

    <!-- <#= r.Name #> template -->
    <DataTemplate DataType="{x:Type c:<#= r.Name #>DiagramItemViewModel}">
        <Grid>
            <Border Name="Bd" Margin="0" BorderThickness="<#= r.BorderThickness.ToString() #>" Padding="0" SnapsToDevicePixels="True"  CornerRadius="<#= r.BorderCornerRadius.ToString() #>"
					Background="<#= System.Drawing.ColorTranslator.ToHtml(r.BackgroundBrush) #>" BorderBrush="<#= System.Drawing.ColorTranslator.ToHtml(r.BorderBrush) #>"
					IsHitTestVisible="<#= r.BorderIsHitTestVisible.ToString() #>" Focusable="<#= r.BorderFocusable.ToString() #>">
                <Border.Effect>
                    <DropShadowEffect BlurRadius="<#= r.BorderOuterSize.ToString() #>" ShadowDepth="2" Color="<#= System.Drawing.ColorTranslator.ToHtml(r.BorderOuterBrush) #>"/>
                </Border.Effect>
                <TextBlock Margin="3" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=<#= bindingTextBlockName #>}" ToolTip="{Binding Path=<#= bindingTextBlockName #>}" TextTrimming="CharacterEllipsis"/>
            </Border>
        </Grid>
    </DataTemplate>
<#+
			}
			else if( p is RelationshipShapeClass)
			{
				RelationshipShapeClass r = p as RelationshipShapeClass;
				if( !r.IsAutoGenerated )
					continue;
				
#>

    <!-- <#= r.Name #> template -->
    <Style x:Key="<#= r.Name #>PathStyle" TargetType="Path">
        <Setter Property="StrokeThickness" Value="<#= r.StrokeThickness.ToString() #>"/>
        <Setter Property="Stroke" Value="<#= System.Drawing.ColorTranslator.ToHtml(r.Stroke) #>"/>
    </Style>
    <DataTemplate DataType="{x:Type c:<#= r.Name #>DiagramItemLinkViewModel}">
        <diagrams:DiagramDesignerItemLink StartAnchorStyle="<#= r.StartAnchorStyle.ToString() #>" EndAnchorStyle="<#= r.EndAnchorStyle.ToString() #>" PathStyle="{StaticResource <#= r.Name #>PathStyle}"/>
    </DataTemplate>
<#+
			}
			else if( p is MappingRelationshipShapeClass)
			{
				MappingRelationshipShapeClass r = p as MappingRelationshipShapeClass;
				if( !r.IsAutoGenerated )
					continue;
				
#>

    <!-- <#= r.Name #> template -->
    <Style x:Key="<#= r.Name #>PathStyle" TargetType="Path">
        <Setter Property="StrokeThickness" Value="<#= r.StrokeThickness.ToString() #>"/>
        <Setter Property="Stroke" Value="<#= System.Drawing.ColorTranslator.ToHtml(r.Stroke) #>"/>
    </Style>
    <DataTemplate DataType="{x:Type c:<#= r.Name #>DiagramItemLinkViewModel}">
        <diagrams:DiagramDesignerItemLink StartAnchorStyle="<#= r.StartAnchorStyle.ToString() #>" EndAnchorStyle="<#= r.EndAnchorStyle.ToString() #>" PathStyle="{StaticResource <#= r.Name #>PathStyle}"/>
    </DataTemplate>
<#+
			}
		}
	}
#>
</ResourceDictionary>
<#+
}
#>