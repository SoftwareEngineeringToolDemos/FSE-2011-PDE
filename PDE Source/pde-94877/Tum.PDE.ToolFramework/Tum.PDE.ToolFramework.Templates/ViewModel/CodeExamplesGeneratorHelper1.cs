// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tum.PDE.ToolFramework.Templates.ViewModel
{
    using Tum.PDE.LanguageDSL;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System;
    
    
    #line 1 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\CodeExamplesGeneratorHelper.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class CodeExamplesGeneratorHelper : BaseTemplate
    {
        public override string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write(" \r\n");
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 9 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\CodeExamplesGeneratorHelper.tt"
 
public string GenerateCodeExampleForDiagram(MetaModel dm)
{
	this.GenerationEnvironment = null;
	this.GenerateCodeExampleForDiagramInternal(dm);
	return this.GenerationEnvironment.ToString();
}

private void GenerateCodeExampleForDiagramInternal(MetaModel dm)
{	

        
        #line default
        #line hidden
        
        #line 19 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\CodeExamplesGeneratorHelper.tt"
this.Write("    /// <summary>\r\n    /// This diagram was generated to illustrate some concepts" +
        " of PDE, especially when working with views.\r\n    /// </summary>\r\n    public cla" +
        "ss CodeExamplesDiagram : DslEditorViewDiagrams::DiagramSurfaceViewModel\r\n    {\r\n" +
        "        /// <summary>\r\n        /// Constuctor.\r\n        /// </summary>\r\n        " +
        "/// <param name=\"viewModelStore\">View model store containing this view model.</p" +
        "aram>\r\n\t\t/// <param name=\"diagram\">Diagram.</param>\r\n\t\t/// <param name=\"modelCon" +
        "text\">Model context.</param>\r\n        public CodeExamplesDiagram(VModellXTViewMo" +
        "delStore viewModelStore, DslEditorDiagrams::Diagram diagram, DslEditorModeling::" +
        "ModelContext modelContext)\r\n            : base(viewModelStore, diagram, modelCon" +
        "text)\r\n        {\r\n\t\t\t\r\n        }\r\n\r\n        #region 1. Messaging\r\n        /*****" +
        "**********************\r\n           For the purpose of messaging PDE consists of " +
        "an EventManager allowing the subscription or unsubscption to events.\r\n          " +
        " Every event can either be published or be subscribed to (see example below). Th" +
        "e concept of messaging in PDE follows the \r\n           EventAggregator pattern (" +
        "see PRISM for more details).\r\n         \r\n           The following events might b" +
        "e of interest when working with views:\r\n            * ActiveViewChangedEvent    " +
        "(You can also override the \'IsActiveView\' method)\r\n            * BringToFrontVie" +
        "wModelRequestEvent\r\n            * CloseViewModelRequestEvent\r\n            * Open" +
        "ViewModelEvent\r\n            * ResetViewModelEvent   (You can also override the \'" +
        "Reset\' method)\r\n            * SelectionChangedEvent   (You can also override the" +
        " \'ReactOnViewSelection\' method)\r\n            * ShowViewModelRequestEvent\r\n      " +
        "      \r\n           PDE also has evets for model-based changes:\r\n            * Mo" +
        "delElementAddedEvent\r\n            * ModelElementCustomEvent\r\n            * Model" +
        "ElementDeletedEvent\r\n            * ModelElementEvent\r\n            * ModelElement" +
        "LinkAddedEvent\r\n            * ModelElementLinkDeletedEvent\r\n            * ModelE" +
        "lementPropertyChangedEvent\r\n            * ModelRolePlayerChangedEvent\r\n         " +
        "   * ModelRolePlayerMovedEvent\r\n           \r\n            (See Tum.PDE.ToolFramew" +
        "ork.Modeling.Visualization.ViewModel.Messaging.Events for more details.)\r\n      " +
        "   \r\n            Examle 1: Subscribe to model element creation and deletion even" +
        "ts for a specific element.\r\n            Examle 2: Subscribe to relationship crea" +
        "tion, deletion and role player changes for a specific relationship.\r\n          \r" +
        "\n           HINT: Keep in mind that there you can have specific element view mod" +
        "els generated for every element of your model.\r\n                 To do so, selec" +
        "t an element in the LanguageDSL-Designer and set the property \"Generate Specific" +
        " View Model\" to true.\r\n        ***************************/\r\n        protected o" +
        "verride void Subscribe()\r\n        {\r\n            base.Subscribe();\r\n\r\n          " +
        "  // HINT: keep in mind that there are multiple overloads for the Subscribe/Unsu" +
        "bscribe methods\r\n\r\n            // Example 1: Vorgehensbaustein\r\n            this" +
        ".EventManager.GetEvent<DslEditorEvents::ModelElementAddedEvent>().Subscribe(\r\n  " +
        "              this.Store.DomainDataDirectory.FindDomainClass(Tum.VModellXT.Stati" +
        "k.Vorgehensbaustein.DomainClassId), OnVorgehensbausteinAdded);\r\n            this" +
        ".EventManager.GetEvent<DslEditorEvents::ModelElementDeletedEvent>().Subscribe(\r\n" +
        "                this.Store.DomainDataDirectory.FindDomainClass(Tum.VModellXT.Sta" +
        "tik.Vorgehensbaustein.DomainClassId), OnVorgehensbausteinDeleted);\r\n\r\n          " +
        "  /*\r\n             *  1. Every model element has a unique DomainClassID\r\n       " +
        "      *  2. The metamodel to the generated model is available through domain dat" +
        "a reflection.\r\n             *     This is the DomainDataDirectory contained in t" +
        "he Store.\r\n             *  3. The method FindDomainClass returns a DomainClassIn" +
        "fo class, which basically is\r\n             *     equal to the Vorgehensbaustein-" +
        "DomainClass in the LanguageDSL (see DomainMetaModel.lngdsl).\r\n             *    " +
        " This DomainClassInfo allows to lookup certain properties of the metamodel class" +
        " at runtime.\r\n            */\r\n\r\n\r\n            // Example 2: VorgehensbausteinBas" +
        "iertAufVorgehensbaustein, assume we have a Vorgehensbaustein present.\r\n         " +
        "   this.EventManager.GetEvent<DslEditorEvents::ModelElementLinkAddedEvent>().Sub" +
        "scribe(this.Store.DomainDataDirectory.GetDomainRelationship(Tum.VModellXT.Statik" +
        ".VorgehensbausteinBasiertAufVorgehensbaustein.DomainClassId),\r\n                t" +
        "rue, vorgehensbaustein.Id, new System.Action<DslModeling::ElementAddedEventArgs>" +
        "(OnReferenceAdded));\r\n\r\n            this.EventManager.GetEvent<DslEditorEvents::" +
        "ModelElementLinkDeletedEvent>().Subscribe(this.Store.DomainDataDirectory.GetDoma" +
        "inRelationship(Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehensbaustein" +
        ".DomainClassId),\r\n                true, vorgehensbaustein.Id, new System.Action<" +
        "DslModeling::ElementDeletedEventArgs>(OnReferenceRemoved));\r\n\r\n            // Ge" +
        "t a notification whenever the source Vorgehensbaustein changes for a referenced " +
        "Vorgehensbaustein\r\n            this.EventManager.GetEvent<DslEditorEvents::Model" +
        "RolePlayerChangedEvent>().Subscribe(this.Store.DomainDataDirectory.GetDomainRole" +
        "(Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehensbaustein.Vorgehensbaus" +
        "teinSourceDomainRoleId),\r\n                new System.Action<DslModeling::RolePla" +
        "yerChangedEventArgs>(OnReferenceChanged));\r\n\r\n            // Get a notification " +
        "whenever the referenced Vorgehensbaustein of a Vorgehensbaustein changes\r\n      " +
        "      this.EventManager.GetEvent<DslEditorEvents::ModelRolePlayerChangedEvent>()" +
        ".Subscribe(this.Store.DomainDataDirectory.GetDomainRole(Tum.VModellXT.Statik.Vor" +
        "gehensbausteinBasiertAufVorgehensbaustein.VorgehensbausteinTargetDomainRoleId),\r" +
        "\n                new System.Action<DslModeling::RolePlayerChangedEventArgs>(OnRe" +
        "ferenceChanged));\r\n        }\r\n\r\n        protected override void Unsubscribe()\r\n " +
        "       {\r\n            base.Unsubscribe();\r\n\r\n            // Example 1:\r\n        " +
        "    this.EventManager.GetEvent<DslEditorEvents::ModelElementAddedEvent>().Unsubs" +
        "cribe(\r\n                this.Store.DomainDataDirectory.FindDomainClass(Tum.VMode" +
        "llXT.Statik.Vorgehensbaustein.DomainClassId), OnVorgehensbausteinAdded);\r\n      " +
        "      this.EventManager.GetEvent<DslEditorEvents::ModelElementDeletedEvent>().Un" +
        "subscribe(\r\n                this.Store.DomainDataDirectory.FindDomainClass(Tum.V" +
        "ModellXT.Statik.Vorgehensbaustein.DomainClassId), OnVorgehensbausteinDeleted);\r\n" +
        "\r\n            // Example 2: VorgehensbausteinBasiertAufVorgehensbaustein, assume" +
        " we have a Vorgehensbaustein present.\r\n            this.EventManager.GetEvent<Ds" +
        "lEditorEvents::ModelElementLinkAddedEvent>().Unsubscribe(this.Store.DomainDataDi" +
        "rectory.GetDomainRelationship(Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVo" +
        "rgehensbaustein.DomainClassId),\r\n                true, vorgehensbaustein.Id, new" +
        " System.Action<DslModeling::ElementAddedEventArgs>(OnReferenceAdded));\r\n        " +
        "    this.EventManager.GetEvent<DslEditorEvents::ModelElementLinkDeletedEvent>()." +
        "Unsubscribe(this.Store.DomainDataDirectory.GetDomainRelationship(Tum.VModellXT.S" +
        "tatik.VorgehensbausteinBasiertAufVorgehensbaustein.DomainClassId),\r\n            " +
        "    true, vorgehensbaustein.Id, new System.Action<DslModeling::ElementDeletedEve" +
        "ntArgs>(OnReferenceRemoved));\r\n            this.EventManager.GetEvent<DslEditorE" +
        "vents::ModelRolePlayerChangedEvent>().Unsubscribe(this.Store.DomainDataDirectory" +
        ".GetDomainRole(Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehensbaustein" +
        ".VorgehensbausteinSourceDomainRoleId),\r\n                new System.Action<DslMod" +
        "eling::RolePlayerChangedEventArgs>(OnReferenceChanged));\r\n        }\r\n\r\n        /" +
        "/ Example 1:\r\n        private void OnVorgehensbausteinAdded(DslModeling::Element" +
        "AddedEventArgs args)\r\n        {\r\n            Tum.VModellXT.Statik.Vorgehensbaust" +
        "ein element = args.ModelElement as Tum.VModellXT.Statik.Vorgehensbaustein;\r\n    " +
        "        this.VorgehensbausteinVM = new DslEditorViewModels::BaseModelElementView" +
        "Model(this.ViewModelStore, element, true);\r\n        }\r\n        private void OnVo" +
        "rgehensbausteinDeleted(DslModeling::ElementDeletedEventArgs args)\r\n        {\r\n  " +
        "          Tum.VModellXT.Statik.Vorgehensbaustein element = args.ModelElement as " +
        "Tum.VModellXT.Statik.Vorgehensbaustein;\r\n\t\t\tif( this.VorgehensbausteinVM != null" +
        " )\r\n\t\t\t\tif( this.VorgehensbausteinVM.Element == element )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.Vorg" +
        "ehensbausteinVM.Dispose();\r\n\t\t\t\t\tthis.VorgehensbausteinVM = null;\r\n\t\t\t\t}\r\n      " +
        "  }\r\n\t\tprivate DslEditorViewModels::BaseModelElementViewModel vorgehensbausteinV" +
        "M = null;\r\n\t\tprivate DslEditorViewModels::BaseModelElementViewModel Vorgehensbau" +
        "steinVM\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn this.vorgehensbausteinVM;\r\n\t\t\t}\r\n\t\t\tpriva" +
        "te set\r\n\t\t\t{\r\n\t\t\t\tthis.vorgehensbausteinVM = value;\r\n\t\t\t\tOnPropertyChanged(\"Vorg" +
        "ehensbausteinVM\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n        // Example 2:\r\n        private void Add" +
        "Reference(Tum.VModellXT.Statik.Vorgehensbaustein node)\r\n        {\r\n\t\t\t// ..\r\n   " +
        "     }\r\n        private void RemoveReference(Tum.VModellXT.Statik.Vorgehensbaust" +
        "ein node)\r\n        {\r\n\t\t\t// ..\r\n\t    }\r\n\r\n        private void OnReferenceAdded(" +
        "DslModeling::ElementAddedEventArgs args)\r\n        {\r\n            Tum.VModellXT.S" +
        "tatik.VorgehensbausteinBasiertAufVorgehensbaustein con\r\n                = args.M" +
        "odelElement as Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehensbaustein" +
        ";\r\n            if (con != null)\r\n            {\r\n                AddReference(con" +
        ".VorgehensbausteinTarget);\r\n            }\r\n        }\r\n        private void OnRef" +
        "erenceRemoved(DslModeling::ElementDeletedEventArgs args)\r\n        {\r\n           " +
        " Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehensbaustein con\r\n        " +
        "        = args.ModelElement as Tum.VModellXT.Statik.VorgehensbausteinBasiertAufV" +
        "orgehensbaustein;\r\n            if (con != null)\r\n            {\r\n                " +
        "RemoveReference(con.VorgehensbausteinTarget);\r\n            }\r\n\r\n        }\r\n     " +
        "   private void OnReferenceChanged(DslModeling::RolePlayerChangedEventArgs args)" +
        "\r\n        {\r\n            Tum.VModellXT.Statik.VorgehensbausteinBasiertAufVorgehe" +
        "nsbaustein con\r\n                = args.ElementLink as Tum.VModellXT.Statik.Vorge" +
        "hensbausteinBasiertAufVorgehensbaustein;\r\n            if (con != null)\r\n        " +
        "    {\r\n                if (args.DomainRole.Id == Tum.VModellXT.Statik.Vorgehensb" +
        "austeinBasiertAufVorgehensbaustein.VorgehensbausteinSourceDomainRoleId)\r\n       " +
        "         {\r\n                    if (args.OldRolePlayerId == vorgehensbaustein.Id" +
        ")\r\n                        RemoveReference(con.VorgehensbausteinTarget);\r\n\r\n    " +
        "                if (args.NewRolePlayerId == vorgehensbaustein.Id)\r\n             " +
        "           AddReference(con.VorgehensbausteinTarget);\r\n                }\r\n      " +
        "          else if (args.DomainRole.Id == global::Tum.VModellXT.Statik.Vorgehensb" +
        "austeinBasiertAufVorgehensbaustein.VorgehensbausteinTargetDomainRoleId)\r\n       " +
        "         {\r\n                    if (args.OldRolePlayer != null)\r\n               " +
        "         RemoveReference(args.OldRolePlayer as global::Tum.VModellXT.Statik.Vorg" +
        "ehensbaustein);\r\n\r\n                    if (args.NewRolePlayer != null)\r\n        " +
        "                AddReference(args.NewRolePlayer as global::Tum.VModellXT.Statik." +
        "Vorgehensbaustein);\r\n                }\r\n            }\r\n        }  \r\n        #end" +
        "region\r\n    \r\n\t\t#region 2. Xaml\r\n\t\t// This Xaml represents a possible view defin" +
        "ition for the code examples diagram\r\n\t\txmlns:vm=\"clr-namespace:Tum.VModellXT.Vie" +
        "wModel\"\r\n\t\t\r\n\t\t// 1. RessourceDictionary (Resources.xaml)\r\n\t\t<DataTemplate DataT" +
        "ype=\"{x:Type vm:CodeExamplesDiagram}\">\r\n        \t<ctrl:CodeExamplesDiagram Horiz" +
        "ontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\"/>\r\n    \t</DataTemplate>\r\n\t\t" +
        "\r\n\t\t// 2. CodeExamplesDiagram User-Control\r\n\t\t<Grid>\r\n        \t<Grid Margin=\"10\"" +
        ">\r\n            \t<Grid.RowDefinitions>\r\n                \t<RowDefinition Height=\"2" +
        "4\"></RowDefinition>\r\n                \t<RowDefinition Height=\"34\"></RowDefinition" +
        ">\r\n                \t<RowDefinition Height=\"3\"></RowDefinition>\r\n            \t</G" +
        "rid.RowDefinitions>\r\n\r\n            \t<TextBlock Text=\"Current element: \" Grid.Row" +
        "=\"0\" VerticalAlignment=\"Center\"/>\r\n            \t<TextBlock Text=\"{Binding Path=V" +
        "orgehensbausteinVM.DomainElementFullName, Mode=OneTime}\" Grid.Row=\"1\" VerticalAl" +
        "ignment=\"Center\" FontSize=\"16\"/>\r\n            \t<Border Grid.Row=\"2\" Height=\"1\" B" +
        "orderThickness=\"1\" BorderBrush=\"DodgerBlue\"/>\r\n        \t</Grid>\r\n    \t</Grid>\r\n\t" +
        "\t#endregion\r\n\t\r\n\t\t#region 3. Commanding\r\n\t\t// 1. Code:\t\t\r\n\t\tprivate DslEditorCom" +
        "mands::DelegateCommand navigateToElementCommand;\r\n        public DslEditorComman" +
        "ds::DelegateCommand NavigateToElementCommand\r\n        {\r\n            get\r\n      " +
        "      {\r\n                return this.navigateToElementCommand;\r\n            }\r\n " +
        "       }\r\n\t\t\r\n\t\t/// <summary>\r\n        /// Initialize.\r\n        /// </summary>\r\n" +
        "        protected override void Initialize()\r\n        {\r\n            base.Initia" +
        "lize();\r\n\r\n            this.navigateToElementCommand = new DslEditorCommands::De" +
        "legateCommand(NavigateToElementCommandExecuted);\r\n        }\r\n\t\t\r\n\t\tprivate void " +
        "NavigateToElementCommandExecuted()\r\n        {\r\n            BaseModelElementViewM" +
        "odel vm = some selected view model.\r\n            if (vm != null)\r\n            {\r" +
        "\n                if (vm.Element != null)\r\n                {\r\n                   " +
        " SelectedItemsCollection col = new SelectedItemsCollection();\r\n                 " +
        "   col.Add(vm.Element);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Publish event notifying that the selecte" +
        "d element has changed.\r\n                    EventManager.GetEvent<SelectionChang" +
        "edEvent>().Publish(new SelectionChangedEventArgs(this, col));\r\n                }" +
        "\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\t// 2. Xaml (in the data template e.g.:):\r\n\t\t<Button " +
        "Command=\"{Binding Path=NavigateToElementCommand}\">\r\n            ... content\r\n   " +
        "     </Button>\r\n\t\t#endregion\r\n\t\r\n\t\t#region 4. Drag&Drop\r\n\t\t// 1. Code:\r\n        " +
        "public override void DragOver(DropInfo dropInfo)\r\n        {\r\n\t\t\t// ..\r\n        }" +
        "\r\n        public override void Drop(DropInfo dropInfo)\r\n\t\t{\r\n\t\t\t// ..\r\n        }" +
        "\r\n\t\t\r\n\t\t// 2. Xaml:\r\n\t\txmlns:dd=\"clr-namespace:Tum.PDE.ToolFramework.Modeling.Vi" +
        "sualization.Controls.Attached.DragDrop\"\r\n\t\t\r\n\t\t<Border HorizontalAlignment=\"Stre" +
        "tch\" VerticalAlignment=\"Stretch\" \r\n\t\t\tBackground=\"Transparent\" dd:DragDrop.IsDro" +
        "pTarget=\"True\" dd:DragDrop.DropHandler=\"{Binding}\"/>\r\n\t\t#endregion\r\n\t\t\r\n\t\t#regio" +
        "n 5. Transactions\r\n\t\t// Use Transaction to create, modify or delete model elemen" +
        "ts/relationships.\r\n\t\tusing(Transaction t = this.Store.TransactionManager.BeginTr" +
        "ansaction(\"Description\") )\r\n\t\t{\r\n\t\t\tt.Commit();\r\n\t\t}\r\n\t\t\r\n\t\t// HINT: Transaction" +
        " can be nested as well.\r\n\t\t#endregion\r\n\t\t\r\n\t\t#region 6. Domain Model Services\r\n\t" +
        "\t// Every PDE-based DSL has a set of domain model services:\r\n\t\t// * ModelElement" +
        "NameProvider\r\n\t\t// * ModelElementTypeProvider\r\n\t\t// * ModelElementParentProvider" +
        "\r\n\t\t// * ModelElementChildrenProvider\r\n\t\t// * ModelElementParentProvider\r\n\t\t// *" +
        " ...\r\n\t\t// \r\n\t\t// The domain model services can also be accessed from every mode" +
        "l element (element.GetDomainModelServices()).\r\n\t\t#endregion\r\n\t}\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 322 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\CodeExamplesGeneratorHelper.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
