<#@ template language="C#" inherits="BaseTemplate"#> 
<#@ import namespace="Tum.PDE.LanguageDSL"#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslEditorModeling = global::Tum.PDE.ToolFramework.Modeling;
using DslEditorDiagrams = global::Tum.PDE.ToolFramework.Modeling.Diagrams;
using DslEditorViewModel = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel;
using DslEditorViewModelData = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data;
using DslEditorViewDiagrams = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface;
using DslEditorViewModelModelTree = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.ModelTree;
using DslEditorViewModelPropertyGrid = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.PropertyGrid;
using DslEditorViewModelDependencies = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Dependencies;
using DslEditorViewModelServices = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Services;
 
using <#= this.MetaModel.Namespace #>.ViewModel.ModelTree;
using <#= this.MetaModel.Namespace #>.ViewModel.PropertyGrid;

<#
GenerateViewModelData(this.MetaModel);
#>
<#+ 
public void GenerateViewModelData(MetaModel dm)
{
	List<AttributedDomainElement> allDomainElementsUnsorted = new List<AttributedDomainElement>();
	allDomainElementsUnsorted.AddRange(dm.AllClasses);
	allDomainElementsUnsorted.AddRange(dm.AllRelationships);
	IEnumerable allDomainElements = CodeGenerationUtilities.SortDomainClassesByInheritance(allDomainElementsUnsorted);	
	
	bool bFirstIf = true;
#>
namespace <#= dm.Namespace #>.ViewModel
{
	/// <summary>
	/// This class represents the view model store of <#= dm.ApplicationName #>.
	/// 
	/// Double-derived class to allow easier code customization.
	/// </summary>
	public partial class <#= dm.Name #>ViewModelStore : <#= dm.Name #>ViewModelStoreBase
	{
		#region Constructor
		/// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
        public <#= dm.Name #>ViewModelStore(DslEditorModeling::ModelData modelData)
            : this(modelData, true)
        {

        }
		
<#+
		if( dm.LanguageType == LanguageType.WPFEditor || dm.LanguageType == LanguageType.VMXEditor)
		{
#>	
		/// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
        /// <param name="options">Options.</param>
        public <#= dm.Name #>ViewModelStore(DslEditorModeling::ModelData modelData, Tum.PDE.ToolFramework.Modeling.Visualization.Base.ViewModelOptions options)
            : base(modelData, options)
        {
		}
<#+
		}
#>
		
		/// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
		/// <param name="bHookUpEvents">True if events listeners should be initialized.</param>
        public <#= dm.Name #>ViewModelStore(DslEditorModeling::ModelData modelData, bool bHookUpEvents)
            : this(modelData, bHookUpEvents, null)
        {

        }		
		
		/// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
		/// <param name="bHookUpEvents">True if events listeners should be initialized.</param>
		/// <param name="ownedByStore">Store owning this store.</param>
        public <#= dm.Name #>ViewModelStore(DslEditorModeling::ModelData modelData, bool bHookUpEvents, DslEditorViewModelData::ViewModelStore ownedByStore)
            : base(modelData, bHookUpEvents, ownedByStore)
        {
        }			
		#endregion
	}
	
	/// <summary>
	/// This class represents the view model store of <#= dm.ApplicationName #>.
	/// 
	/// This is the abstract base class.
	/// </summary>
	public abstract class <#= dm.Name #>ViewModelStoreBase : DslEditorViewModelData::ViewModelStore
	{
		#region Constructor
<#+
		if( dm.LanguageType == LanguageType.WPFEditor || dm.LanguageType == LanguageType.VMXEditor)
		{
#>			
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
		/// <param name="bHookUpEvents">True if events listeners should be initialized.</param>
		/// <param name="options">Options.</param>
        protected <#= dm.Name #>ViewModelStoreBase(DslEditorModeling::ModelData modelData, Tum.PDE.ToolFramework.Modeling.Visualization.Base.ViewModelOptions options)
            : base(modelData, true, null)
        {
			this.Options = options;
			if( this.Options == null )
				this.Options = new <#= dm.Name #>ViewModelOptions();
        }
<#+
		}
#>			
		
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
		/// <param name="bHookUpEvents">True if events listeners should be initialized.</param>
        protected <#= dm.Name #>ViewModelStoreBase(DslEditorModeling::ModelData modelData, bool bHookUpEvents)
            : this(modelData, bHookUpEvents, null)
        {
        }		
		
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="modelData">Document data.</param>
		/// <param name="bHookUpEvents">True if events listeners should be initialized.</param>
		/// <param name="ownedByStore">Store owning this store.</param>
        protected <#= dm.Name #>ViewModelStoreBase(DslEditorModeling::ModelData modelData, bool bHookUpEvents, DslEditorViewModelData::ViewModelStore ownedByStore)
            : base(modelData, bHookUpEvents, ownedByStore)
        {
<#+
		if( dm.LanguageType == LanguageType.WPFEditor || dm.LanguageType == LanguageType.VMXEditor)
		{
#>			
			this.Options = new <#= dm.Name #>ViewModelOptions();
<#+
		}
#>			
        }		
		#endregion
		
		#region Initialization
        private DslEditorViewModelData::ViewModelStore GetExternViewModelStore(DslEditorViewModelData::ViewModelStore st, System.Type type)
        {
            foreach (DslEditorViewModelData::ViewModelStore s in st.ExternStores)
                if( s.GetType() == type )
                    return s;

            return null;
        }
		
        /// <summary>
        /// Register extern stores.
        /// </summary>
        protected override void RegisterExternStores()
		{
<#+
		int counter = 0;
		foreach(MetaModelLibrary lib in dm.MetaModelLibraries)
		{
			if( lib.ImportedLibrary == null )
				continue;
			
			MetaModel m = (lib.ImportedLibrary as MetaModel);
#>
			DslEditorViewModelData::ViewModelStore v<#= counter #> = GetExternViewModelStore(this.TopMostStore, typeof(<#= m.Namespace #>.ViewModel.<#= m.Name #>ViewModelStore));
			if( v<#= counter #> == null )
				v<#= counter #> = new <#= m.Namespace #>.ViewModel.<#= m.Name #>ViewModelStore(this.ModelData, true, this);
			this.ExternStores.Add(v<#= counter #>);
			
<#+
			counter++;
		}
#>
		}
		
        /// <summary>
        /// Gets the view model factory which provides methods for the creation of view models for model elements from the model.
        /// </summary>
        public override DslEditorViewModelData::ViewModelFactory Factory 
		{ 
			get
			{
				return new <#= dm.Name #>ViewModelFactory(this);
			}
		}
		#endregion
		
		#region Methods
		/// <summary>
        /// Called to load options when the application starts.
        /// </summary>
        public override void LoadOptions(DslEditorViewModelServices::IMessageBoxService messageBox)
        {
<#+
		if( dm.LanguageType == LanguageType.WPFEditor || dm.LanguageType == LanguageType.VMXEditor)
		{
#>
			this.Options = new <#= dm.Name #>ViewModelOptions();
			
			try
			{
            	string directory = this.ModelData.GetDomainModelServices().ModelDataOptions.AppDataDirectory;
				string path = directory + System.IO.Path.DirectorySeparatorChar + <#= dm.Name #>ViewModelOptions.OptionsFileName;
				this.Options.Deserialize(path);
			}
			catch(System.Exception ex)
			{
				messageBox.ShowError("Couldn't open options: " + ex.Message);
				
			}
<#+
		}
#>
		}
		
        /// <summary>
        /// Called to save options when the application exits.
        /// </summary>
        public override void SaveOptions(DslEditorViewModelServices::IMessageBoxService messageBox)
        {
<#+
		if( dm.LanguageType == LanguageType.WPFEditor || dm.LanguageType == LanguageType.VMXEditor)
		{
#>		
			// save options
			try
			{
            	string directory = this.ModelData.GetDomainModelServices().ModelDataOptions.AppDataDirectory;
				string path = directory + System.IO.Path.DirectorySeparatorChar + <#= dm.Name #>ViewModelOptions.OptionsFileName;
				this.Options.Serialize(path);
			}
			catch(System.Exception ex)
			{
				messageBox.ShowError("Couldn't save options: " + ex.Message);
			}
<#+
		}
#>		
		}
		#endregion
	}
	
	/// <summary>
	/// This class represents the view model factory of <#= dm.ApplicationName #>.
	/// 
	/// Double-derived class to allow easier code customization.
	/// </summary>
	public partial class <#= dm.Name #>ViewModelFactory : <#= dm.Name #>ViewModelFactoryBase
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="viewModelStore">View model store.</param>
        public <#= dm.Name #>ViewModelFactory(DslEditorViewModelData::ViewModelStore viewModelStore)
            : base(viewModelStore)
        {
        }
		#endregion
	}
	
	/// <summary>
	/// This class represents the view model factory of <#= dm.ApplicationName #>.
	/// 
	/// This is the abstract base class.
	/// </summary>
	public abstract class <#= dm.Name #>ViewModelFactoryBase : DslEditorViewModelData::ViewModelFactory
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="viewModelStore">View model store.</param>
        public <#= dm.Name #>ViewModelFactoryBase(DslEditorViewModelData::ViewModelStore viewModelStore)
            : base(viewModelStore)
        {
        }
		#endregion
		
		#region Methods
		
		#region CreateDiagramLinkViewModel
	    /// <summary>
        /// Creates the view model for the given link shape.
        /// </summary>
        /// <param name="nodeShapeType">Shape type for which the view model is to be created.</param>
        /// <param name="diagram">Diagram surface vm.</param>
        /// <param name="nodeShape">Link shape.</param>
        /// <returns>
        /// View model of type BaseDiagramItemLinkViewModel if a view model can be created for the given element. Null otherwise.</returns>
        public override DslEditorViewModel.DiagramSurface.BaseDiagramItemLinkViewModel CreateDiagramLinkViewModel(System.Guid nodeShapeType, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::LinkShape nodeShape)
        {
<#+
	 	ReadOnlyCollection<RelationshipShapeClass> rShapeClasses = dm.Store.ElementDirectory.FindElements<RelationshipShapeClass>();
		foreach(RelationshipShapeClass shapeClass in rShapeClasses)
		{
			if( shapeClass.ReferenceRelationship == null )
				continue;
#>
			if( nodeShapeType == <#= shapeClass.GetFullName(true) #>.DomainClassId )
				return new <#= shapeClass.GetMetaModel().Namespace #>.ViewModel.<#= shapeClass.Name #>DiagramItemLinkViewModel(this.Store, diagram, nodeShape);

<#+
		}
		
		ReadOnlyCollection<MappingRelationshipShapeClass> mapShapeClasses = dm.Store.ElementDirectory.FindElements<MappingRelationshipShapeClass>();
		foreach(MappingRelationshipShapeClass shapeClass in mapShapeClasses)
		{
			if( shapeClass.DomainClass == null || shapeClass.Source == null || shapeClass.Target == null)
				continue;
#>
			if( nodeShapeType == <#= shapeClass.GetFullName(true) #>.DomainClassId )
				return new <#= shapeClass.GetMetaModel().Namespace #>.ViewModel.<#= shapeClass.Name #>DiagramItemLinkViewModel(this.Store, diagram, nodeShape);

<#+
		}
#>

            return null;
        }

        #endregion
		
		#region CreateDiagramItemViewModel
        /// <summary>
        /// Creates the view model for the given node shape.
        /// </summary>
        /// <param name="nodeShapeType">Shape type for which the view model is to be created.</param>
		/// <param name="diagram">Diagram surface vm.</param>
		/// <param name="nodeShape">Node shape.</param>
        /// <returns>
        /// View model of type DiagramItemElementViewModel if a view model can be created for the given element. Null otherwise.
		/// </returns>
        public override DslEditorViewModel.DiagramSurface.DiagramItemElementViewModel CreateDiagramItemViewModel(System.Guid nodeShapeType, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::NodeShape nodeShape)
        {
<#+
	 	ReadOnlyCollection<ShapeClass> shapeClasses = dm.Store.ElementDirectory.FindElements<ShapeClass>();
		foreach(ShapeClass shapeClass in shapeClasses)
		{
			if( shapeClass.DomainClass == null )
				continue;
#>
			if( nodeShapeType == <#= shapeClass.GetFullName(true) #>.DomainClassId )
				return new <#= shapeClass.GetMetaModel().Namespace #>.ViewModel.<#= shapeClass.Name #>DiagramItemViewModel(this.Store, diagram, nodeShape);

<#+
		}
#>

            return null;
        }

        #endregion
		
		#region CreateModelElementTreeViewModel
		/// <summary>
        /// Creates the tree view model for the given model element.
        /// </summary>
        /// <param name="modelElement">Model element for which the tree view model is to be created.</param>
        /// <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
        /// <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
		/// <param name="mainModelTreeVm">Main model tree view model.</param>
        /// <returns>
        /// View model of type BaseModelElementTreeViewModel if a view model can be created for the given element. Null otherwise.</returns>
        /// <remarks>
        /// A view model of the type BaseModelElementViewModel can obly be created for domain classes and referencing relationships, that
        /// can be embedded in the model tree.
        /// </remarks>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
        public override DslEditorViewModelModelTree::BaseModelElementTreeViewModel CreateModelElementTreeViewModel(DslModeling::ModelElement modelElement, bool bHookUpEvents, bool bCreateContextMenus, DslEditorViewModel::MainModelTreeViewModel mainModelTreeVm)
		{
			if( modelElement is DslEditorModeling::IDomainModelOwnable )
			{
<#+
	    System.Collections.ObjectModel.ReadOnlyCollection<MetaModel> col =dm.Store.ElementDirectory.FindElements<MetaModel>();
		foreach(MetaModel metaModel in col)
		{
#>
				if( <#= metaModel.GetFullName(true) #>DomainModel.DomainModelId == (modelElement as DslEditorModeling::IDomainModelOwnable).GetDomainModelTypeId() )
					return new <#= metaModel.Namespace #>.ViewModel.ModelTree.ModelTree<#= metaModel.Name #>ViewModel(this.Store, modelElement, null, System.Guid.Empty, null, bHookUpEvents, bCreateContextMenus, mainModelTreeVm); 
<#+
		}
#>
			}
			
			
			
			return new DslEditorViewModelModelTree::ModelElementTreeViewModel(this.Store, modelElement, null, System.Guid.Empty, null, bHookUpEvents, bCreateContextMenus, mainModelTreeVm);
		}
		
		/// <summary>
        /// Creates the tree view model for the given model element.
        /// </summary>
        /// <param name="element">VModell represented by this view model.</param>
        /// <param name="link">Element link, targeting the hosted element.</param>
        /// <param name="domainRoleId">Domain role id of the role that the hosted element belongs to.</param>
        /// <param name="parent">Parent of this view model.</param>
        /// <param name="bHookUpEvents">Hook up into model events to update the created view model on changes in model if true.</param>
        /// <param name="bCreateContextMenus">Creates context menus for adding and deleting model elements if true.</param>
        /// <param name="mainModelTreeVm">Model tree view model, this element vm belongs to.</param>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
        public override DslEditorViewModelModelTree::ModelElementTreeViewModel CreateModelElementTreeViewModel(DslModeling::ModelElement element, DslModeling::ElementLink link, System.Guid domainRoleId, DslEditorViewModelModelTree::ModelElementTreeViewModel parent, bool bHookUpEvents, bool bCreateContextMenus, DslEditorViewModel::MainModelTreeViewModel mainModelTreeVm)
		{
			if( element is DslEditorModeling::IDomainModelOwnable )
			{
<#+
	    col =dm.Store.ElementDirectory.FindElements<MetaModel>();
		foreach(MetaModel metaModel in col)
		{
#>
				if( <#= metaModel.GetFullName(true) #>DomainModel.DomainModelId == (element as DslEditorModeling::IDomainModelOwnable).GetDomainModelTypeId() )
					return new <#= metaModel.Namespace #>.ViewModel.ModelTree.ModelTree<#= metaModel.Name #>ViewModel(this.Store, element, link, domainRoleId, parent, bHookUpEvents, bCreateContextMenus, mainModelTreeVm); 
<#+
		}
#>
			}
			
			return new DslEditorViewModelModelTree::ModelElementTreeViewModel(this.Store, element, link, domainRoleId, parent, bHookUpEvents, bCreateContextMenus, mainModelTreeVm); 
		}
		#endregion
		
		#region CreatePropertyEditorViewModels
		/// <summary>
        /// Returns a collection of property grid view models for the given selected elements.
        /// </summary>
        /// <param name="elements">Selected elements collection.</param>
        /// <returns>Collection of property view models. Can be empty.</returns>
        public override System.Collections.Generic.List<DslEditorViewModelPropertyGrid::PropertyGridViewModel> CreatePropertyEditorViewModels(DslEditorModeling::SelectedItemsCollection elements)
		{
			System.Collections.Generic.List<DslEditorViewModelPropertyGrid::PropertyGridViewModel> collection = new System.Collections.Generic.List<DslEditorViewModelPropertyGrid::PropertyGridViewModel>();

			foreach(DslModeling::ModelElement modelElement in elements )
			{
				System.Collections.Generic.List<DslEditorViewModelData::ViewModelStore> handledStores = new System.Collections.Generic.List<DslEditorViewModelData::ViewModelStore>();
				AddPropertyEditorViewModels(collection, modelElement, handledStores);
			}
			
			return collection;
		}
		
        /// <summary>
        /// Returns a collection of property view models for the given selected elements.
        /// </summary>
        /// <param name="models">Already gathered models.</param>
        /// <param name="modelElement">ModelElement.</param>
        /// <param name="handledStores">Stores that have already been processed.</param>
        /// <returns>Collection of property view models. Can be empty.</returns>
        public override bool AddPropertyEditorViewModels(System.Collections.Generic.List<DslEditorViewModelPropertyGrid::PropertyGridViewModel> models, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslEditorViewModelData::ViewModelStore> handledStores)
		{
			if( handledStores.Contains(this.Store) )
				return false;
			else 
				handledStores.Add(this.Store);

<#+
	bFirstIf = true;

	IEnumerable<AttributedDomainElement> domainElements = CodeGenerationUtilities.GetElementsForPropertyGridViewModelCreation(dm);
	foreach(AttributedDomainElement domainElement in domainElements)
	{
		if( domainElement.InheritanceModifier == InheritanceModifier.Abstract )
			continue;

		
		if( bFirstIf )
		{
			bFirstIf = false;
#>			if<#+
		}
		else
		{
#>			else if<#+
		}
#>( modelElement.GetDomainClass().Id == <#= domainElement.GetFullName(true) #>.DomainClassId )
			{
				models.Add(new PropertyGrid<#= domainElement.Name #>ViewModel(this.Store, modelElement as <#= domainElement.GetFullName(true) #>));
				return true;
			}
<#+
	}
	if( domainElements.Count() > 0 )
	{
#>
			else
			{
				foreach(DslEditorViewModelData::ViewModelStore eS in this.Store.ExternStores)
					if( eS.Factory.AddPropertyEditorViewModels(models, modelElement, handledStores) )
						return true;
			}
<#+
	}
	else
	{
#>
		foreach(DslEditorViewModelData::ViewModelStore eS in this.Store.ExternStores)
			if( eS.Factory.AddPropertyEditorViewModels(models, modelElement, handledStores) )
				return true;
<#+
	}
#>

			return false;
		}
		
		#endregion				
		
		#region CreateRestorableViewModel
        /// <summary>
        /// Attempts at creating a view model of a specified type. This is meant to be called for restorable VMs that are in 
        /// the process of beeing restored.
        /// </summary>
        /// <param name="vmType">Type of the vm.</param>
        /// <param name="handledStores">Stores that have already been processed.</param>
        /// <returns>VM if succeeded. Null otherwise.</returns>
        public override DslEditorViewDiagrams::BaseDiagramSurfaceViewModel CreateRestorableViewModel(string vmType, System.Collections.Generic.List<DslEditorViewModelData::ViewModelStore> handledStores)
		{
<#+
	foreach(DiagramClass diagramClass in this.MetaModel.AllDiagramClasses)
	{
		if( !CodeGenerationUtilities.IsDiagramGenerated(diagramClass) )
			continue;
		
		if( diagramClass is RestorableChildlessDiagram || diagramClass is RestorableTemplatedDiagramVMOnly)
		{
			MetaModel metaModel = diagramClass.DiagramClassView.DiagramView.ViewContext.ModelContext.MetaModel;
			string t = metaModel.Name+diagramClass.Name+"SurfaceViewModel";
#>
			if( vmType == "<#= t #>" )
			{
				return new <#= metaModel.Namespace #>.ViewModel.<#= t #>(this.Store);
			}
<#+
		}
	}
#>
		
			foreach(DslEditorViewModelData::ViewModelStore eS in this.Store.ExternStores)
			{
				DslEditorViewDiagrams::BaseDiagramSurfaceViewModel vm = eS.Factory.CreateRestorableViewModel(vmType, handledStores);
				if( vm != null )
					return vm;
			}
			
			return null;
		}
		#endregion 
		#endregion
	}	
}
<#+
}
#>