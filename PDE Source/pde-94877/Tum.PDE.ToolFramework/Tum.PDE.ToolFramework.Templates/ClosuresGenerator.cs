// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tum.PDE.ToolFramework.Templates
{
    using Tum.PDE.LanguageDSL;
    using Microsoft.VisualStudio.Modeling;
    using System;
    
    
    #line 1 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ClosuresGenerator : ClosuresGeneratorBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            return this.GenerationEnvironment.ToString();
        }
        
        #line 3 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

public string GenerateClosureProperties(MetaModel dm)
{
	this.GenerationEnvironment = null;
	this.GenerateClosurePropertiesInternal(dm);
	return this.GenerationEnvironment.ToString();	
}

private void GenerateClosurePropertiesInternal(MetaModel dm)
{

        
        #line default
        #line hidden
        
        #line 13 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(@"/// <summary>
/// CopyClosure cache
/// </summary>
private static DslModeling::IElementVisitorFilter copyClosure;
/// <summary>
/// DeleteClosure cache
/// </summary>
private static DslModeling::IElementVisitorFilter removeClosure;
/// <summary>
/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
/// </summary>
/// <param name=""type"">closure type</param>
/// <param name=""rootElements"">collection of root elements</param>
/// <returns>IElementVisitorFilter or null</returns>
public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
{
	switch (type)
	{
		case DslModeling::ClosureType.CopyClosure:
			return ");

        
        #line default
        #line hidden
        
        #line 33 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 33 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.CopyClosure;\r\n\t\tcase DslModeling::ClosureType.DeleteClosure:\r\n\t\t\tretu" +
        "rn ");

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(@"DomainModel.DeleteClosure;
	}
	return base.GetClosureFilter(type, rootElements);
}
/// <summary>
/// CopyClosure cache
/// </summary>
private static DslModeling::IElementVisitorFilter CopyClosure
{
	get
	{
		// Incorporate all of the closures from the models we extend
		if (");

        
        #line default
        #line hidden
        
        #line 47 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 47 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.copyClosure == null)\r\n\t\t{\r\n\t\t\tDslModeling::ChainingElementVisitorFilt" +
        "er copyFilter = new DslModeling::ChainingElementVisitorFilter();\r\n\t\t\tcopyFilter." +
        "AddFilter(new ");

        
        #line default
        #line hidden
        
        #line 50 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 50 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosure());\r\n");

        
        #line default
        #line hidden
        
        #line 51 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

	// We don't need to add the Core model because it has no copy/delete propagation.
	// Add the CDS Model if we have diagram elements in this Dsl
	/*if(dm.DiagramElements!=null && dm.DiagramElements.Count>0)
	{

        
        #line default
        #line hidden
        
        #line 56 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\t\tcopyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());\r\n");

        
        #line default
        #line hidden
        
        #line 58 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

	}*/

        
        #line default
        #line hidden
        
        #line 60 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\t\t\r\n\t\t\t");

        
        #line default
        #line hidden
        
        #line 62 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 62 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.copyClosure = copyFilter;\r\n\t\t}\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 64 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 64 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.copyClosure;\r\n\t}\r\n}\r\n/// <summary>\r\n/// DeleteClosure cache\r\n/// </su" +
        "mmary>\r\nprivate static DslModeling::IElementVisitorFilter DeleteClosure\r\n{\r\n\tget" +
        "\r\n\t{\r\n\t\t// Incorporate all of the closures from the models we extend\r\n");

        
        #line default
        #line hidden
        
        #line 75 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

		// UNDONE: GeMathew - Add closure filters of all models we extend.

        
        #line default
        #line hidden
        
        #line 77 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\tif (");

        
        #line default
        #line hidden
        
        #line 78 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 78 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.removeClosure == null)\r\n\t\t{\r\n\t\t\tDslModeling::ChainingElementVisitorFi" +
        "lter removeFilter = new DslModeling::ChainingElementVisitorFilter();\r\n\t\t\tremoveF" +
        "ilter.AddFilter(new ");

        
        #line default
        #line hidden
        
        #line 81 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 81 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosure());\r\n");

        
        #line default
        #line hidden
        
        #line 82 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

	// We don't need to add the Core model because it has no copy/delete propagation.
	// Add the CDS Model if we have diagram elements in this Dsl
	/*if(dm.DiagramElements!=null && dm.DiagramElements.Count>0)
	{

        
        #line default
        #line hidden
        
        #line 87 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\t\tremoveFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());\r\n");

        
        #line default
        #line hidden
        
        #line 89 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

	}*/

        
        #line default
        #line hidden
        
        #line 91 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\r\n\t\t\t");

        
        #line default
        #line hidden
        
        #line 93 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 93 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.removeClosure = removeFilter;\r\n\t\t}\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 95 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 95 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainModel.removeClosure;\r\n\t}\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 98 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

}

        
        #line default
        #line hidden
        
        #line 102 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

public string GenerateCopyClosure(MetaModel dm)
{
	this.GenerationEnvironment = null;
	this.GenerateCopyClosureInternal(dm);
	return this.GenerationEnvironment.ToString();	
}

private void GenerateCopyClosureInternal(MetaModel dm)
{

        
        #line default
        #line hidden
        
        #line 112 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("/// <summary>\r\n/// Copy closure visitor filter\r\n/// </summary>\r\n");

        
        #line default
        #line hidden
        
        #line 116 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

//GenerateClsCompliantAttribute(AccessModifier.Public);

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationUtilities.GetAccessModifier(AccessModifier.Public)));

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(" partial class ");

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosure : ");

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 119 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosureBase, DslModeling::IElementVisitorFilter\r\n{\r\n\t/// <summary>\r\n\t/// Cons" +
        "tructor\r\n\t/// </summary>\r\n\tpublic ");

        
        #line default
        #line hidden
        
        #line 124 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 124 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosure() : base()\r\n\t{\r\n\t}\r\n}\r\n/// <summary>\r\n/// Base class for copy closure" +
        " visitor filter\r\n/// </summary>\r\n");

        
        #line default
        #line hidden
        
        #line 131 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

//GenerateClsCompliantAttribute(AccessModifier.Public);

        
        #line default
        #line hidden
        
        #line 134 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationUtilities.GetAccessModifier(AccessModifier.Public)));

        
        #line default
        #line hidden
        
        #line 134 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(" partial class ");

        
        #line default
        #line hidden
        
        #line 134 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 134 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFil" +
        "ter\r\n{\r\n\t/// <summary>\r\n\t/// Constructor\r\n\t/// </summary>\r\n\tpublic ");

        
        #line default
        #line hidden
        
        #line 139 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 139 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("CopyClosureBase():base()\r\n\t{\r\n\t}\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 143 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

}

        
        #line default
        #line hidden
        
        #line 147 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

public string GenerateDeleteClosure(MetaModel dm)
{
	this.GenerationEnvironment = null;
	this.GenerateDeleteClosureInternal(dm);
	return this.GenerationEnvironment.ToString();	
}

private void GenerateDeleteClosureInternal(MetaModel dm)
{

        
        #line default
        #line hidden
        
        #line 157 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("/// <summary>\r\n/// Remove closure visitor filter\r\n/// </summary>\r\n");

        
        #line default
        #line hidden
        
        #line 161 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

//GenerateClsCompliantAttribute(AccessModifier.Public);

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationUtilities.GetAccessModifier(AccessModifier.Public)));

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(" partial class ");

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosure : ");

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 164 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosureBase, DslModeling::IElementVisitorFilter\r\n{\r\n\t/// <summary>\r\n\t/// Co" +
        "nstructor\r\n\t/// </summary>\r\n\tpublic ");

        
        #line default
        #line hidden
        
        #line 169 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 169 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosure() : base()\r\n\t{\r\n\t}\r\n}\r\n\r\n/// <summary>\r\n/// Base class for remove c" +
        "losure visitor filter\r\n/// </summary>\r\n");

        
        #line default
        #line hidden
        
        #line 177 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

//GenerateClsCompliantAttribute(AccessModifier.Public);

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationUtilities.GetAccessModifier(AccessModifier.Public)));

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(" partial class ");

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosureBase : DslModeling::IElementVisitorFilter\r\n{\r\n\t/// <summary>\r\n\t/// D" +
        "omainRoles\r\n\t/// </summary>\r\n\tprivate global::System.Collections.Specialized.Hyb" +
        "ridDictionary domainRoles;\r\n\t/// <summary>\r\n\t/// Constructor\r\n\t/// </summary>\r\n\t" +
        "public ");

        
        #line default
        #line hidden
        
        #line 189 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Name));

        
        #line default
        #line hidden
        
        #line 189 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DeleteClosureBase()\r\n\t{\r\n\t\t#region Initialize DomainData Table\r\n");

        
        #line default
        #line hidden
        
        #line 192 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

	foreach(DomainRelationship r in dm.AllRelationships)
	{
		if(r.Source.PropagatesDelete)
		{

        
        #line default
        #line hidden
        
        #line 197 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\tDomainRoles.Add(");

        
        #line default
        #line hidden
        
        #line 198 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(r.GetFullName(true)));

        
        #line default
        #line hidden
        
        #line 198 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 198 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(r.Source.Name));

        
        #line default
        #line hidden
        
        #line 198 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainRoleId, true);\r\n");

        
        #line default
        #line hidden
        
        #line 199 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

		}
		if(r.Target.PropagatesDelete)
		{

        
        #line default
        #line hidden
        
        #line 203 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\tDomainRoles.Add(");

        
        #line default
        #line hidden
        
        #line 204 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(r.GetFullName(true)));

        
        #line default
        #line hidden
        
        #line 204 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 204 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(r.Target.Name));

        
        #line default
        #line hidden
        
        #line 204 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("DomainRoleId, true);\r\n");

        
        #line default
        #line hidden
        
        #line 205 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

		}
	}

        
        #line default
        #line hidden
        
        #line 208 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"
this.Write("\t\t#endregion\r\n\t}\r\n\t/// <summary>\r\n\t/// Called to ask the filter if a particular r" +
        "elationship from a source element should be included in the traversal\r\n\t/// </su" +
        "mmary>\r\n\t/// <param name=\"walker\">ElementWalker that is traversing the model</pa" +
        "ram>\r\n\t/// <param name=\"sourceElement\">Model Element playing the source role</pa" +
        "ram>\r\n\t/// <param name=\"sourceRoleInfo\">DomainRoleInfo of the role that the sour" +
        "ce element is playing in the relationship</param>\r\n\t/// <param name=\"domainRelat" +
        "ionshipInfo\">DomainRelationshipInfo for the ElementLink in question</param>\r\n\t//" +
        "/ <param name=\"targetRelationship\">Relationship in question</param>\r\n\t/// <retur" +
        "ns>Yes if the relationship should be traversed</returns>\r\n\tpublic virtual DslMod" +
        "eling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker wa" +
        "lker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourc" +
        "eRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeli" +
        "ng::ElementLink targetRelationship)\r\n\t{\r\n\t\treturn DslModeling::VisitorFilterResu" +
        "lt.Yes;\r\n\t}\r\n\t/// <summary>\r\n\t/// Called to ask the filter if a particular role " +
        "player should be Visited during traversal\r\n\t/// </summary>\r\n\t/// <param name=\"wa" +
        "lker\">ElementWalker that is traversing the model</param>\r\n\t/// <param name=\"sour" +
        "ceElement\">Model Element playing the source role</param>\r\n\t/// <param name=\"elem" +
        "entLink\">Element Link that forms the relationship to the role player in question" +
        "</param>\r\n\t/// <param name=\"targetDomainRole\">DomainRoleInfo of the target role<" +
        "/param>\r\n\t/// <param name=\"targetRolePlayer\">Model Element that plays the target" +
        " role in the relationship</param>\r\n\t/// <returns></returns>\r\n\tpublic virtual Dsl" +
        "Modeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker w" +
        "alker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink element" +
        "Link, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement ta" +
        "rgetRolePlayer)\r\n\t{\r\n\t\tif (targetDomainRole == null) throw new global::System.Ar" +
        "gumentNullException(\"targetDomainRole\");\r\n\t\treturn this.DomainRoles.Contains(tar" +
        "getDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorF" +
        "ilterResult.DoNotCare;\r\n\t}\r\n\t/// <summary>\r\n\t/// DomainRoles\r\n\t/// </summary>\r\n\t" +
        "private global::System.Collections.Specialized.HybridDictionary DomainRoles\r\n\t{\r" +
        "\n\t\tget\r\n\t\t{\r\n\t\t\tif (this.domainRoles == null)\r\n\t\t\t{\r\n\t\t\t\tthis.domainRoles = new " +
        "global::System.Collections.Specialized.HybridDictionary();\r\n\t\t\t}\r\n\t\t\treturn this" +
        ".domainRoles;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 254 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ClosuresGenerator.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ClosuresGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
