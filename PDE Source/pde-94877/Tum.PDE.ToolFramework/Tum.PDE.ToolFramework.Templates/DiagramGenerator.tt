<#@ template language="C#" inherits="BaseTemplate"#> 
<#@ import namespace="Tum.PDE.LanguageDSL"#>
<#@ import namespace="Microsoft.VisualStudio.Modeling" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslEditorModeling = global::Tum.PDE.ToolFramework.Modeling;
using DslEditorDiagrams = global::Tum.PDE.ToolFramework.Modeling.Diagrams;

<#
foreach(DiagramClass diagram in this.MetaModel.AllDiagramClasses)
{
	if( diagram is TemplatedDiagramViewModelOnly )
		continue;
	
	GenerateDiagram(this.MetaModel, diagram);
}
#>
<#+ 
public void GenerateDiagram(MetaModel dm, DiagramClass diagram)
{
	string baseClass = "DslEditorDiagrams::Diagram";
	if( diagram is DependencyDiagram )
	{
		baseClass = "DslEditorDiagrams::GraphicalDependenciesDiagram";
	}
#>

namespace <#= dm.Namespace #>
{
	/// <summary>
    /// <#= diagram.Name #> class representing a Diagram.
    /// </summary>
	[DslModeling::DomainObjectId("<#= diagram.Id.ToString("D") #>")]
	public partial class <#= diagram.Name #> : <#= baseClass #>
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VModellvariante domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new System.Guid("<#= diagram.Id.ToString("D") #>");
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public <#= diagram.Name #>(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public <#= diagram.Name #>(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		
	    /// <summary>
        /// Gets the unique name of this diagram.
        /// </summary>
        public override string UniqueName
        {
            get
			{
				return "<#= dm.Name #><#= diagram.Name #>";
			}
        }
		
        /// <summary>
        /// Initialize.
        /// </summary>
        public override void Initialize()
        {
<#+
	if( diagram is DesignerDiagramClass )
	{
		foreach(DiagramClass d in (diagram as DesignerDiagramClass).IncludedDiagramClasses )
		{
#>
			AddIncludedDiagram(new <#= d.ModelContext.MetaModel.Namespace #>.<#= d.Name #>(this.Store));
<#+
		}
	}
	
#>
        }
<#+

	if( CodeGenerationUtilities.NeedsLinkRules(dm) )
	{
#>

        /// <summary>
        /// Gets the relationship shapes factory helper. Needs to be derived in the actual instance class.
        /// </summary>
        /// <returns></returns>
        public override DslEditorDiagrams::ModelLinkAddRuleForRSShapes.RSShapesFactoryHelper GetRSShapesFactoryHelper()
        {
            return <#= dm.Name #>LinkForShapesAdded.<#= dm.Name #>ElementForShapesFactoryHelper.Instance;
        }
<#+
	}
	if( CodeGenerationUtilities.NeedsMappingLinkRules(dm) )
	{
#>

        /// <summary>
        /// Gets the mapping relationship shapes factory helper.  Needs to be derived in the actual instance class.
        /// </summary>
        /// <returns></returns>
        public override DslEditorDiagrams::ModelLinkAddRuleForMappingRSShapes.RSShapesFactoryHelper GetMappingRSShapesFactoryHelper()
        {
            return <#= dm.Name #>MappingLinkForShapesAdded.<#= dm.Name #>ElementForShapesFactoryHelper.Instance;
        }
<#+
	}	
#>
		
		#region Methods		
		/// <summary>
        /// Adds a proto element to the current element.
        /// </summary>
        /// <param name="protoElement">Proto element representation of the element that is to be added.</param>
        /// <param name="groupMerger">
        /// Group merger class used to track id mapping, merge errors/warnings and 
        /// postprocess merging by rebuilding reference relationships.
        /// </param>
        /// <param name="isRoot">Root element?</param>
        public override void ModelMerge(DslEditorModeling::ModelProtoElement protoElement, DslEditorModeling::ModelProtoGroupMerger groupMerger, bool isRoot)
		{
<#+
	if( !diagram.IsCustom )
	{
#>
			// TODO			
<#+
	}
#>
		}
		#endregion
	}
}
<#+
}
#>
