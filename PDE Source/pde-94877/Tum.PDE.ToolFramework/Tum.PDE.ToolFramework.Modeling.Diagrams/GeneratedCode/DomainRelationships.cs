//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship ShapeElementContainsChildShapes
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e4cae64b-b252-4f77-9a77-3fa8fd286f32")]
	public partial class ShapeElementContainsChildShapes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeElementContainsChildShapes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4cae64b, 0xb252, 0x4f77, 0x9a, 0x77, 0x3f, 0xa8, 0xfd, 0x28, 0x6f, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeElementContainsChildShapes link in the same Partition as the given NodeShape
		/// </summary>
		/// <param name="source">NodeShape to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public ShapeElementContainsChildShapes(NodeShape source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeElementContainsChildShapes.ParentShapeDomainRoleId, source), new DslModeling::RoleAssignment(ShapeElementContainsChildShapes.ChildShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeElementContainsChildShapes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeElementContainsChildShapes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeElementContainsChildShapes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeElementContainsChildShapes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentShape domain role code
		
		/// <summary>
		/// ParentShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentShapeDomainRoleId = new global::System.Guid(0x5b223ad0, 0xac16, 0x468f, 0xa7, 0x67, 0xb3, 0x2a, 0x16, 0x8a, 0xa2, 0xc6);
		
		/// <summary>
		/// DomainRole ParentShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ParentShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ParentShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InternalChildren", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ParentShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5b223ad0-ac16-468f-a767-b32a168aa2c6")]
		public virtual NodeShape ParentShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a NodeShape
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetParent(NodeShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildShapeDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(NodeShape element, NodeShape newParentShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildShapeDomainRoleId, newParentShape);
		}
		#endregion
		#region ChildShape domain role code
		
		/// <summary>
		/// ChildShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildShapeDomainRoleId = new global::System.Guid(0x0696200f, 0x158a, 0x4315, 0xa1, 0x70, 0xe1, 0xbd, 0xb8, 0xbf, 0x6b, 0x83);
		
		/// <summary>
		/// DomainRole ChildShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ChildShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ChildShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes/ChildShape.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0696200f-158a-4315-a170-e1bdb8bf6b83")]
		public virtual NodeShape ChildShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InternalChildren of a NodeShape
		/// <summary>
		/// Gets a list of InternalChildren.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<NodeShape> GetInternalChildren(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(element, ParentShapeDomainRoleId);
		}
		#endregion
		#region ParentShape link accessor
		/// <summary>
		/// Get the list of ShapeElementContainsChildShapes links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> GetLinksToInternalChildren ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape parentShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes>(parentShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShapeDomainRoleId);
		}
		#endregion
		#region ChildShape link accessor
		/// <summary>
		/// Get the ShapeElementContainsChildShapes link to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes GetLinkToParent (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape childShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes>(childShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShapeElementContainsChildShapes instance accessors
		
		/// <summary>
		/// Get any ShapeElementContainsChildShapes links between a given NodeShape and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeElementContainsChildShapes link between a given NodeShapeand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship DiagramsModelHasDiagrams
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0d02c162-d6a8-4180-89bc-145180179968")]
	public partial class DiagramsModelHasDiagrams : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramsModelHasDiagrams domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d02c162, 0xd6a8, 0x4180, 0x89, 0xbc, 0x14, 0x51, 0x80, 0x17, 0x99, 0x68);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramsModelHasDiagrams link in the same Partition as the given DiagramsModel
		/// </summary>
		/// <param name="source">DiagramsModel to use as the source of the relationship.</param>
		/// <param name="target">Diagram to use as the target of the relationship.</param>
		public DiagramsModelHasDiagrams(DiagramsModel source, Diagram target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramsModelHasDiagrams.DiagramsModelDomainRoleId, source), new DslModeling::RoleAssignment(DiagramsModelHasDiagrams.DiagramDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramsModelHasDiagrams(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramsModelHasDiagrams(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramsModelHasDiagrams(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramsModelHasDiagrams(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramsModel domain role code
		
		/// <summary>
		/// DiagramsModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramsModelDomainRoleId = new global::System.Guid(0x27e1528b, 0x3cf2, 0x4e5c, 0x9f, 0xae, 0xde, 0xce, 0xfa, 0x40, 0xbd, 0xa5);
		
		/// <summary>
		/// DomainRole DiagramsModel
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/DiagramsModel.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/DiagramsModel.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Diagrams", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/DiagramsModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("27e1528b-3cf2-4e5c-9fae-decefa40bda5")]
		public virtual DiagramsModel DiagramsModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramsModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramsModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramsModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramsModel of a Diagram
		/// <summary>
		/// Gets DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramsModel GetDiagramsModel(Diagram element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramDomainRoleId) as DiagramsModel;
		}
		
		/// <summary>
		/// Sets DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramsModel(Diagram element, DiagramsModel newDiagramsModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramDomainRoleId, newDiagramsModel);
		}
		#endregion
		#region Diagram domain role code
		
		/// <summary>
		/// Diagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramDomainRoleId = new global::System.Guid(0x46ecd183, 0xfed5, 0x412b, 0xa6, 0x6e, 0x31, 0x08, 0x52, 0x65, 0x90, 0xd5);
		
		/// <summary>
		/// DomainRole Diagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.Diagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/Diagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/Diagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramsModel", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams/Diagram.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("46ecd183-fed5-412b-a66e-3108526590d5")]
		public virtual Diagram Diagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Diagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Diagrams of a DiagramsModel
		/// <summary>
		/// Gets a list of Diagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Diagram> GetDiagrams(DiagramsModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Diagram>, Diagram>(element, DiagramsModelDomainRoleId);
		}
		#endregion
		#region DiagramsModel link accessor
		/// <summary>
		/// Get the list of DiagramsModelHasDiagrams links to a DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> GetLinksToDiagrams ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel diagramsModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams>(diagramsModelInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModelDomainRoleId);
		}
		#endregion
		#region Diagram link accessor
		/// <summary>
		/// Get the DiagramsModelHasDiagrams link to a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams GetLinkToDiagramsModel (global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram diagramInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams>(diagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Diagram not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramsModelHasDiagrams instance accessors
		
		/// <summary>
		/// Get any DiagramsModelHasDiagrams links between a given DiagramsModel and a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModelDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams link in links )
			{
				if ( target.Equals(link.Diagram) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramsModelHasDiagrams link between a given DiagramsModeland a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModelDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams link in links )
			{
				if ( target.Equals(link.Diagram) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainRelationship DiagramHasChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fdc6c2af-4fad-4394-8154-3654834de063")]
	public abstract partial class DiagramHasChildrenBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramHasChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfdc6c2af, 0x4fad, 0x4394, 0x81, 0x54, 0x36, 0x54, 0x83, 0x4d, 0xe0, 0x63);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected DiagramHasChildrenBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Diagram domain role code
		
		/// <summary>
		/// Diagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramDomainRoleId = new global::System.Guid(0xc216a77d, 0xa53d, 0x402c, 0x82, 0xb3, 0x6c, 0x41, 0x07, 0x0d, 0x0c, 0xd3);
		
		/// <summary>
		/// DomainRole Diagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.Diagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/Diagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/Diagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/Diagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c216a77d-a53d-402c-82b3-6c41070d0cd3")]
		public virtual Diagram Diagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Diagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InternalDiagram of a NodeShape
		/// <summary>
		/// Gets InternalDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static Diagram GetInternalDiagram(NodeShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildShapeDomainRoleId) as Diagram;
		}
		
		/// <summary>
		/// Sets InternalDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetInternalDiagram(NodeShape element, Diagram newDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildShapeDomainRoleId, newDiagram);
		}
		#endregion
		#region ChildShape domain role code
		
		/// <summary>
		/// ChildShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildShapeDomainRoleId = new global::System.Guid(0x14501df3, 0x3d1d, 0x424a, 0x94, 0x2f, 0xc3, 0x32, 0x48, 0x35, 0xab, 0x3c);
		
		/// <summary>
		/// DomainRole ChildShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/ChildShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/ChildShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InternalDiagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren/ChildShape.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("14501df3-3d1d-424a-942f-c3324835ab3c")]
		public virtual NodeShape ChildShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a Diagram
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NodeShape> GetChildren(Diagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(element, DiagramDomainRoleId);
		}
		#endregion
		#region Diagram link accessor
		/// <summary>
		/// Get the list of DiagramHasChildren links to a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> GetLinksToChildren ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram diagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren>(diagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DiagramDomainRoleId);
		}
		#endregion
		#region ChildShape link accessor
		/// <summary>
		/// Get the DiagramHasChildren link to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren GetLinkToInternalDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape childShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren>(childShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramHasChildren instance accessors
		
		/// <summary>
		/// Get any DiagramHasChildren links between a given Diagram and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramHasChildren link between a given Diagramand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship DiagramHasChildren
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramHasChildren : DiagramHasChildrenBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramHasChildren link in the same Partition as the given Diagram
		/// </summary>
		/// <param name="source">Diagram to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public DiagramHasChildren(Diagram source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramHasChildren.DiagramDomainRoleId, source), new DslModeling::RoleAssignment(DiagramHasChildren.ChildShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainRelationship DiagramHasLinkShapes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("68e7b240-afee-49e2-aba9-021c45caa053")]
	public abstract partial class DiagramHasLinkShapesBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramHasLinkShapes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68e7b240, 0xafee, 0x49e2, 0xab, 0xa9, 0x02, 0x1c, 0x45, 0xca, 0xa0, 0x53);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected DiagramHasLinkShapesBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Diagram domain role code
		
		/// <summary>
		/// Diagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramDomainRoleId = new global::System.Guid(0x0d5c914c, 0x9ba6, 0x483a, 0x9e, 0x16, 0xba, 0xb4, 0x44, 0xfb, 0x67, 0x07);
		
		/// <summary>
		/// DomainRole Diagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.Diagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/Diagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/Diagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LinkShapes", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/Diagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d5c914c-9ba6-483a-9e16-bab444fb6707")]
		public virtual Diagram Diagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Diagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Diagram of a LinkShape
		/// <summary>
		/// Gets Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Diagram GetDiagram(LinkShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LinkShapeDomainRoleId) as Diagram;
		}
		
		/// <summary>
		/// Sets Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagram(LinkShape element, Diagram newDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LinkShapeDomainRoleId, newDiagram);
		}
		#endregion
		#region LinkShape domain role code
		
		/// <summary>
		/// LinkShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid LinkShapeDomainRoleId = new global::System.Guid(0x2bd12c47, 0x09e8, 0x48a3, 0xb8, 0x24, 0x3b, 0xf8, 0x1f, 0xf3, 0x92, 0x13);
		
		/// <summary>
		/// DomainRole LinkShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/LinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/LinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Diagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes/LinkShape.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2bd12c47-09e8-48a3-b824-3bf81ff39213")]
		public virtual LinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LinkShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, LinkShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LinkShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShapes of a Diagram
		/// <summary>
		/// Gets a list of LinkShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LinkShape> GetLinkShapes(Diagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<LinkShape>, LinkShape>(element, DiagramDomainRoleId);
		}
		#endregion
		#region Diagram link accessor
		/// <summary>
		/// Get the list of DiagramHasLinkShapes links to a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> GetLinksToLinkShapes ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram diagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes>(diagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DiagramDomainRoleId);
		}
		#endregion
		#region LinkShape link accessor
		/// <summary>
		/// Get the DiagramHasLinkShapes link to a LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes GetLinkToDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape linkShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes>(linkShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LinkShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramHasLinkShapes instance accessors
		
		/// <summary>
		/// Get any DiagramHasLinkShapes links between a given Diagram and a LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes link in links )
			{
				if ( target.Equals(link.LinkShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramHasLinkShapes link between a given Diagramand a LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes link in links )
			{
				if ( target.Equals(link.LinkShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship DiagramHasLinkShapes
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramHasLinkShapes : DiagramHasLinkShapesBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramHasLinkShapes link in the same Partition as the given Diagram
		/// </summary>
		/// <param name="source">Diagram to use as the source of the relationship.</param>
		/// <param name="target">LinkShape to use as the target of the relationship.</param>
		public DiagramHasLinkShapes(Diagram source, LinkShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramHasLinkShapes.DiagramDomainRoleId, source), new DslModeling::RoleAssignment(DiagramHasLinkShapes.LinkShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasLinkShapes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasLinkShapes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasLinkShapes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasLinkShapes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainRelationship NodeShapeReferencesNestedChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b7f76233-3d2c-4256-a792-a7762b7cfb10")]
	public abstract partial class NodeShapeReferencesNestedChildrenBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NodeShapeReferencesNestedChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7f76233, 0x3d2c, 0x4256, 0xa7, 0x92, 0xa7, 0x76, 0x2b, 0x7c, 0xfb, 0x10);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected NodeShapeReferencesNestedChildrenBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentShape domain role code
		
		/// <summary>
		/// ParentShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentShapeDomainRoleId = new global::System.Guid(0xf797a134, 0x535e, 0x4650, 0x80, 0x51, 0x03, 0xb2, 0x51, 0x77, 0xea, 0x15);
		
		/// <summary>
		/// DomainRole ParentShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ParentShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ParentShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NestedChildren", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ParentShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f797a134-535e-4650-8051-03b25177ea15")]
		public virtual NodeShape ParentShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentShape of a NodeShape
		/// <summary>
		/// Gets ParentShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetParentShape(NodeShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildShapeDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets ParentShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentShape(NodeShape element, NodeShape newParentShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildShapeDomainRoleId, newParentShape);
		}
		#endregion
		#region ChildShape domain role code
		
		/// <summary>
		/// ChildShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildShapeDomainRoleId = new global::System.Guid(0xdf774730, 0x0f99, 0x4017, 0x83, 0x44, 0x84, 0x8d, 0x80, 0xfa, 0xb1, 0xf7);
		
		/// <summary>
		/// DomainRole ChildShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ChildShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ChildShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ChildShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren/ChildShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("df774730-0f99-4017-8344-848d80fab1f7")]
		public virtual NodeShape ChildShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NestedChildren of a NodeShape
		/// <summary>
		/// Gets a list of NestedChildren.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NodeShape> GetNestedChildren(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(element, ParentShapeDomainRoleId);
		}
		#endregion
		#region ParentShape link accessor
		/// <summary>
		/// Get the list of NodeShapeReferencesNestedChildren links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> GetLinksToNestedChildren ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape parentShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren>(parentShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId);
		}
		#endregion
		#region ChildShape link accessor
		/// <summary>
		/// Get the NodeShapeReferencesNestedChildren link to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren GetLinkToParentShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape childShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren>(childShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ChildShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShapeReferencesNestedChildren instance accessors
		
		/// <summary>
		/// Get any NodeShapeReferencesNestedChildren links between a given NodeShape and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NodeShapeReferencesNestedChildren link between a given NodeShapeand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship NodeShapeReferencesNestedChildren
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class NodeShapeReferencesNestedChildren : NodeShapeReferencesNestedChildrenBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a NodeShapeReferencesNestedChildren link in the same Partition as the given NodeShape
		/// </summary>
		/// <param name="source">NodeShape to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public NodeShapeReferencesNestedChildren(NodeShape source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId, source), new DslModeling::RoleAssignment(NodeShapeReferencesNestedChildren.ChildShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeReferencesNestedChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeReferencesNestedChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeReferencesNestedChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeReferencesNestedChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainRelationship NodeShapeReferencesRelativeChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("685481f1-92af-43db-a4c8-110f064b6942")]
	public abstract partial class NodeShapeReferencesRelativeChildrenBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NodeShapeReferencesRelativeChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x685481f1, 0x92af, 0x43db, 0xa4, 0xc8, 0x11, 0x0f, 0x06, 0x4b, 0x69, 0x42);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected NodeShapeReferencesRelativeChildrenBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentShape domain role code
		
		/// <summary>
		/// ParentShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentShapeDomainRoleId = new global::System.Guid(0xa21d0c88, 0x99a0, 0x467e, 0x9a, 0x48, 0x6c, 0x4b, 0x41, 0x40, 0xc8, 0x44);
		
		/// <summary>
		/// DomainRole ParentShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ParentShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ParentShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelativeChildren", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ParentShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a21d0c88-99a0-467e-9a48-6c4b4140c844")]
		public virtual NodeShape ParentShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentShape of a NodeShape
		/// <summary>
		/// Gets ParentShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetParentShape(NodeShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildShapeDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets ParentShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentShape(NodeShape element, NodeShape newParentShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildShapeDomainRoleId, newParentShape);
		}
		#endregion
		#region ChildShape domain role code
		
		/// <summary>
		/// ChildShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildShapeDomainRoleId = new global::System.Guid(0xbf24a8ba, 0x28dd, 0x4872, 0xae, 0xc3, 0xae, 0x8a, 0x7d, 0xfe, 0x18, 0x3b);
		
		/// <summary>
		/// DomainRole ChildShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ChildShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ChildShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ChildShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren/ChildShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bf24a8ba-28dd-4872-aec3-ae8a7dfe183b")]
		public virtual NodeShape ChildShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelativeChildren of a NodeShape
		/// <summary>
		/// Gets a list of RelativeChildren.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NodeShape> GetRelativeChildren(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(element, ParentShapeDomainRoleId);
		}
		#endregion
		#region ParentShape link accessor
		/// <summary>
		/// Get the list of NodeShapeReferencesRelativeChildren links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> GetLinksToRelativeChildren ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape parentShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren>(parentShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId);
		}
		#endregion
		#region ChildShape link accessor
		/// <summary>
		/// Get the NodeShapeReferencesRelativeChildren link to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren GetLinkToParentShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape childShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren>(childShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ChildShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShapeReferencesRelativeChildren instance accessors
		
		/// <summary>
		/// Get any NodeShapeReferencesRelativeChildren links between a given NodeShape and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NodeShapeReferencesRelativeChildren link between a given NodeShapeand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren link in links )
			{
				if ( target.Equals(link.ChildShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship NodeShapeReferencesRelativeChildren
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class NodeShapeReferencesRelativeChildren : NodeShapeReferencesRelativeChildrenBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a NodeShapeReferencesRelativeChildren link in the same Partition as the given NodeShape
		/// </summary>
		/// <param name="source">NodeShape to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public NodeShapeReferencesRelativeChildren(NodeShape source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId, source), new DslModeling::RoleAssignment(NodeShapeReferencesRelativeChildren.ChildShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeReferencesRelativeChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeReferencesRelativeChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeReferencesRelativeChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeReferencesRelativeChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship LinkShapeHasSourceAnchor
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7b1335b6-b158-45f8-b319-703235333df5")]
	public partial class LinkShapeHasSourceAnchor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LinkShapeHasSourceAnchor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b1335b6, 0xb158, 0x45f8, 0xb3, 0x19, 0x70, 0x32, 0x35, 0x33, 0x3d, 0xf5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LinkShapeHasSourceAnchor link in the same Partition as the given LinkShape
		/// </summary>
		/// <param name="source">LinkShape to use as the source of the relationship.</param>
		/// <param name="target">SourceAnchor to use as the target of the relationship.</param>
		public LinkShapeHasSourceAnchor(LinkShape source, SourceAnchor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LinkShapeHasSourceAnchor.LinkShapeDomainRoleId, source), new DslModeling::RoleAssignment(LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LinkShapeHasSourceAnchor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LinkShapeHasSourceAnchor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LinkShapeHasSourceAnchor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LinkShapeHasSourceAnchor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LinkShape domain role code
		
		/// <summary>
		/// LinkShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid LinkShapeDomainRoleId = new global::System.Guid(0x105a84ac, 0x5502, 0x4055, 0x8a, 0xd0, 0x52, 0xd7, 0xb3, 0x4a, 0xad, 0x37);
		
		/// <summary>
		/// DomainRole LinkShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/LinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/LinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceAnchor", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/LinkShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("105a84ac-5502-4055-8ad0-52d7b34aad37")]
		public virtual LinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LinkShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, LinkShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LinkShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShape of a SourceAnchor
		/// <summary>
		/// Gets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LinkShape GetLinkShape(SourceAnchor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceAnchorDomainRoleId) as LinkShape;
		}
		
		/// <summary>
		/// Sets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLinkShape(SourceAnchor element, LinkShape newLinkShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceAnchorDomainRoleId, newLinkShape);
		}
		#endregion
		#region SourceAnchor domain role code
		
		/// <summary>
		/// SourceAnchor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAnchorDomainRoleId = new global::System.Guid(0x8cce3acc, 0x170c, 0x447d, 0xbd, 0x57, 0x87, 0x7c, 0xe8, 0xa2, 0xb7, 0x4f);
		
		/// <summary>
		/// DomainRole SourceAnchor
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/SourceAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/SourceAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LinkShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor/SourceAnchor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8cce3acc-170c-447d-bd57-877ce8a2b74f")]
		public virtual SourceAnchor SourceAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SourceAnchor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAnchorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAnchorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceAnchor of a LinkShape
		/// <summary>
		/// Gets SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SourceAnchor GetSourceAnchor(LinkShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LinkShapeDomainRoleId) as SourceAnchor;
		}
		
		/// <summary>
		/// Sets SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceAnchor(LinkShape element, SourceAnchor newSourceAnchor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LinkShapeDomainRoleId, newSourceAnchor);
		}
		#endregion
		#region LinkShape link accessor
		/// <summary>
		/// Get the LinkShapeHasSourceAnchor link to a LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor GetLinkToSourceAnchor (global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape linkShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor>(linkShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LinkShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SourceAnchor link accessor
		/// <summary>
		/// Get the LinkShapeHasSourceAnchor link to a SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor GetLinkToLinkShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor sourceAnchorInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor>(sourceAnchorInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceAnchor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LinkShapeHasSourceAnchor instance accessors
		
		/// <summary>
		/// Get any LinkShapeHasSourceAnchor links between a given LinkShape and a SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor link in links )
			{
				if ( target.Equals(link.SourceAnchor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LinkShapeHasSourceAnchor link between a given LinkShapeand a SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor link in links )
			{
				if ( target.Equals(link.SourceAnchor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship LinkShapeHasTargetAnchor
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c1e46813-191c-4600-91af-95efc98baaa6")]
	public partial class LinkShapeHasTargetAnchor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LinkShapeHasTargetAnchor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc1e46813, 0x191c, 0x4600, 0x91, 0xaf, 0x95, 0xef, 0xc9, 0x8b, 0xaa, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LinkShapeHasTargetAnchor link in the same Partition as the given LinkShape
		/// </summary>
		/// <param name="source">LinkShape to use as the source of the relationship.</param>
		/// <param name="target">TargetAnchor to use as the target of the relationship.</param>
		public LinkShapeHasTargetAnchor(LinkShape source, TargetAnchor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LinkShapeHasTargetAnchor.LinkShapeDomainRoleId, source), new DslModeling::RoleAssignment(LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LinkShapeHasTargetAnchor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LinkShapeHasTargetAnchor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LinkShapeHasTargetAnchor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LinkShapeHasTargetAnchor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LinkShape domain role code
		
		/// <summary>
		/// LinkShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid LinkShapeDomainRoleId = new global::System.Guid(0x20470214, 0x10a2, 0x409f, 0x86, 0xa5, 0x2f, 0x24, 0x7c, 0x23, 0x9f, 0xeb);
		
		/// <summary>
		/// DomainRole LinkShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/LinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/LinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetAnchor", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/LinkShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("20470214-10a2-409f-86a5-2f247c239feb")]
		public virtual LinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LinkShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, LinkShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LinkShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShape of a TargetAnchor
		/// <summary>
		/// Gets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LinkShape GetLinkShape(TargetAnchor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetAnchorDomainRoleId) as LinkShape;
		}
		
		/// <summary>
		/// Sets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLinkShape(TargetAnchor element, LinkShape newLinkShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetAnchorDomainRoleId, newLinkShape);
		}
		#endregion
		#region TargetAnchor domain role code
		
		/// <summary>
		/// TargetAnchor domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAnchorDomainRoleId = new global::System.Guid(0xfb1ad2ca, 0x550f, 0x4ad4, 0xbb, 0x32, 0x59, 0xf0, 0x4d, 0x88, 0x11, 0x11);
		
		/// <summary>
		/// DomainRole TargetAnchor
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/TargetAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/TargetAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LinkShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor/TargetAnchor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fb1ad2ca-550f-4ad4-bb32-59f04d881111")]
		public virtual TargetAnchor TargetAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TargetAnchor)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAnchorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAnchorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetAnchor of a LinkShape
		/// <summary>
		/// Gets TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TargetAnchor GetTargetAnchor(LinkShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LinkShapeDomainRoleId) as TargetAnchor;
		}
		
		/// <summary>
		/// Sets TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetAnchor(LinkShape element, TargetAnchor newTargetAnchor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LinkShapeDomainRoleId, newTargetAnchor);
		}
		#endregion
		#region LinkShape link accessor
		/// <summary>
		/// Get the LinkShapeHasTargetAnchor link to a LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor GetLinkToTargetAnchor (global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape linkShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor>(linkShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LinkShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetAnchor link accessor
		/// <summary>
		/// Get the LinkShapeHasTargetAnchor link to a TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor GetLinkToLinkShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor targetAnchorInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor>(targetAnchorInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetAnchor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LinkShapeHasTargetAnchor instance accessors
		
		/// <summary>
		/// Get any LinkShapeHasTargetAnchor links between a given LinkShape and a TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor link in links )
			{
				if ( target.Equals(link.TargetAnchor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LinkShapeHasTargetAnchor link between a given LinkShapeand a TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor link in links )
			{
				if ( target.Equals(link.TargetAnchor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship SourceAnchorReferencesFromShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d2b811e7-0604-4b38-b4ae-8b327dc8029b")]
	public partial class SourceAnchorReferencesFromShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SourceAnchorReferencesFromShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2b811e7, 0x0604, 0x4b38, 0xb4, 0xae, 0x8b, 0x32, 0x7d, 0xc8, 0x02, 0x9b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SourceAnchorReferencesFromShape link in the same Partition as the given SourceAnchor
		/// </summary>
		/// <param name="source">SourceAnchor to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public SourceAnchorReferencesFromShape(SourceAnchor source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId, source), new DslModeling::RoleAssignment(SourceAnchorReferencesFromShape.NodeShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SourceAnchorReferencesFromShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SourceAnchorReferencesFromShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SourceAnchorReferencesFromShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SourceAnchorReferencesFromShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceAnchor domain role code
		
		/// <summary>
		/// SourceAnchor domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAnchorDomainRoleId = new global::System.Guid(0x9023ab11, 0x46db, 0x4996, 0xb0, 0x20, 0x9a, 0x9a, 0x2c, 0x51, 0x6c, 0x60);
		
		/// <summary>
		/// DomainRole SourceAnchor
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/SourceAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/SourceAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FromShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/SourceAnchor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9023ab11-46db-4996-b020-9a9a2c516c60")]
		public virtual SourceAnchor SourceAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SourceAnchor)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAnchorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAnchorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceAnchors of a NodeShape
		/// <summary>
		/// Gets a list of SourceAnchors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SourceAnchor> GetSourceAnchors(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SourceAnchor>, SourceAnchor>(element, NodeShapeDomainRoleId);
		}
		#endregion
		#region NodeShape domain role code
		
		/// <summary>
		/// NodeShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeShapeDomainRoleId = new global::System.Guid(0x0e35669f, 0x45e5, 0x45d5, 0x9e, 0x1a, 0x6e, 0x10, 0xd3, 0x2a, 0x5a, 0xbf);
		
		/// <summary>
		/// DomainRole NodeShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.NodeShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/NodeShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/NodeShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceAnchors", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape/NodeShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0e35669f-45e5-45d5-9e1a-6e10d32a5abf")]
		public virtual NodeShape NodeShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FromShape of a SourceAnchor
		/// <summary>
		/// Gets FromShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetFromShape(SourceAnchor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceAnchorDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets FromShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFromShape(SourceAnchor element, NodeShape newNodeShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceAnchorDomainRoleId, newNodeShape);
		}
		#endregion
		#region SourceAnchor link accessor
		/// <summary>
		/// Get the SourceAnchorReferencesFromShape link to a SourceAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape GetLinkToFromShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor sourceAnchorInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape>(sourceAnchorInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceAnchor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShape link accessor
		/// <summary>
		/// Get the list of SourceAnchorReferencesFromShape links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> GetLinksToSourceAnchors ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape nodeShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape>(nodeShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.NodeShapeDomainRoleId);
		}
		#endregion
		#region SourceAnchorReferencesFromShape instance accessors
		
		/// <summary>
		/// Get any SourceAnchorReferencesFromShape links between a given SourceAnchor and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SourceAnchorReferencesFromShape link between a given SourceAnchorand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship TargetAnchorReferencesToShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("92b644b9-916c-4bc4-999e-9cf4f9641caf")]
	public partial class TargetAnchorReferencesToShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TargetAnchorReferencesToShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92b644b9, 0x916c, 0x4bc4, 0x99, 0x9e, 0x9c, 0xf4, 0xf9, 0x64, 0x1c, 0xaf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TargetAnchorReferencesToShape link in the same Partition as the given TargetAnchor
		/// </summary>
		/// <param name="source">TargetAnchor to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public TargetAnchorReferencesToShape(TargetAnchor source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TargetAnchorReferencesToShape.TargetAnchorDomainRoleId, source), new DslModeling::RoleAssignment(TargetAnchorReferencesToShape.NodeShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TargetAnchorReferencesToShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TargetAnchorReferencesToShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TargetAnchorReferencesToShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TargetAnchorReferencesToShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TargetAnchor domain role code
		
		/// <summary>
		/// TargetAnchor domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAnchorDomainRoleId = new global::System.Guid(0xdf396ad5, 0x0225, 0x4bb5, 0x8b, 0xb7, 0x97, 0x68, 0xcd, 0x9e, 0x1c, 0x14);
		
		/// <summary>
		/// DomainRole TargetAnchor
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/TargetAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/TargetAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ToShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/TargetAnchor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("df396ad5-0225-4bb5-8bb7-9768cd9e1c14")]
		public virtual TargetAnchor TargetAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TargetAnchor)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAnchorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAnchorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetAnchors of a NodeShape
		/// <summary>
		/// Gets a list of TargetAnchors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TargetAnchor> GetTargetAnchors(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TargetAnchor>, TargetAnchor>(element, NodeShapeDomainRoleId);
		}
		#endregion
		#region NodeShape domain role code
		
		/// <summary>
		/// NodeShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeShapeDomainRoleId = new global::System.Guid(0xdb602d19, 0x2208, 0x47ed, 0x8b, 0xa9, 0xc4, 0x95, 0x58, 0x25, 0xf0, 0xb7);
		
		/// <summary>
		/// DomainRole NodeShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.NodeShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/NodeShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/NodeShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TargetAnchors", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape/NodeShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db602d19-2208-47ed-8ba9-c4955825f0b7")]
		public virtual NodeShape NodeShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ToShape of a TargetAnchor
		/// <summary>
		/// Gets ToShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetToShape(TargetAnchor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetAnchorDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets ToShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetToShape(TargetAnchor element, NodeShape newNodeShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetAnchorDomainRoleId, newNodeShape);
		}
		#endregion
		#region TargetAnchor link accessor
		/// <summary>
		/// Get the TargetAnchorReferencesToShape link to a TargetAnchor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape GetLinkToToShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor targetAnchorInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape>(targetAnchorInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetAnchor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShape link accessor
		/// <summary>
		/// Get the list of TargetAnchorReferencesToShape links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> GetLinksToTargetAnchors ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape nodeShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape>(nodeShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.NodeShapeDomainRoleId);
		}
		#endregion
		#region TargetAnchorReferencesToShape instance accessors
		
		/// <summary>
		/// Get any TargetAnchorReferencesToShape links between a given TargetAnchor and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchorDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TargetAnchorReferencesToShape link between a given TargetAnchorand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchorDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship DiagramHasIncludedDiagrams
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1aca22db-a1fb-430e-a291-0b77ee0f02c0")]
	public partial class DiagramHasIncludedDiagrams : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramHasIncludedDiagrams domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1aca22db, 0xa1fb, 0x430e, 0xa2, 0x91, 0x0b, 0x77, 0xee, 0x0f, 0x02, 0xc0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramHasIncludedDiagrams link in the same Partition as the given Diagram
		/// </summary>
		/// <param name="source">Diagram to use as the source of the relationship.</param>
		/// <param name="target">Diagram to use as the target of the relationship.</param>
		public DiagramHasIncludedDiagrams(Diagram source, Diagram target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId, source), new DslModeling::RoleAssignment(DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasIncludedDiagrams(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasIncludedDiagrams(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramHasIncludedDiagrams(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramHasIncludedDiagrams(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceDiagram domain role code
		
		/// <summary>
		/// SourceDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDiagramDomainRoleId = new global::System.Guid(0xe01a8458, 0xe86e, 0x4f8a, 0xa9, 0x91, 0xb5, 0xc0, 0xd0, 0x11, 0x8e, 0x49);
		
		/// <summary>
		/// DomainRole SourceDiagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/SourceDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/SourceDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncludedDiagrams", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/SourceDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e01a8458-e86e-4f8a-a991-b5c0d0118e49")]
		public virtual Diagram SourceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Diagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentDiagram of a Diagram
		/// <summary>
		/// Gets ParentDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static Diagram GetParentDiagram(Diagram element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetDiagramDomainRoleId) as Diagram;
		}
		
		/// <summary>
		/// Sets ParentDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetParentDiagram(Diagram element, Diagram newSourceDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetDiagramDomainRoleId, newSourceDiagram);
		}
		#endregion
		#region TargetDiagram domain role code
		
		/// <summary>
		/// TargetDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDiagramDomainRoleId = new global::System.Guid(0x2b121843, 0x72f1, 0x48c9, 0x85, 0xe8, 0x22, 0x63, 0xb6, 0x2d, 0x9f, 0x86);
		
		/// <summary>
		/// DomainRole TargetDiagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/TargetDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/TargetDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentDiagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams/TargetDiagram.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2b121843-72f1-48c9-85e8-2263b62d9f86")]
		public virtual Diagram TargetDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Diagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedDiagrams of a Diagram
		/// <summary>
		/// Gets a list of IncludedDiagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Diagram> GetIncludedDiagrams(Diagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Diagram>, Diagram>(element, SourceDiagramDomainRoleId);
		}
		#endregion
		#region SourceDiagram link accessor
		/// <summary>
		/// Get the list of DiagramHasIncludedDiagrams links to a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> GetLinksToIncludedDiagrams ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram sourceDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams>(sourceDiagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId);
		}
		#endregion
		#region TargetDiagram link accessor
		/// <summary>
		/// Get the DiagramHasIncludedDiagrams link to a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams GetLinkToParentDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram targetDiagramInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams>(targetDiagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetDiagram not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramHasIncludedDiagrams instance accessors
		
		/// <summary>
		/// Get any DiagramHasIncludedDiagrams links between a given Diagram and a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams link in links )
			{
				if ( target.Equals(link.TargetDiagram) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramHasIncludedDiagrams link between a given Diagramand a Diagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams link in links )
			{
				if ( target.Equals(link.TargetDiagram) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship LayoutInfoHasChildrenInfos
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("94b30d68-b9fc-482b-a462-e365ee2eed96")]
	public partial class LayoutInfoHasChildrenInfos : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayoutInfoHasChildrenInfos domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94b30d68, 0xb9fc, 0x482b, 0xa4, 0x62, 0xe3, 0x65, 0xee, 0x2e, 0xed, 0x96);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayoutInfoHasChildrenInfos link in the same Partition as the given LayoutInfo
		/// </summary>
		/// <param name="source">LayoutInfo to use as the source of the relationship.</param>
		/// <param name="target">NodeShapeInfo to use as the target of the relationship.</param>
		public LayoutInfoHasChildrenInfos(LayoutInfo source, NodeShapeInfo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId, source), new DslModeling::RoleAssignment(LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayoutInfoHasChildrenInfos(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayoutInfoHasChildrenInfos(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayoutInfoHasChildrenInfos(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayoutInfoHasChildrenInfos(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LayoutInfo domain role code
		
		/// <summary>
		/// LayoutInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayoutInfoDomainRoleId = new global::System.Guid(0x82dd56c4, 0xb8e2, 0x4ac5, 0x8c, 0xc0, 0xac, 0x72, 0x8a, 0xf5, 0xb9, 0xbe);
		
		/// <summary>
		/// DomainRole LayoutInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/LayoutInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/LayoutInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildrenInfos", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/LayoutInfo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82dd56c4-b8e2-4ac5-8cc0-ac728af5b9be")]
		public virtual LayoutInfo LayoutInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayoutInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayoutInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayoutInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayoutInfo of a NodeShapeInfo
		/// <summary>
		/// Gets LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LayoutInfo GetLayoutInfo(NodeShapeInfo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NodeShapeInfoDomainRoleId) as LayoutInfo;
		}
		
		/// <summary>
		/// Sets LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayoutInfo(NodeShapeInfo element, LayoutInfo newLayoutInfo)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NodeShapeInfoDomainRoleId, newLayoutInfo);
		}
		#endregion
		#region NodeShapeInfo domain role code
		
		/// <summary>
		/// NodeShapeInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeShapeInfoDomainRoleId = new global::System.Guid(0x0711653d, 0xe3ef, 0x4056, 0xa3, 0xca, 0x21, 0x52, 0x75, 0xc1, 0xbc, 0x3b);
		
		/// <summary>
		/// DomainRole NodeShapeInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/NodeShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/NodeShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LayoutInfo", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos/NodeShapeInfo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0711653d-e3ef-4056-a3ca-215275c1bc3b")]
		public virtual NodeShapeInfo NodeShapeInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShapeInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeShapeInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeShapeInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildrenInfos of a LayoutInfo
		/// <summary>
		/// Gets a list of ChildrenInfos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NodeShapeInfo> GetChildrenInfos(LayoutInfo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShapeInfo>, NodeShapeInfo>(element, LayoutInfoDomainRoleId);
		}
		#endregion
		#region LayoutInfo link accessor
		/// <summary>
		/// Get the list of LayoutInfoHasChildrenInfos links to a LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> GetLinksToChildrenInfos ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo layoutInfoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos>(layoutInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId);
		}
		#endregion
		#region NodeShapeInfo link accessor
		/// <summary>
		/// Get the LayoutInfoHasChildrenInfos link to a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos GetLinkToLayoutInfo (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo nodeShapeInfoInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos>(nodeShapeInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NodeShapeInfo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayoutInfoHasChildrenInfos instance accessors
		
		/// <summary>
		/// Get any LayoutInfoHasChildrenInfos links between a given LayoutInfo and a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos link in links )
			{
				if ( target.Equals(link.NodeShapeInfo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayoutInfoHasChildrenInfos link between a given LayoutInfoand a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos link in links )
			{
				if ( target.Equals(link.NodeShapeInfo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship LayoutInfoHasLinkShapeInfos
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("62cce076-334a-4806-98ca-d185a27cb47e")]
	public partial class LayoutInfoHasLinkShapeInfos : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayoutInfoHasLinkShapeInfos domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62cce076, 0x334a, 0x4806, 0x98, 0xca, 0xd1, 0x85, 0xa2, 0x7c, 0xb4, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayoutInfoHasLinkShapeInfos link in the same Partition as the given LayoutInfo
		/// </summary>
		/// <param name="source">LayoutInfo to use as the source of the relationship.</param>
		/// <param name="target">LinkShapeInfo to use as the target of the relationship.</param>
		public LayoutInfoHasLinkShapeInfos(LayoutInfo source, LinkShapeInfo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId, source), new DslModeling::RoleAssignment(LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayoutInfoHasLinkShapeInfos(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayoutInfoHasLinkShapeInfos(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayoutInfoHasLinkShapeInfos(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayoutInfoHasLinkShapeInfos(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LayoutInfo domain role code
		
		/// <summary>
		/// LayoutInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayoutInfoDomainRoleId = new global::System.Guid(0xa0714924, 0x91b3, 0x4c58, 0x89, 0x18, 0xf6, 0xdd, 0x76, 0x8d, 0xd5, 0x57);
		
		/// <summary>
		/// DomainRole LayoutInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LayoutInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LayoutInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LinkShapeInfos", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LayoutInfo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a0714924-91b3-4c58-8918-f6dd768dd557")]
		public virtual LayoutInfo LayoutInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayoutInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayoutInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayoutInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayoutInfo of a LinkShapeInfo
		/// <summary>
		/// Gets LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LayoutInfo GetLayoutInfo(LinkShapeInfo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LinkShapeInfoDomainRoleId) as LayoutInfo;
		}
		
		/// <summary>
		/// Sets LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayoutInfo(LinkShapeInfo element, LayoutInfo newLayoutInfo)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LinkShapeInfoDomainRoleId, newLayoutInfo);
		}
		#endregion
		#region LinkShapeInfo domain role code
		
		/// <summary>
		/// LinkShapeInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid LinkShapeInfoDomainRoleId = new global::System.Guid(0xd5faf004, 0xbc53, 0x4861, 0xa9, 0x7a, 0x20, 0xa7, 0x7c, 0xce, 0x2e, 0xe2);
		
		/// <summary>
		/// DomainRole LinkShapeInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LinkShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LinkShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LayoutInfo", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos/LinkShapeInfo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d5faf004-bc53-4861-a97a-20a77cce2ee2")]
		public virtual LinkShapeInfo LinkShapeInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LinkShapeInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, LinkShapeInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LinkShapeInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShapeInfos of a LayoutInfo
		/// <summary>
		/// Gets a list of LinkShapeInfos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LinkShapeInfo> GetLinkShapeInfos(LayoutInfo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<LinkShapeInfo>, LinkShapeInfo>(element, LayoutInfoDomainRoleId);
		}
		#endregion
		#region LayoutInfo link accessor
		/// <summary>
		/// Get the list of LayoutInfoHasLinkShapeInfos links to a LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> GetLinksToLinkShapeInfos ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo layoutInfoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos>(layoutInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId);
		}
		#endregion
		#region LinkShapeInfo link accessor
		/// <summary>
		/// Get the LayoutInfoHasLinkShapeInfos link to a LinkShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos GetLinkToLayoutInfo (global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo linkShapeInfoInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos>(linkShapeInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LinkShapeInfo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayoutInfoHasLinkShapeInfos instance accessors
		
		/// <summary>
		/// Get any LayoutInfoHasLinkShapeInfos links between a given LayoutInfo and a LinkShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos link in links )
			{
				if ( target.Equals(link.LinkShapeInfo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayoutInfoHasLinkShapeInfos link between a given LayoutInfoand a LinkShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos link in links )
			{
				if ( target.Equals(link.LinkShapeInfo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship DiagramsModelHasLayoutInfos
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ad91d0e8-a691-4c02-ab93-2b4d3c60bbc6")]
	public partial class DiagramsModelHasLayoutInfos : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramsModelHasLayoutInfos domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xad91d0e8, 0xa691, 0x4c02, 0xab, 0x93, 0x2b, 0x4d, 0x3c, 0x60, 0xbb, 0xc6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramsModelHasLayoutInfos link in the same Partition as the given DiagramsModel
		/// </summary>
		/// <param name="source">DiagramsModel to use as the source of the relationship.</param>
		/// <param name="target">LayoutInfo to use as the target of the relationship.</param>
		public DiagramsModelHasLayoutInfos(DiagramsModel source, LayoutInfo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId, source), new DslModeling::RoleAssignment(DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramsModelHasLayoutInfos(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramsModelHasLayoutInfos(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramsModelHasLayoutInfos(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramsModelHasLayoutInfos(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramsModel domain role code
		
		/// <summary>
		/// DiagramsModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramsModelDomainRoleId = new global::System.Guid(0xa8cb8098, 0xf7ab, 0x4a66, 0xb4, 0x31, 0x08, 0x91, 0x26, 0x53, 0xc4, 0xfc);
		
		/// <summary>
		/// DomainRole DiagramsModel
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/DiagramsModel.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/DiagramsModel.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LayoutInfos", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/DiagramsModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a8cb8098-f7ab-4a66-b431-08912653c4fc")]
		public virtual DiagramsModel DiagramsModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramsModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramsModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramsModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramsModel of a LayoutInfo
		/// <summary>
		/// Gets DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramsModel GetDiagramsModel(LayoutInfo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LayoutInfoDomainRoleId) as DiagramsModel;
		}
		
		/// <summary>
		/// Sets DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramsModel(LayoutInfo element, DiagramsModel newDiagramsModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LayoutInfoDomainRoleId, newDiagramsModel);
		}
		#endregion
		#region LayoutInfo domain role code
		
		/// <summary>
		/// LayoutInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayoutInfoDomainRoleId = new global::System.Guid(0xa1980703, 0x2c39, 0x4809, 0x99, 0x48, 0xf6, 0x08, 0x65, 0xa1, 0xf9, 0xa2);
		
		/// <summary>
		/// DomainRole LayoutInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/LayoutInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/LayoutInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramsModel", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos/LayoutInfo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a1980703-2c39-4809-9948-f60865a1f9a2")]
		public virtual LayoutInfo LayoutInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayoutInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayoutInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayoutInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayoutInfos of a DiagramsModel
		/// <summary>
		/// Gets a list of LayoutInfos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LayoutInfo> GetLayoutInfos(DiagramsModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<LayoutInfo>, LayoutInfo>(element, DiagramsModelDomainRoleId);
		}
		#endregion
		#region DiagramsModel link accessor
		/// <summary>
		/// Get the list of DiagramsModelHasLayoutInfos links to a DiagramsModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> GetLinksToLayoutInfos ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel diagramsModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos>(diagramsModelInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId);
		}
		#endregion
		#region LayoutInfo link accessor
		/// <summary>
		/// Get the DiagramsModelHasLayoutInfos link to a LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos GetLinkToDiagramsModel (global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo layoutInfoInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos>(layoutInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LayoutInfo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramsModelHasLayoutInfos instance accessors
		
		/// <summary>
		/// Get any DiagramsModelHasLayoutInfos links between a given DiagramsModel and a LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos link in links )
			{
				if ( target.Equals(link.LayoutInfo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramsModelHasLayoutInfos link between a given DiagramsModeland a LayoutInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos link in links )
			{
				if ( target.Equals(link.LayoutInfo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship NodeShapeInfoHasChildrenInfos
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8bb8b430-76d9-4838-9fa1-595d84c616c3")]
	public partial class NodeShapeInfoHasChildrenInfos : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NodeShapeInfoHasChildrenInfos domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8bb8b430, 0x76d9, 0x4838, 0x9f, 0xa1, 0x59, 0x5d, 0x84, 0xc6, 0x16, 0xc3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NodeShapeInfoHasChildrenInfos link in the same Partition as the given NodeShapeInfo
		/// </summary>
		/// <param name="source">NodeShapeInfo to use as the source of the relationship.</param>
		/// <param name="target">NodeShapeInfo to use as the target of the relationship.</param>
		public NodeShapeInfoHasChildrenInfos(NodeShapeInfo source, NodeShapeInfo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId, source), new DslModeling::RoleAssignment(NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeInfoHasChildrenInfos(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeInfoHasChildrenInfos(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeShapeInfoHasChildrenInfos(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeShapeInfoHasChildrenInfos(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceNodeShapeInfo domain role code
		
		/// <summary>
		/// SourceNodeShapeInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceNodeShapeInfoDomainRoleId = new global::System.Guid(0xdcde8432, 0x2d76, 0x4265, 0xba, 0x97, 0xf9, 0xb2, 0xbe, 0x07, 0xac, 0x83);
		
		/// <summary>
		/// DomainRole SourceNodeShapeInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/SourceNodeShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/SourceNodeShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildrenInfos", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/SourceNodeShapeInfo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dcde8432-2d76-4265-ba97-f9b2be07ac83")]
		public virtual NodeShapeInfo SourceNodeShapeInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShapeInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceNodeShapeInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceNodeShapeInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentInfo of a NodeShapeInfo
		/// <summary>
		/// Gets ParentInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShapeInfo GetParentInfo(NodeShapeInfo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetNodeShapeInfoDomainRoleId) as NodeShapeInfo;
		}
		
		/// <summary>
		/// Sets ParentInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentInfo(NodeShapeInfo element, NodeShapeInfo newSourceNodeShapeInfo)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetNodeShapeInfoDomainRoleId, newSourceNodeShapeInfo);
		}
		#endregion
		#region TargetNodeShapeInfo domain role code
		
		/// <summary>
		/// TargetNodeShapeInfo domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetNodeShapeInfoDomainRoleId = new global::System.Guid(0xfea6bea8, 0xc310, 0x47cb, 0xb7, 0x2a, 0xbe, 0x47, 0x8d, 0xcf, 0xd4, 0xcd);
		
		/// <summary>
		/// DomainRole TargetNodeShapeInfo
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfo
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/TargetNodeShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/TargetNodeShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentInfo", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos/TargetNodeShapeInfo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fea6bea8-c310-47cb-b72a-be478dcfd4cd")]
		public virtual NodeShapeInfo TargetNodeShapeInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShapeInfo)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetNodeShapeInfoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetNodeShapeInfoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildrenInfos of a NodeShapeInfo
		/// <summary>
		/// Gets a list of ChildrenInfos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NodeShapeInfo> GetChildrenInfos(NodeShapeInfo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShapeInfo>, NodeShapeInfo>(element, SourceNodeShapeInfoDomainRoleId);
		}
		#endregion
		#region SourceNodeShapeInfo link accessor
		/// <summary>
		/// Get the list of NodeShapeInfoHasChildrenInfos links to a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> GetLinksToChildrenInfos ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo sourceNodeShapeInfoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos>(sourceNodeShapeInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId);
		}
		#endregion
		#region TargetNodeShapeInfo link accessor
		/// <summary>
		/// Get the NodeShapeInfoHasChildrenInfos link to a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos GetLinkToParentInfo (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo targetNodeShapeInfoInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos>(targetNodeShapeInfoInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetNodeShapeInfo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShapeInfoHasChildrenInfos instance accessors
		
		/// <summary>
		/// Get any NodeShapeInfoHasChildrenInfos links between a given NodeShapeInfo and a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos link in links )
			{
				if ( target.Equals(link.TargetNodeShapeInfo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NodeShapeInfoHasChildrenInfos link between a given NodeShapeInfoand a NodeShapeInfo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos link in links )
			{
				if ( target.Equals(link.TargetNodeShapeInfo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship GraphicalDependenciesDiagramReferencesSourceDependencyShapes
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d611d073-0100-47f2-aa07-0d3b71966e6e")]
	public partial class GraphicalDependenciesDiagramReferencesSourceDependencyShapes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GraphicalDependenciesDiagramReferencesSourceDependencyShapes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd611d073, 0x0100, 0x47f2, 0xaa, 0x07, 0x0d, 0x3b, 0x71, 0x96, 0x6e, 0x6e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GraphicalDependenciesDiagramReferencesSourceDependencyShapes link in the same Partition as the given GraphicalDependenciesDiagram
		/// </summary>
		/// <param name="source">GraphicalDependenciesDiagram to use as the source of the relationship.</param>
		/// <param name="target">GraphicalDependencyShape to use as the target of the relationship.</param>
		public GraphicalDependenciesDiagramReferencesSourceDependencyShapes(GraphicalDependenciesDiagram source, GraphicalDependencyShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId, source), new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependencyShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesSourceDependencyShapes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesSourceDependencyShapes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesSourceDependencyShapes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesSourceDependencyShapes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GraphicalDependenciesDiagram domain role code
		
		/// <summary>
		/// GraphicalDependenciesDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependenciesDiagramDomainRoleId = new global::System.Guid(0x1360b591, 0xfc74, 0x431f, 0x95, 0x49, 0x18, 0x75, 0x08, 0x5e, 0x49, 0xf0);
		
		/// <summary>
		/// DomainRole GraphicalDependenciesDiagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependenciesDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependenciesDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceDependencyShapes", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependenciesDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1360b591-fc74-431f-9549-1875085e49f0")]
		public virtual GraphicalDependenciesDiagram GraphicalDependenciesDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependenciesDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GraphicalDependenciesDiagram of a GraphicalDependencyShape
		/// <summary>
		/// Gets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GraphicalDependenciesDiagram GetGraphicalDependenciesDiagram(GraphicalDependencyShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependencyShapeDomainRoleId) as GraphicalDependenciesDiagram;
		}
		
		/// <summary>
		/// Sets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGraphicalDependenciesDiagram(GraphicalDependencyShape element, GraphicalDependenciesDiagram newGraphicalDependenciesDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependencyShapeDomainRoleId, newGraphicalDependenciesDiagram);
		}
		#endregion
		#region GraphicalDependencyShape domain role code
		
		/// <summary>
		/// GraphicalDependencyShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependencyShapeDomainRoleId = new global::System.Guid(0xb0f55db3, 0x0a66, 0x4a32, 0x92, 0x66, 0xd7, 0x51, 0xeb, 0x7a, 0x81, 0xb6);
		
		/// <summary>
		/// DomainRole GraphicalDependencyShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependencyShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependencyShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependencyShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GraphicalDependenciesDiagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes/GraphicalDependencyShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b0f55db3-0a66-4a32-9266-d751eb7a81b6")]
		public virtual GraphicalDependencyShape GraphicalDependencyShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependencyShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependencyShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependencyShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceDependencyShapes of a GraphicalDependenciesDiagram
		/// <summary>
		/// Gets a list of SourceDependencyShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GraphicalDependencyShape> GetSourceDependencyShapes(GraphicalDependenciesDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicalDependencyShape>, GraphicalDependencyShape>(element, GraphicalDependenciesDiagramDomainRoleId);
		}
		#endregion
		#region GraphicalDependenciesDiagram link accessor
		/// <summary>
		/// Get the list of GraphicalDependenciesDiagramReferencesSourceDependencyShapes links to a GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> GetLinksToSourceDependencyShapes ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram graphicalDependenciesDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes>(graphicalDependenciesDiagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
		}
		#endregion
		#region GraphicalDependencyShape link accessor
		/// <summary>
		/// Get the GraphicalDependenciesDiagramReferencesSourceDependencyShapes link to a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes GetLinkToGraphicalDependenciesDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape graphicalDependencyShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes>(graphicalDependencyShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependencyShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependencyShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GraphicalDependenciesDiagramReferencesSourceDependencyShapes instance accessors
		
		/// <summary>
		/// Get any GraphicalDependenciesDiagramReferencesSourceDependencyShapes links between a given GraphicalDependenciesDiagram and a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GraphicalDependenciesDiagramReferencesSourceDependencyShapes link between a given GraphicalDependenciesDiagramand a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship GraphicalDependenciesDiagramReferencesTargetDependencyShapes
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e1b063b1-5cf1-4045-ae0b-891f5fa87f9e")]
	public partial class GraphicalDependenciesDiagramReferencesTargetDependencyShapes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GraphicalDependenciesDiagramReferencesTargetDependencyShapes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1b063b1, 0x5cf1, 0x4045, 0xae, 0x0b, 0x89, 0x1f, 0x5f, 0xa8, 0x7f, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GraphicalDependenciesDiagramReferencesTargetDependencyShapes link in the same Partition as the given GraphicalDependenciesDiagram
		/// </summary>
		/// <param name="source">GraphicalDependenciesDiagram to use as the source of the relationship.</param>
		/// <param name="target">GraphicalDependencyShape to use as the target of the relationship.</param>
		public GraphicalDependenciesDiagramReferencesTargetDependencyShapes(GraphicalDependenciesDiagram source, GraphicalDependencyShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId, source), new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependencyShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesTargetDependencyShapes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesTargetDependencyShapes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesTargetDependencyShapes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesTargetDependencyShapes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GraphicalDependenciesDiagram domain role code
		
		/// <summary>
		/// GraphicalDependenciesDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependenciesDiagramDomainRoleId = new global::System.Guid(0x6b972466, 0x6fc8, 0x4f11, 0x99, 0x10, 0xe1, 0xcb, 0x09, 0x57, 0x77, 0x35);
		
		/// <summary>
		/// DomainRole GraphicalDependenciesDiagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependenciesDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependenciesDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetDependencyShapes", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependenciesDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b972466-6fc8-4f11-9910-e1cb09577735")]
		public virtual GraphicalDependenciesDiagram GraphicalDependenciesDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependenciesDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GraphicalDependenciesDiagram of a GraphicalDependencyShape
		/// <summary>
		/// Gets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GraphicalDependenciesDiagram GetGraphicalDependenciesDiagram(GraphicalDependencyShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependencyShapeDomainRoleId) as GraphicalDependenciesDiagram;
		}
		
		/// <summary>
		/// Sets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGraphicalDependenciesDiagram(GraphicalDependencyShape element, GraphicalDependenciesDiagram newGraphicalDependenciesDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependencyShapeDomainRoleId, newGraphicalDependenciesDiagram);
		}
		#endregion
		#region GraphicalDependencyShape domain role code
		
		/// <summary>
		/// GraphicalDependencyShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependencyShapeDomainRoleId = new global::System.Guid(0x89e1ba4b, 0xb250, 0x41ed, 0x85, 0xb0, 0x0d, 0x11, 0x5e, 0x42, 0x1f, 0xcd);
		
		/// <summary>
		/// DomainRole GraphicalDependencyShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependencyShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependencyShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependencyShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GraphicalDependenciesDiagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes/GraphicalDependencyShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("89e1ba4b-b250-41ed-85b0-0d115e421fcd")]
		public virtual GraphicalDependencyShape GraphicalDependencyShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependencyShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependencyShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependencyShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetDependencyShapes of a GraphicalDependenciesDiagram
		/// <summary>
		/// Gets a list of TargetDependencyShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GraphicalDependencyShape> GetTargetDependencyShapes(GraphicalDependenciesDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicalDependencyShape>, GraphicalDependencyShape>(element, GraphicalDependenciesDiagramDomainRoleId);
		}
		#endregion
		#region GraphicalDependenciesDiagram link accessor
		/// <summary>
		/// Get the list of GraphicalDependenciesDiagramReferencesTargetDependencyShapes links to a GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> GetLinksToTargetDependencyShapes ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram graphicalDependenciesDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes>(graphicalDependenciesDiagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
		}
		#endregion
		#region GraphicalDependencyShape link accessor
		/// <summary>
		/// Get the GraphicalDependenciesDiagramReferencesTargetDependencyShapes link to a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes GetLinkToGraphicalDependenciesDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape graphicalDependencyShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes>(graphicalDependencyShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependencyShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependencyShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GraphicalDependenciesDiagramReferencesTargetDependencyShapes instance accessors
		
		/// <summary>
		/// Get any GraphicalDependenciesDiagramReferencesTargetDependencyShapes links between a given GraphicalDependenciesDiagram and a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GraphicalDependenciesDiagramReferencesTargetDependencyShapes link between a given GraphicalDependenciesDiagramand a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship GraphicalDependencyLinkShapeReferencesMainShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1176beaa-9980-466e-8a09-bcab05649a94")]
	public partial class GraphicalDependencyLinkShapeReferencesMainShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GraphicalDependencyLinkShapeReferencesMainShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1176beaa, 0x9980, 0x466e, 0x8a, 0x09, 0xbc, 0xab, 0x05, 0x64, 0x9a, 0x94);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GraphicalDependencyLinkShapeReferencesMainShape link in the same Partition as the given GraphicalDependencyLinkShape
		/// </summary>
		/// <param name="source">GraphicalDependencyLinkShape to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public GraphicalDependencyLinkShapeReferencesMainShape(GraphicalDependencyLinkShape source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId, source), new DslModeling::RoleAssignment(GraphicalDependencyLinkShapeReferencesMainShape.NodeShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependencyLinkShapeReferencesMainShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependencyLinkShapeReferencesMainShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependencyLinkShapeReferencesMainShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependencyLinkShapeReferencesMainShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GraphicalDependencyLinkShape domain role code
		
		/// <summary>
		/// GraphicalDependencyLinkShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependencyLinkShapeDomainRoleId = new global::System.Guid(0xc03d1b71, 0xd350, 0x4a4b, 0x9a, 0x07, 0x1d, 0xd7, 0x7c, 0x23, 0xa3, 0x8b);
		
		/// <summary>
		/// DomainRole GraphicalDependencyLinkShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/GraphicalDependencyLinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/GraphicalDependencyLinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MainShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/GraphicalDependencyLinkShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c03d1b71-d350-4a4b-9a07-1dd77c23a38b")]
		public virtual GraphicalDependencyLinkShape GraphicalDependencyLinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependencyLinkShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependencyLinkShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependencyLinkShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShape of a NodeShape
		/// <summary>
		/// Gets a list of LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GraphicalDependencyLinkShape> GetLinkShape(NodeShape element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicalDependencyLinkShape>, GraphicalDependencyLinkShape>(element, NodeShapeDomainRoleId);
		}
		#endregion
		#region NodeShape domain role code
		
		/// <summary>
		/// NodeShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeShapeDomainRoleId = new global::System.Guid(0x1efa32c9, 0xcdf0, 0x4894, 0x83, 0x7f, 0xe6, 0x7a, 0x88, 0xb0, 0x77, 0xda);
		
		/// <summary>
		/// DomainRole NodeShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.NodeShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/NodeShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/NodeShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LinkShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape/NodeShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1efa32c9-cdf0-4894-837f-e67a88b077da")]
		public virtual NodeShape NodeShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MainShape of a GraphicalDependencyLinkShape
		/// <summary>
		/// Gets MainShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetMainShape(GraphicalDependencyLinkShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependencyLinkShapeDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets MainShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMainShape(GraphicalDependencyLinkShape element, NodeShape newNodeShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependencyLinkShapeDomainRoleId, newNodeShape);
		}
		#endregion
		#region GraphicalDependencyLinkShape link accessor
		/// <summary>
		/// Get the GraphicalDependencyLinkShapeReferencesMainShape link to a GraphicalDependencyLinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape GetLinkToMainShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape graphicalDependencyLinkShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape>(graphicalDependencyLinkShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependencyLinkShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShape link accessor
		/// <summary>
		/// Get the list of GraphicalDependencyLinkShapeReferencesMainShape links to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> GetLinksToLinkShape ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape nodeShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape>(nodeShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.NodeShapeDomainRoleId);
		}
		#endregion
		#region GraphicalDependencyLinkShapeReferencesMainShape instance accessors
		
		/// <summary>
		/// Get any GraphicalDependencyLinkShapeReferencesMainShape links between a given GraphicalDependencyLinkShape and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GraphicalDependencyLinkShapeReferencesMainShape link between a given GraphicalDependencyLinkShapeand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship GraphicalDependenciesDiagramReferencesMainElementShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("53bba87c-12be-45c6-99f2-47f19a94723f")]
	public partial class GraphicalDependenciesDiagramReferencesMainElementShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GraphicalDependenciesDiagramReferencesMainElementShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53bba87c, 0x12be, 0x45c6, 0x99, 0xf2, 0x47, 0xf1, 0x9a, 0x94, 0x72, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GraphicalDependenciesDiagramReferencesMainElementShape link in the same Partition as the given GraphicalDependenciesDiagram
		/// </summary>
		/// <param name="source">GraphicalDependenciesDiagram to use as the source of the relationship.</param>
		/// <param name="target">NodeShape to use as the target of the relationship.</param>
		public GraphicalDependenciesDiagramReferencesMainElementShape(GraphicalDependenciesDiagram source, NodeShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId, source), new DslModeling::RoleAssignment(GraphicalDependenciesDiagramReferencesMainElementShape.NodeShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesMainElementShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesMainElementShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependenciesDiagramReferencesMainElementShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependenciesDiagramReferencesMainElementShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GraphicalDependenciesDiagram domain role code
		
		/// <summary>
		/// GraphicalDependenciesDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependenciesDiagramDomainRoleId = new global::System.Guid(0x14745916, 0xd6a3, 0x41c0, 0xbc, 0xaa, 0xce, 0xe6, 0xda, 0xe1, 0x93, 0x06);
		
		/// <summary>
		/// DomainRole GraphicalDependenciesDiagram
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/GraphicalDependenciesDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/GraphicalDependenciesDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MainElementShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/GraphicalDependenciesDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("14745916-d6a3-41c0-bcaa-cee6dae19306")]
		public virtual GraphicalDependenciesDiagram GraphicalDependenciesDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependenciesDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependenciesDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GraphicalDependenciesDiagram of a NodeShape
		/// <summary>
		/// Gets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GraphicalDependenciesDiagram GetGraphicalDependenciesDiagram(NodeShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NodeShapeDomainRoleId) as GraphicalDependenciesDiagram;
		}
		
		/// <summary>
		/// Sets GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGraphicalDependenciesDiagram(NodeShape element, GraphicalDependenciesDiagram newGraphicalDependenciesDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NodeShapeDomainRoleId, newGraphicalDependenciesDiagram);
		}
		#endregion
		#region NodeShape domain role code
		
		/// <summary>
		/// NodeShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeShapeDomainRoleId = new global::System.Guid(0xad0bdac9, 0x0759, 0x4c95, 0x88, 0xed, 0x45, 0xb9, 0x71, 0xf6, 0x92, 0x86);
		
		/// <summary>
		/// DomainRole NodeShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.NodeShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/NodeShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/NodeShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "GraphicalDependenciesDiagram", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape/NodeShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ad0bdac9-0759-4c95-88ed-45b971f69286")]
		public virtual NodeShape NodeShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NodeShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MainElementShape of a GraphicalDependenciesDiagram
		/// <summary>
		/// Gets MainElementShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NodeShape GetMainElementShape(GraphicalDependenciesDiagram element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependenciesDiagramDomainRoleId) as NodeShape;
		}
		
		/// <summary>
		/// Sets MainElementShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMainElementShape(GraphicalDependenciesDiagram element, NodeShape newNodeShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependenciesDiagramDomainRoleId, newNodeShape);
		}
		#endregion
		#region GraphicalDependenciesDiagram link accessor
		/// <summary>
		/// Get the GraphicalDependenciesDiagramReferencesMainElementShape link to a GraphicalDependenciesDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape GetLinkToMainElementShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram graphicalDependenciesDiagramInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape>(graphicalDependenciesDiagramInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependenciesDiagram not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NodeShape link accessor
		/// <summary>
		/// Get the GraphicalDependenciesDiagramReferencesMainElementShape link to a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape GetLinkToGraphicalDependenciesDiagram (global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape nodeShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape>(nodeShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.NodeShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NodeShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GraphicalDependenciesDiagramReferencesMainElementShape instance accessors
		
		/// <summary>
		/// Get any GraphicalDependenciesDiagramReferencesMainElementShape links between a given GraphicalDependenciesDiagram and a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GraphicalDependenciesDiagramReferencesMainElementShape link between a given GraphicalDependenciesDiagramand a NodeShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape link in links )
			{
				if ( target.Equals(link.NodeShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainRelationship GraphicalDependencyLinkShapeReferencesDependencyShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3ce21aad-289d-41cc-8fb2-1ea0aa45e802")]
	public partial class GraphicalDependencyLinkShapeReferencesDependencyShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GraphicalDependencyLinkShapeReferencesDependencyShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ce21aad, 0x289d, 0x41cc, 0x8f, 0xb2, 0x1e, 0xa0, 0xaa, 0x45, 0xe8, 0x02);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GraphicalDependencyLinkShapeReferencesDependencyShape link in the same Partition as the given GraphicalDependencyLinkShape
		/// </summary>
		/// <param name="source">GraphicalDependencyLinkShape to use as the source of the relationship.</param>
		/// <param name="target">GraphicalDependencyShape to use as the target of the relationship.</param>
		public GraphicalDependencyLinkShapeReferencesDependencyShape(GraphicalDependencyLinkShape source, GraphicalDependencyShape target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId, source), new DslModeling::RoleAssignment(GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependencyLinkShapeReferencesDependencyShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependencyLinkShapeReferencesDependencyShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GraphicalDependencyLinkShapeReferencesDependencyShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GraphicalDependencyLinkShapeReferencesDependencyShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region GraphicalDependencyLinkShape domain role code
		
		/// <summary>
		/// GraphicalDependencyLinkShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependencyLinkShapeDomainRoleId = new global::System.Guid(0x051a9d50, 0x3fc2, 0x4c18, 0x9a, 0xd8, 0x56, 0xfd, 0xd6, 0x1a, 0xef, 0x59);
		
		/// <summary>
		/// DomainRole GraphicalDependencyLinkShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyLinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyLinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyLinkShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("051a9d50-3fc2-4c18-9ad8-56fdd61aef59")]
		public virtual GraphicalDependencyLinkShape GraphicalDependencyLinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependencyLinkShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependencyLinkShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependencyLinkShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LinkShape of a GraphicalDependencyShape
		/// <summary>
		/// Gets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GraphicalDependencyLinkShape GetLinkShape(GraphicalDependencyShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependencyShapeDomainRoleId) as GraphicalDependencyLinkShape;
		}
		
		/// <summary>
		/// Sets LinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLinkShape(GraphicalDependencyShape element, GraphicalDependencyLinkShape newGraphicalDependencyLinkShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependencyShapeDomainRoleId, newGraphicalDependencyLinkShape);
		}
		#endregion
		#region GraphicalDependencyShape domain role code
		
		/// <summary>
		/// GraphicalDependencyShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicalDependencyShapeDomainRoleId = new global::System.Guid(0x5511dba2, 0x3dcb, 0x4a73, 0x81, 0x3d, 0x90, 0xdd, 0xfd, 0x50, 0x40, 0xa1);
		
		/// <summary>
		/// DomainRole GraphicalDependencyShape
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LinkShape", PropertyDisplayNameKey="Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape/GraphicalDependencyShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5511dba2-3dcb-4a73-813d-90ddfd5040a1")]
		public virtual GraphicalDependencyShape GraphicalDependencyShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicalDependencyShape)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicalDependencyShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicalDependencyShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyShape of a GraphicalDependencyLinkShape
		/// <summary>
		/// Gets DependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static GraphicalDependencyShape GetDependencyShape(GraphicalDependencyLinkShape element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicalDependencyLinkShapeDomainRoleId) as GraphicalDependencyShape;
		}
		
		/// <summary>
		/// Sets DependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDependencyShape(GraphicalDependencyLinkShape element, GraphicalDependencyShape newGraphicalDependencyShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicalDependencyLinkShapeDomainRoleId, newGraphicalDependencyShape);
		}
		#endregion
		#region GraphicalDependencyLinkShape link accessor
		/// <summary>
		/// Get the GraphicalDependencyLinkShapeReferencesDependencyShape link to a GraphicalDependencyLinkShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape GetLinkToDependencyShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape graphicalDependencyLinkShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape>(graphicalDependencyLinkShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependencyLinkShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GraphicalDependencyShape link accessor
		/// <summary>
		/// Get the GraphicalDependencyLinkShapeReferencesDependencyShape link to a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape GetLinkToLinkShape (global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape graphicalDependencyShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape>(graphicalDependencyShapeInstance, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicalDependencyShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GraphicalDependencyLinkShapeReferencesDependencyShape instance accessors
		
		/// <summary>
		/// Get any GraphicalDependencyLinkShapeReferencesDependencyShape links between a given GraphicalDependencyLinkShape and a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> GetLinks( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GraphicalDependencyLinkShapeReferencesDependencyShape link between a given GraphicalDependencyLinkShapeand a GraphicalDependencyShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape GetLink( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape>(source, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId);
			foreach ( global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape link in links )
			{
				if ( target.Equals(link.GraphicalDependencyShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
