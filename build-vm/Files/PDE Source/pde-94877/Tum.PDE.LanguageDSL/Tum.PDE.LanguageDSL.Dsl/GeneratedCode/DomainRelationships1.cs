//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship AttributedDomainElementHasProperties
	/// Description for Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1ca3e3d2-6711-4d10-a58c-1d6a44eb02a7")]
	public partial class AttributedDomainElementHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttributedDomainElementHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ca3e3d2, 0x6711, 0x4d10, 0xa5, 0x8c, 0x1d, 0x6a, 0x44, 0xeb, 0x02, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttributedDomainElementHasProperties link in the same Partition as the given AttributedDomainElement
		/// </summary>
		/// <param name="source">AttributedDomainElement to use as the source of the relationship.</param>
		/// <param name="target">DomainProperty to use as the target of the relationship.</param>
		public AttributedDomainElementHasProperties(AttributedDomainElement source, DomainProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttributedDomainElementHasProperties.DomainElementDomainRoleId, source), new DslModeling::RoleAssignment(AttributedDomainElementHasProperties.DomainPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributedDomainElementHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributedDomainElementHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttributedDomainElementHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttributedDomainElementHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainElement domain role code
		
		/// <summary>
		/// DomainElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainElementDomainRoleId = new global::System.Guid(0x0176d1b0, 0xfbd0, 0x49b0, 0x89, 0x29, 0x10, 0x54, 0xd7, 0xc6, 0xbc, 0x7f);
		
		/// <summary>
		/// DomainRole DomainElement
		/// Description for
		/// Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainElement
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainElement.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainElement.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0176d1b0-fbd0-49b0-8929-1054d7c6bc7f")]
		public virtual AttributedDomainElement DomainElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributedDomainElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Element of a DomainProperty
		/// <summary>
		/// Gets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributedDomainElement GetElement(DomainProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainPropertyDomainRoleId) as AttributedDomainElement;
		}
		
		/// <summary>
		/// Sets Element.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetElement(DomainProperty element, AttributedDomainElement newDomainElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainPropertyDomainRoleId, newDomainElement);
		}
		#endregion
		#region DomainProperty domain role code
		
		/// <summary>
		/// DomainProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainPropertyDomainRoleId = new global::System.Guid(0x71da984f, 0x3481, 0x4158, 0xbb, 0xe9, 0x9c, 0x25, 0xb0, 0x82, 0xe5, 0x94);
		
		/// <summary>
		/// DomainRole DomainProperty
		/// Description for
		/// Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Element", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties/DomainProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("71da984f-3481-4158-bbe9-9c25b082e594")]
		public virtual DomainProperty DomainProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a AttributedDomainElement
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainProperty> GetProperties(AttributedDomainElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainProperty>, DomainProperty>(element, DomainElementDomainRoleId);
		}
		#endregion
		#region DomainElement link accessor
		/// <summary>
		/// Get the list of AttributedDomainElementHasProperties links to a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> GetLinksToProperties ( global::Tum.PDE.LanguageDSL.AttributedDomainElement domainElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(domainElementInstance, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainElementDomainRoleId);
		}
		#endregion
		#region DomainProperty link accessor
		/// <summary>
		/// Get the AttributedDomainElementHasProperties link to a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties GetLinkToElement (global::Tum.PDE.LanguageDSL.DomainProperty domainPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(domainPropertyInstance, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributedDomainElementHasProperties instance accessors
		
		/// <summary>
		/// Get any AttributedDomainElementHasProperties links between a given AttributedDomainElement and a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> GetLinks( global::Tum.PDE.LanguageDSL.AttributedDomainElement source, global::Tum.PDE.LanguageDSL.DomainProperty target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(source, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainElementDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties link in links )
			{
				if ( target.Equals(link.DomainProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttributedDomainElementHasProperties link between a given AttributedDomainElementand a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties GetLink( global::Tum.PDE.LanguageDSL.AttributedDomainElement source, global::Tum.PDE.LanguageDSL.DomainProperty target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties>(source, global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties.DomainElementDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AttributedDomainElementHasProperties link in links )
			{
				if ( target.Equals(link.DomainProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRelationshipHasRoles
	/// Description for Tum.PDE.LanguageDSL.DomainRelationshipHasRoles
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("19cffaef-872a-4edf-ae86-d012bfdd4524")]
	public partial class DomainRelationshipHasRoles : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRelationshipHasRoles domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19cffaef, 0x872a, 0x4edf, 0xae, 0x86, 0xd0, 0x12, 0xbf, 0xdd, 0x45, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRelationshipHasRoles link in the same Partition as the given DomainRelationship
		/// </summary>
		/// <param name="source">DomainRelationship to use as the source of the relationship.</param>
		/// <param name="target">DomainRole to use as the target of the relationship.</param>
		public DomainRelationshipHasRoles(DomainRelationship source, DomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRelationshipHasRoles.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(DomainRelationshipHasRoles.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipHasRoles(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipHasRoles(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipHasRoles(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipHasRoles(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x19161800, 0xbfae, 0x4ee8, 0xae, 0x8e, 0xcb, 0xc0, 0xdd, 0x63, 0x78, 0x48);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description for Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Relationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Relationship.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Relationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Roles", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("19161800-bfae-4ee8-ae8e-cbc0dd637848")]
		public virtual DomainRelationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationship of a DomainRole
		/// <summary>
		/// Gets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetRelationship(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationship(DomainRole element, DomainRelationship newRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newRelationship);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x6d597525, 0x7c55, 0x4b68, 0xa6, 0x3c, 0x01, 0x9b, 0xc8, 0x64, 0x5d, 0x9a);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Role.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Role.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Role.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Relationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipHasRoles/Role.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6d597525-7c55-4b68-a63c-019bc8645d9a")]
		public virtual DomainRole Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Roles of a DomainRelationship
		/// <summary>
		/// Gets a list of Roles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRole> GetRoles(DomainRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRole>, DomainRole>(element, RelationshipDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the list of DomainRelationshipHasRoles links to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> GetLinksToRoles ( global::Tum.PDE.LanguageDSL.DomainRelationship relationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(relationshipInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RelationshipDomainRoleId);
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the DomainRelationshipHasRoles link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles GetLinkToRelationship (global::Tum.PDE.LanguageDSL.DomainRole roleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(roleInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRelationshipHasRoles instance accessors
		
		/// <summary>
		/// Get any DomainRelationshipHasRoles links between a given DomainRelationship and a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> GetLinks( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRelationshipHasRoles link between a given DomainRelationshipand a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles GetLink( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipHasRoles link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRelationshipReferencesSource
	/// Description for Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1ff930fb-9d9e-4289-b686-a532cc839ed5")]
	public partial class DomainRelationshipReferencesSource : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRelationshipReferencesSource domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ff930fb, 0x9d9e, 0x4289, 0xb6, 0x86, 0xa5, 0x32, 0xcc, 0x83, 0x9e, 0xd5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRelationshipReferencesSource link in the same Partition as the given DomainRelationship
		/// </summary>
		/// <param name="source">DomainRelationship to use as the source of the relationship.</param>
		/// <param name="target">DomainRole to use as the target of the relationship.</param>
		public DomainRelationshipReferencesSource(DomainRelationship source, DomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRelationshipReferencesSource.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(DomainRelationshipReferencesSource.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesSource(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesSource(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesSource(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesSource(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x958d1f01, 0xc506, 0x4b4c, 0xa0, 0x23, 0x0b, 0x31, 0xc4, 0xde, 0xfc, 0x4a);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Relationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Relationship.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Relationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Source", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("958d1f01-c506-4b4c-a023-0b31c4defc4a")]
		public virtual DomainRelationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationship of a DomainRole
		/// <summary>
		/// Gets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetRelationship(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationship(DomainRole element, DomainRelationship newRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newRelationship);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0x47c3fd3c, 0x4afc, 0x4833, 0x9a, 0x25, 0xb1, 0xec, 0x97, 0x71, 0x26, 0x20);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Role.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Role.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Relationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource/Role.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("47c3fd3c-4afc-4833-9a25-b1ec97712620")]
		public virtual DomainRole Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Source of a DomainRelationship
		/// <summary>
		/// Gets Source.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRole GetSource(DomainRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as DomainRole;
		}
		
		/// <summary>
		/// Sets Source.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSource(DomainRelationship element, DomainRole newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newRole);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the DomainRelationshipReferencesSource link to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource GetLinkToSource (global::Tum.PDE.LanguageDSL.DomainRelationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource>(relationshipInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the DomainRelationshipReferencesSource link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource GetLinkToRelationship (global::Tum.PDE.LanguageDSL.DomainRole roleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource>(roleInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRelationshipReferencesSource instance accessors
		
		/// <summary>
		/// Get any DomainRelationshipReferencesSource links between a given DomainRelationship and a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> GetLinks( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRelationshipReferencesSource link between a given DomainRelationshipand a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource GetLink( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesSource link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRelationshipReferencesTarget
	/// Description for Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7775cbde-70c8-47c4-b6eb-f63cffd86718")]
	public partial class DomainRelationshipReferencesTarget : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRelationshipReferencesTarget domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7775cbde, 0x70c8, 0x47c4, 0xb6, 0xeb, 0xf6, 0x3c, 0xff, 0xd8, 0x67, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRelationshipReferencesTarget link in the same Partition as the given DomainRelationship
		/// </summary>
		/// <param name="source">DomainRelationship to use as the source of the relationship.</param>
		/// <param name="target">DomainRole to use as the target of the relationship.</param>
		public DomainRelationshipReferencesTarget(DomainRelationship source, DomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRelationshipReferencesTarget.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(DomainRelationshipReferencesTarget.RoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesTarget(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesTarget(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesTarget(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesTarget(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x642bb33b, 0x05dc, 0x4f22, 0xab, 0x85, 0xfd, 0xd8, 0x7c, 0x6d, 0x11, 0x77);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Relationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Relationship.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Relationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Target", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("642bb33b-05dc-4f22-ab85-fdd87c6d1177")]
		public virtual DomainRelationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationship of a DomainRole
		/// <summary>
		/// Gets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetRelationship(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RoleDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationship(DomainRole element, DomainRelationship newRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RoleDomainRoleId, newRelationship);
		}
		#endregion
		#region Role domain role code
		
		/// <summary>
		/// Role domain role Id.
		/// </summary>
		public static readonly global::System.Guid RoleDomainRoleId = new global::System.Guid(0xc6d4bde4, 0xdf8c, 0x4c4e, 0xb3, 0xa9, 0xd6, 0x00, 0x57, 0xe9, 0xd3, 0xf8);
		
		/// <summary>
		/// DomainRole Role
		/// Description for Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.Role
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Role.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Role.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Relationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget/Role.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c6d4bde4-df8c-4c4e-b3a9-d60057e9d3f8")]
		public virtual DomainRole Role
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, RoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Target of a DomainRelationship
		/// <summary>
		/// Gets Target.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRole GetTarget(DomainRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as DomainRole;
		}
		
		/// <summary>
		/// Sets Target.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTarget(DomainRelationship element, DomainRole newRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newRole);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the DomainRelationshipReferencesTarget link to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget GetLinkToTarget (global::Tum.PDE.LanguageDSL.DomainRelationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget>(relationshipInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Role link accessor
		/// <summary>
		/// Get the DomainRelationshipReferencesTarget link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget GetLinkToRelationship (global::Tum.PDE.LanguageDSL.DomainRole roleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget>(roleInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.RoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Role not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRelationshipReferencesTarget instance accessors
		
		/// <summary>
		/// Get any DomainRelationshipReferencesTarget links between a given DomainRelationship and a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> GetLinks( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget link in links )
			{
				if ( target.Equals(link.Role) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRelationshipReferencesTarget link between a given DomainRelationshipand a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget GetLink( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget.RelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesTarget link in links )
			{
				if ( target.Equals(link.Role) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ReferenceRSNodeReferencesReferenceRelationship
	/// Description for
	/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1b825453-62db-4322-90d4-43e91e5d7f1f")]
	public partial class ReferenceRSNodeReferencesReferenceRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceRSNodeReferencesReferenceRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b825453, 0x62db, 0x4322, 0x90, 0xd4, 0x43, 0xe9, 0x1e, 0x5d, 0x7f, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceRSNodeReferencesReferenceRelationship link in the same Partition as the given ReferenceRSNode
		/// </summary>
		/// <param name="source">ReferenceRSNode to use as the source of the relationship.</param>
		/// <param name="target">ReferenceRelationship to use as the target of the relationship.</param>
		public ReferenceRSNodeReferencesReferenceRelationship(ReferenceRSNode source, ReferenceRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceRSNodeReferencesReferenceRelationship.ReferenceRSNodeDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceRSNodeReferencesReferenceRelationship.ReferenceRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesReferenceRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesReferenceRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesReferenceRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesReferenceRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceRSNode domain role code
		
		/// <summary>
		/// ReferenceRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRSNodeDomainRoleId = new global::System.Guid(0xe39964ef, 0x2551, 0x4bcb, 0xb8, 0x1c, 0x43, 0x7a, 0x7b, 0xe1, 0x13, 0xfe);
		
		/// <summary>
		/// DomainRole ReferenceRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e39964ef-2551-4bcb-b81c-437a7be113fe")]
		public virtual ReferenceRSNode ReferenceRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRSNode of a ReferenceRelationship
		/// <summary>
		/// Gets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRSNode GetReferenceRSNode(ReferenceRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceRelationshipDomainRoleId) as ReferenceRSNode;
		}
		
		/// <summary>
		/// Sets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRSNode(ReferenceRelationship element, ReferenceRSNode newReferenceRSNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceRelationshipDomainRoleId, newReferenceRSNode);
		}
		#endregion
		#region ReferenceRelationship domain role code
		
		/// <summary>
		/// ReferenceRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRelationshipDomainRoleId = new global::System.Guid(0x248583f9, 0x3165, 0x4e5b, 0xb1, 0x66, 0x5c, 0x02, 0xd2, 0x7e, 0x24, 0x69);
		
		/// <summary>
		/// DomainRole ReferenceRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceRSNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship/ReferenceRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("248583f9-3165-4e5b-b166-5c02d27e2469")]
		public virtual ReferenceRelationship ReferenceRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRelationship of a ReferenceRSNode
		/// <summary>
		/// Gets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRelationship GetReferenceRelationship(ReferenceRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceRSNodeDomainRoleId) as ReferenceRelationship;
		}
		
		/// <summary>
		/// Sets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRelationship(ReferenceRSNode element, ReferenceRelationship newReferenceRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceRSNodeDomainRoleId, newReferenceRelationship);
		}
		#endregion
		#region ReferenceRSNode link accessor
		/// <summary>
		/// Get the ReferenceRSNodeReferencesReferenceRelationship link to a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship GetLinkToReferenceRelationship (global::Tum.PDE.LanguageDSL.ReferenceRSNode referenceRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship>(referenceRSNodeInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRelationship link accessor
		/// <summary>
		/// Get the ReferenceRSNodeReferencesReferenceRelationship link to a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship GetLinkToReferenceRSNode (global::Tum.PDE.LanguageDSL.ReferenceRelationship referenceRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship>(referenceRelationshipInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRSNodeReferencesReferenceRelationship instance accessors
		
		/// <summary>
		/// Get any ReferenceRSNodeReferencesReferenceRelationship links between a given ReferenceRSNode and a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> GetLinks( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceRSNodeReferencesReferenceRelationship link between a given ReferenceRSNodeand a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship GetLink( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasDomainTypes
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasDomainTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("73d9de27-a1f7-4f5f-be7a-8d7407425b11")]
	public partial class MetaModelHasDomainTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasDomainTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73d9de27, 0xa1f7, 0x4f5f, 0xbe, 0x7a, 0x8d, 0x74, 0x07, 0x42, 0x5b, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasDomainTypes link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">DomainType to use as the target of the relationship.</param>
		public MetaModelHasDomainTypes(MetaModel source, DomainType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasDomainTypes.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasDomainTypes.DomainTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasDomainTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasDomainTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasDomainTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasDomainTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0xfaee37a4, 0xcdca, 0x4b01, 0x88, 0x81, 0xdc, 0xe0, 0xd4, 0x35, 0x4c, 0xae);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainTypes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("faee37a4-cdca-4b01-8881-dce0d4354cae")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a DomainType
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(DomainType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainTypeDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(DomainType element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainTypeDomainRoleId, newMetaModel);
		}
		#endregion
		#region DomainType domain role code
		
		/// <summary>
		/// DomainType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainTypeDomainRoleId = new global::System.Guid(0x2d11c2a8, 0x3256, 0x474e, 0x86, 0xa8, 0xe0, 0xe7, 0x29, 0xc2, 0xaa, 0xa2);
		
		/// <summary>
		/// DomainRole DomainType
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainType
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/DomainType.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/DomainType.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasDomainTypes/DomainType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2d11c2a8-3256-474e-86a8-e0e729c2aaa2")]
		public virtual DomainType DomainType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainTypes of a MetaModel
		/// <summary>
		/// Gets a list of DomainTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainType> GetDomainTypes(MetaModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainType>, DomainType>(element, MetaModelDomainRoleId);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the list of MetaModelHasDomainTypes links to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> GetLinksToDomainTypes ( global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.MetaModelDomainRoleId);
		}
		#endregion
		#region DomainType link accessor
		/// <summary>
		/// Get the MetaModelHasDomainTypes link to a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.DomainType domainTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(domainTypeInstance, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.DomainTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasDomainTypes instance accessors
		
		/// <summary>
		/// Get any MetaModelHasDomainTypes links between a given MetaModel and a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.DomainType target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(source, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasDomainTypes link between a given MetaModeland a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.DomainType target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes>(source, global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasDomainTypes link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainEnumerationHasLiterals
	/// Description for Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8f8f4505-99ac-4081-b0a9-cc5956012fff")]
	public partial class DomainEnumerationHasLiterals : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEnumerationHasLiterals domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f8f4505, 0x99ac, 0x4081, 0xb0, 0xa9, 0xcc, 0x59, 0x56, 0x01, 0x2f, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEnumerationHasLiterals link in the same Partition as the given DomainEnumeration
		/// </summary>
		/// <param name="source">DomainEnumeration to use as the source of the relationship.</param>
		/// <param name="target">EnumerationLiteral to use as the target of the relationship.</param>
		public DomainEnumerationHasLiterals(DomainEnumeration source, EnumerationLiteral target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEnumerationHasLiterals.DomainEnumerationDomainRoleId, source), new DslModeling::RoleAssignment(DomainEnumerationHasLiterals.EnumerationLiteralDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEnumerationHasLiterals(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEnumerationHasLiterals(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEnumerationHasLiterals(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEnumerationHasLiterals(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEnumeration domain role code
		
		/// <summary>
		/// DomainEnumeration domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEnumerationDomainRoleId = new global::System.Guid(0xcadec460, 0x46d8, 0x422a, 0x8a, 0xc6, 0xfe, 0xc1, 0x3f, 0x39, 0x61, 0xb5);
		
		/// <summary>
		/// DomainRole DomainEnumeration
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainEnumeration
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/DomainEnumeration.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/DomainEnumeration.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Literals", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/DomainEnumeration.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cadec460-46d8-422a-8ac6-fec13f3961b5")]
		public virtual DomainEnumeration DomainEnumeration
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEnumeration)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEnumerationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEnumerationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEnumeration of a EnumerationLiteral
		/// <summary>
		/// Gets DomainEnumeration.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEnumeration GetDomainEnumeration(EnumerationLiteral element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnumerationLiteralDomainRoleId) as DomainEnumeration;
		}
		
		/// <summary>
		/// Sets DomainEnumeration.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEnumeration(EnumerationLiteral element, DomainEnumeration newDomainEnumeration)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnumerationLiteralDomainRoleId, newDomainEnumeration);
		}
		#endregion
		#region EnumerationLiteral domain role code
		
		/// <summary>
		/// EnumerationLiteral domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumerationLiteralDomainRoleId = new global::System.Guid(0xa9c39750, 0x864d, 0x4381, 0x95, 0x8c, 0xc9, 0x0b, 0x5c, 0xd7, 0x15, 0x1c);
		
		/// <summary>
		/// DomainRole EnumerationLiteral
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.EnumerationLiteral
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/EnumerationLiteral.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/EnumerationLiteral.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEnumeration", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals/EnumerationLiteral.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a9c39750-864d-4381-958c-c90b5cd7151c")]
		public virtual EnumerationLiteral EnumerationLiteral
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumerationLiteral)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumerationLiteralDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumerationLiteralDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Literals of a DomainEnumeration
		/// <summary>
		/// Gets a list of Literals.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EnumerationLiteral> GetLiterals(DomainEnumeration element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EnumerationLiteral>, EnumerationLiteral>(element, DomainEnumerationDomainRoleId);
		}
		#endregion
		#region DomainEnumeration link accessor
		/// <summary>
		/// Get the list of DomainEnumerationHasLiterals links to a DomainEnumeration.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> GetLinksToLiterals ( global::Tum.PDE.LanguageDSL.DomainEnumeration domainEnumerationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(domainEnumerationInstance, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainEnumerationDomainRoleId);
		}
		#endregion
		#region EnumerationLiteral link accessor
		/// <summary>
		/// Get the DomainEnumerationHasLiterals link to a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals GetLinkToDomainEnumeration (global::Tum.PDE.LanguageDSL.EnumerationLiteral enumerationLiteralInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(enumerationLiteralInstance, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.EnumerationLiteralDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnumerationLiteral not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEnumerationHasLiterals instance accessors
		
		/// <summary>
		/// Get any DomainEnumerationHasLiterals links between a given DomainEnumeration and a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> GetLinks( global::Tum.PDE.LanguageDSL.DomainEnumeration source, global::Tum.PDE.LanguageDSL.EnumerationLiteral target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(source, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainEnumerationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals link in links )
			{
				if ( target.Equals(link.EnumerationLiteral) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEnumerationHasLiterals link between a given DomainEnumerationand a EnumerationLiteral.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals GetLink( global::Tum.PDE.LanguageDSL.DomainEnumeration source, global::Tum.PDE.LanguageDSL.EnumerationLiteral target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals>(source, global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals.DomainEnumerationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainEnumerationHasLiterals link in links )
			{
				if ( target.Equals(link.EnumerationLiteral) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainPropertyReferencesType
	/// Description for Tum.PDE.LanguageDSL.DomainPropertyReferencesType
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("69532f97-690e-44d2-92ff-2041ace9e248")]
	public partial class DomainPropertyReferencesType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainPropertyReferencesType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x69532f97, 0x690e, 0x44d2, 0x92, 0xff, 0x20, 0x41, 0xac, 0xe9, 0xe2, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainPropertyReferencesType link in the same Partition as the given DomainProperty
		/// </summary>
		/// <param name="source">DomainProperty to use as the source of the relationship.</param>
		/// <param name="target">DomainType to use as the target of the relationship.</param>
		public DomainPropertyReferencesType(DomainProperty source, DomainType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainPropertyReferencesType.DomainPropertyDomainRoleId, source), new DslModeling::RoleAssignment(DomainPropertyReferencesType.DomainTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainPropertyReferencesType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainPropertyReferencesType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainPropertyReferencesType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainPropertyReferencesType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainProperty domain role code
		
		/// <summary>
		/// DomainProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainPropertyDomainRoleId = new global::System.Guid(0x5d3c3e12, 0xfc4a, 0x48b3, 0x93, 0x95, 0x1c, 0xe2, 0xde, 0xe9, 0xa4, 0x32);
		
		/// <summary>
		/// DomainRole DomainProperty
		/// Description for Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainProperty.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Type", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5d3c3e12-fc4a-48b3-9395-1ce2dee9a432")]
		public virtual DomainProperty DomainProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainProperties of a DomainType
		/// <summary>
		/// Gets a list of DomainProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainProperty> GetDomainProperties(DomainType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainProperty>, DomainProperty>(element, DomainTypeDomainRoleId);
		}
		#endregion
		#region DomainType domain role code
		
		/// <summary>
		/// DomainType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainTypeDomainRoleId = new global::System.Guid(0xd1381052, 0x42cf, 0x4fed, 0x83, 0x85, 0x5f, 0x50, 0x37, 0x6e, 0x35, 0x8a);
		
		/// <summary>
		/// DomainRole DomainType
		/// Description for Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainType
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainType.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainType.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainProperties", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainPropertyReferencesType/DomainType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d1381052-42cf-4fed-8385-5f50376e358a")]
		public virtual DomainType DomainType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Type of a DomainProperty
		/// <summary>
		/// Gets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainType GetType(DomainProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainPropertyDomainRoleId) as DomainType;
		}
		
		/// <summary>
		/// Sets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetType(DomainProperty element, DomainType newDomainType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainPropertyDomainRoleId, newDomainType);
		}
		#endregion
		#region DomainProperty link accessor
		/// <summary>
		/// Get the DomainPropertyReferencesType link to a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType GetLinkToType (global::Tum.PDE.LanguageDSL.DomainProperty domainPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(domainPropertyInstance, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainType link accessor
		/// <summary>
		/// Get the list of DomainPropertyReferencesType links to a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> GetLinksToDomainProperties ( global::Tum.PDE.LanguageDSL.DomainType domainTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(domainTypeInstance, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainTypeDomainRoleId);
		}
		#endregion
		#region DomainPropertyReferencesType instance accessors
		
		/// <summary>
		/// Get any DomainPropertyReferencesType links between a given DomainProperty and a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> GetLinks( global::Tum.PDE.LanguageDSL.DomainProperty source, global::Tum.PDE.LanguageDSL.DomainType target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(source, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainPropertyDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainPropertyReferencesType link between a given DomainPropertyand a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType GetLink( global::Tum.PDE.LanguageDSL.DomainProperty source, global::Tum.PDE.LanguageDSL.DomainType target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(source, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainPropertyDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DiagramClassViewReferencesDiagramClass
	/// Description for Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dfb8dc1a-715d-4bbb-bb11-76fe3badf8ac")]
	public partial class DiagramClassViewReferencesDiagramClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramClassViewReferencesDiagramClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdfb8dc1a, 0x715d, 0x4bbb, 0xbb, 0x11, 0x76, 0xfe, 0x3b, 0xad, 0xf8, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramClassViewReferencesDiagramClass link in the same Partition as the given DiagramClassView
		/// </summary>
		/// <param name="source">DiagramClassView to use as the source of the relationship.</param>
		/// <param name="target">DiagramClass to use as the target of the relationship.</param>
		public DiagramClassViewReferencesDiagramClass(DiagramClassView source, DiagramClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramClassViewReferencesDiagramClass.DiagramClassViewDomainRoleId, source), new DslModeling::RoleAssignment(DiagramClassViewReferencesDiagramClass.DiagramClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassViewReferencesDiagramClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassViewReferencesDiagramClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassViewReferencesDiagramClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassViewReferencesDiagramClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramClassView domain role code
		
		/// <summary>
		/// DiagramClassView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassViewDomainRoleId = new global::System.Guid(0x8c8a1c7d, 0x9378, 0x42cd, 0xa3, 0x23, 0xe2, 0x9a, 0xaa, 0x50, 0xa1, 0x9e);
		
		/// <summary>
		/// DomainRole DiagramClassView
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClassView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClassView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClassView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DiagramClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClassView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8c8a1c7d-9378-42cd-a323-e29aaa50a19e")]
		public virtual DiagramClassView DiagramClassView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClassView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClassView of a DiagramClass
		/// <summary>
		/// Gets DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramClassView GetDiagramClassView(DiagramClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramClassDomainRoleId) as DiagramClassView;
		}
		
		/// <summary>
		/// Sets DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramClassView(DiagramClass element, DiagramClassView newDiagramClassView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramClassDomainRoleId, newDiagramClassView);
		}
		#endregion
		#region DiagramClass domain role code
		
		/// <summary>
		/// DiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassDomainRoleId = new global::System.Guid(0x481b30b3, 0x83ac, 0x4298, 0xbf, 0xe5, 0x66, 0x37, 0xac, 0x62, 0xd1, 0x74);
		
		/// <summary>
		/// DomainRole DiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramClassView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass/DiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("481b30b3-83ac-4298-bfe5-6637ac62d174")]
		public virtual DiagramClass DiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClass of a DiagramClassView
		/// <summary>
		/// Gets DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramClass GetDiagramClass(DiagramClassView element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramClassViewDomainRoleId) as DiagramClass;
		}
		
		/// <summary>
		/// Sets DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramClass(DiagramClassView element, DiagramClass newDiagramClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramClassViewDomainRoleId, newDiagramClass);
		}
		#endregion
		#region DiagramClassView link accessor
		/// <summary>
		/// Get the DiagramClassViewReferencesDiagramClass link to a DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass GetLinkToDiagramClass (global::Tum.PDE.LanguageDSL.DiagramClassView diagramClassViewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass>(diagramClassViewInstance, global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClassViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramClassView not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramClass link accessor
		/// <summary>
		/// Get the DiagramClassViewReferencesDiagramClass link to a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass GetLinkToDiagramClassView (global::Tum.PDE.LanguageDSL.DiagramClass diagramClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass>(diagramClassInstance, global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramClassViewReferencesDiagramClass instance accessors
		
		/// <summary>
		/// Get any DiagramClassViewReferencesDiagramClass links between a given DiagramClassView and a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> GetLinks( global::Tum.PDE.LanguageDSL.DiagramClassView source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass>(source, global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClassViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramClassViewReferencesDiagramClass link between a given DiagramClassViewand a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass GetLink( global::Tum.PDE.LanguageDSL.DiagramClassView source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass>(source, global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass.DiagramClassViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassViewReferencesDiagramClass link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DiagramClassHasPresentationElements
	/// Description for Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f69b2f23-dbc5-4924-ae59-c9b2b71f0584")]
	public partial class DiagramClassHasPresentationElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramClassHasPresentationElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf69b2f23, 0xdbc5, 0x4924, 0xae, 0x59, 0xc9, 0xb2, 0xb7, 0x1f, 0x05, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramClassHasPresentationElements link in the same Partition as the given DiagramClass
		/// </summary>
		/// <param name="source">DiagramClass to use as the source of the relationship.</param>
		/// <param name="target">PresentationElementClass to use as the target of the relationship.</param>
		public DiagramClassHasPresentationElements(DiagramClass source, PresentationElementClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramClassHasPresentationElements.DiagramClassDomainRoleId, source), new DslModeling::RoleAssignment(DiagramClassHasPresentationElements.PresentationElementClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassHasPresentationElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassHasPresentationElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassHasPresentationElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassHasPresentationElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramClass domain role code
		
		/// <summary>
		/// DiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassDomainRoleId = new global::System.Guid(0x7400568b, 0x9f1d, 0x488e, 0x89, 0xc5, 0x57, 0x77, 0x53, 0x00, 0x56, 0x33);
		
		/// <summary>
		/// DomainRole DiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/DiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/DiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PresentationElements", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/DiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7400568b-9f1d-488e-89c5-577753005633")]
		public virtual DiagramClass DiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClass of a PresentationElementClass
		/// <summary>
		/// Gets DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramClass GetDiagramClass(PresentationElementClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PresentationElementClassDomainRoleId) as DiagramClass;
		}
		
		/// <summary>
		/// Sets DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramClass(PresentationElementClass element, DiagramClass newDiagramClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PresentationElementClassDomainRoleId, newDiagramClass);
		}
		#endregion
		#region PresentationElementClass domain role code
		
		/// <summary>
		/// PresentationElementClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid PresentationElementClassDomainRoleId = new global::System.Guid(0x4c55de6d, 0xac35, 0x413f, 0x90, 0x24, 0xf1, 0xdb, 0xf9, 0xbf, 0x7b, 0xd1);
		
		/// <summary>
		/// DomainRole PresentationElementClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.PresentationElementClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/PresentationElementClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/PresentationElementClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements/PresentationElementClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c55de6d-ac35-413f-9024-f1dbf9bf7bd1")]
		public virtual PresentationElementClass PresentationElementClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PresentationElementClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, PresentationElementClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PresentationElementClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PresentationElements of a DiagramClass
		/// <summary>
		/// Gets a list of PresentationElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PresentationElementClass> GetPresentationElements(DiagramClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PresentationElementClass>, PresentationElementClass>(element, DiagramClassDomainRoleId);
		}
		#endregion
		#region DiagramClass link accessor
		/// <summary>
		/// Get the list of DiagramClassHasPresentationElements links to a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> GetLinksToPresentationElements ( global::Tum.PDE.LanguageDSL.DiagramClass diagramClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(diagramClassInstance, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DiagramClassDomainRoleId);
		}
		#endregion
		#region PresentationElementClass link accessor
		/// <summary>
		/// Get the DiagramClassHasPresentationElements link to a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements GetLinkToDiagramClass (global::Tum.PDE.LanguageDSL.PresentationElementClass presentationElementClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(presentationElementClassInstance, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.PresentationElementClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PresentationElementClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramClassHasPresentationElements instance accessors
		
		/// <summary>
		/// Get any DiagramClassHasPresentationElements links between a given DiagramClass and a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> GetLinks( global::Tum.PDE.LanguageDSL.DiagramClass source, global::Tum.PDE.LanguageDSL.PresentationElementClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(source, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements link in links )
			{
				if ( target.Equals(link.PresentationElementClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramClassHasPresentationElements link between a given DiagramClassand a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements GetLink( global::Tum.PDE.LanguageDSL.DiagramClass source, global::Tum.PDE.LanguageDSL.PresentationElementClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements>(source, global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements.DiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassHasPresentationElements link in links )
			{
				if ( target.Equals(link.PresentationElementClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainClassReferencesBaseClass
	/// Description for Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("047e58ed-a0bb-40fe-96a3-a72a154b4f5e")]
	public partial class DomainClassReferencesBaseClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainClassReferencesBaseClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x047e58ed, 0xa0bb, 0x40fe, 0x96, 0xa3, 0xa7, 0x2a, 0x15, 0x4b, 0x4f, 0x5e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainClassReferencesBaseClass link in the same Partition as the given DomainClass
		/// </summary>
		/// <param name="source">DomainClass to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public DomainClassReferencesBaseClass(DomainClass source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainClassReferencesBaseClass.DerivedClassDomainRoleId, source), new DslModeling::RoleAssignment(DomainClassReferencesBaseClass.BaseClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainClassReferencesBaseClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainClassReferencesBaseClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainClassReferencesBaseClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainClassReferencesBaseClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivedClass domain role code
		
		/// <summary>
		/// DerivedClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivedClassDomainRoleId = new global::System.Guid(0x65f85012, 0xb6ff, 0x4caf, 0xae, 0x79, 0x95, 0xb3, 0x2d, 0x07, 0xaa, 0x97);
		
		/// <summary>
		/// DomainRole DerivedClass
		/// Description for Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DerivedClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/DerivedClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/DerivedClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/DerivedClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BaseClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/DerivedClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("65f85012-b6ff-4caf-ae79-95b32d07aa97")]
		public virtual DomainClass DerivedClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivedClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivedClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedClasses of a DomainClass
		/// <summary>
		/// Gets a list of DerivedClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainClass> GetDerivedClasses(DomainClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainClass>, DomainClass>(element, BaseClassDomainRoleId);
		}
		#endregion
		#region BaseClass domain role code
		
		/// <summary>
		/// BaseClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseClassDomainRoleId = new global::System.Guid(0x2b13c053, 0x6711, 0x441c, 0x8d, 0x99, 0x8e, 0xd4, 0xfe, 0xd1, 0x9e, 0xd5);
		
		/// <summary>
		/// DomainRole BaseClass
		/// Description for Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.BaseClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/BaseClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/BaseClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/BaseClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2b13c053-6711-441c-8d99-8ed4fed19ed5")]
		public virtual DomainClass BaseClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseClass of a DomainClass
		/// <summary>
		/// Gets BaseClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainClass GetBaseClass(DomainClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivedClassDomainRoleId) as DomainClass;
		}
		
		/// <summary>
		/// Sets BaseClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseClass(DomainClass element, DomainClass newBaseClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivedClassDomainRoleId, newBaseClass);
		}
		#endregion
		#region InhNodeId domain property code
		
		/// <summary>
		/// InhNodeId domain property Id.
		/// </summary>
		public static readonly global::System.Guid InhNodeIdDomainPropertyId = new global::System.Guid(0x38e68277, 0xc397, 0x4e3e, 0xaf, 0xba, 0x51, 0x25, 0x00, 0x75, 0xb8, 0xf6);
		
		/// <summary>
		/// Storage for InhNodeId
		/// </summary>
		private global::System.Guid inhNodeIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of InhNodeId domain property.
		/// Workaround, as we can not reference relationships..
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/InhNodeId.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass/InhNodeId.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("38e68277-c397-4e3e-afba-51250075b8f6")]
		public global::System.Guid InhNodeId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inhNodeIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InhNodeIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainClassReferencesBaseClass.InhNodeId domain property.
		/// </summary>
		internal sealed partial class InhNodeIdPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainClassReferencesBaseClass, global::System.Guid>
		{
			private InhNodeIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainClassReferencesBaseClass.InhNodeId domain property value handler.
			/// </summary>
			public static readonly InhNodeIdPropertyHandler Instance = new InhNodeIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainClassReferencesBaseClass.InhNodeId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InhNodeIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(DomainClassReferencesBaseClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inhNodeIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainClassReferencesBaseClass element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inhNodeIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivedClass link accessor
		/// <summary>
		/// Get the DomainClassReferencesBaseClass link to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass GetLinkToBaseClass (global::Tum.PDE.LanguageDSL.DomainClass derivedClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass>(derivedClassInstance, global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DerivedClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivedClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BaseClass link accessor
		/// <summary>
		/// Get the list of DomainClassReferencesBaseClass links to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> GetLinksToDerivedClasses ( global::Tum.PDE.LanguageDSL.DomainClass baseClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass>(baseClassInstance, global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.BaseClassDomainRoleId);
		}
		#endregion
		#region DomainClassReferencesBaseClass instance accessors
		
		/// <summary>
		/// Get any DomainClassReferencesBaseClass links between a given DomainClass and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> GetLinks( global::Tum.PDE.LanguageDSL.DomainClass source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass>(source, global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DerivedClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass link in links )
			{
				if ( target.Equals(link.BaseClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainClassReferencesBaseClass link between a given DomainClassand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass GetLink( global::Tum.PDE.LanguageDSL.DomainClass source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass>(source, global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass.DerivedClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainClassReferencesBaseClass link in links )
			{
				if ( target.Equals(link.BaseClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRelationshipReferencesBaseRelationship
	/// Description for Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("292b4721-40ee-4f45-9968-12c133338615")]
	public partial class DomainRelationshipReferencesBaseRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRelationshipReferencesBaseRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x292b4721, 0x40ee, 0x4f45, 0x99, 0x68, 0x12, 0xc1, 0x33, 0x33, 0x86, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRelationshipReferencesBaseRelationship link in the same Partition as the given DomainRelationship
		/// </summary>
		/// <param name="source">DomainRelationship to use as the source of the relationship.</param>
		/// <param name="target">DomainRelationship to use as the target of the relationship.</param>
		public DomainRelationshipReferencesBaseRelationship(DomainRelationship source, DomainRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRelationshipReferencesBaseRelationship.DerivedRelationshipDomainRoleId, source), new DslModeling::RoleAssignment(DomainRelationshipReferencesBaseRelationship.BaseRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesBaseRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesBaseRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRelationshipReferencesBaseRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRelationshipReferencesBaseRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivedRelationship domain role code
		
		/// <summary>
		/// DerivedRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivedRelationshipDomainRoleId = new global::System.Guid(0x2a8528b9, 0x068b, 0x4c3b, 0x9e, 0x25, 0x9e, 0x0b, 0x83, 0x2c, 0xca, 0xf1);
		
		/// <summary>
		/// DomainRole DerivedRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DerivedRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/DerivedRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/DerivedRelationship.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/DerivedRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BaseRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/DerivedRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2a8528b9-068b-4c3b-9e25-9e0b832ccaf1")]
		public virtual DomainRelationship DerivedRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivedRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivedRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedRelationships of a DomainRelationship
		/// <summary>
		/// Gets a list of DerivedRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRelationship> GetDerivedRelationships(DomainRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRelationship>, DomainRelationship>(element, BaseRelationshipDomainRoleId);
		}
		#endregion
		#region BaseRelationship domain role code
		
		/// <summary>
		/// BaseRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseRelationshipDomainRoleId = new global::System.Guid(0xb78f591d, 0xb74b, 0x49e3, 0x94, 0x48, 0x0d, 0x99, 0x48, 0x03, 0xc3, 0xa8);
		
		/// <summary>
		/// DomainRole BaseRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.BaseRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/BaseRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/BaseRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedRelationships", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship/BaseRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b78f591d-b74b-49e3-9448-0d994803c3a8")]
		public virtual DomainRelationship BaseRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseRelationship of a DomainRelationship
		/// <summary>
		/// Gets BaseRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetBaseRelationship(DomainRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivedRelationshipDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets BaseRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseRelationship(DomainRelationship element, DomainRelationship newBaseRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivedRelationshipDomainRoleId, newBaseRelationship);
		}
		#endregion
		#region DerivedRelationship link accessor
		/// <summary>
		/// Get the DomainRelationshipReferencesBaseRelationship link to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship GetLinkToBaseRelationship (global::Tum.PDE.LanguageDSL.DomainRelationship derivedRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship>(derivedRelationshipInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DerivedRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivedRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BaseRelationship link accessor
		/// <summary>
		/// Get the list of DomainRelationshipReferencesBaseRelationship links to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> GetLinksToDerivedRelationships ( global::Tum.PDE.LanguageDSL.DomainRelationship baseRelationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship>(baseRelationshipInstance, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.BaseRelationshipDomainRoleId);
		}
		#endregion
		#region DomainRelationshipReferencesBaseRelationship instance accessors
		
		/// <summary>
		/// Get any DomainRelationshipReferencesBaseRelationship links between a given DomainRelationship and a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> GetLinks( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DerivedRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship link in links )
			{
				if ( target.Equals(link.BaseRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRelationshipReferencesBaseRelationship link between a given DomainRelationshipand a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship GetLink( global::Tum.PDE.LanguageDSL.DomainRelationship source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship>(source, global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship.DerivedRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRelationshipReferencesBaseRelationship link in links )
			{
				if ( target.Equals(link.BaseRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRoleReferencesOpposite
	/// Description for Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("aa98ed1b-9ca3-41e1-a7b9-d997c8b979a8")]
	public partial class DomainRoleReferencesOpposite : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRoleReferencesOpposite domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa98ed1b, 0x9ca3, 0x41e1, 0xa7, 0xb9, 0xd9, 0x97, 0xc8, 0xb9, 0x79, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRoleReferencesOpposite link in the same Partition as the given DomainRole
		/// </summary>
		/// <param name="source">DomainRole to use as the source of the relationship.</param>
		/// <param name="target">DomainRole to use as the target of the relationship.</param>
		public DomainRoleReferencesOpposite(DomainRole source, DomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRoleReferencesOpposite.SourceDomainRoleDomainRoleId, source), new DslModeling::RoleAssignment(DomainRoleReferencesOpposite.TargetDomainRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesOpposite(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesOpposite(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesOpposite(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesOpposite(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceDomainRole domain role code
		
		/// <summary>
		/// SourceDomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleDomainRoleId = new global::System.Guid(0x8dbb213b, 0x475b, 0x47c0, 0xba, 0x7d, 0x17, 0xa0, 0xf7, 0x63, 0xcf, 0x3c);
		
		/// <summary>
		/// DomainRole SourceDomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.SourceDomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/SourceDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/SourceDomainRole.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/SourceDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Opposite", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/SourceDomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8dbb213b-475b-47c0-ba7d-17a0f763cf3c")]
		public virtual DomainRole SourceDomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceDomainRoles of a DomainRole
		/// <summary>
		/// Gets a list of SourceDomainRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRole> GetSourceDomainRoles(DomainRole element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRole>, DomainRole>(element, TargetDomainRoleDomainRoleId);
		}
		#endregion
		#region TargetDomainRole domain role code
		
		/// <summary>
		/// TargetDomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleDomainRoleId = new global::System.Guid(0x5cc8da5f, 0x2738, 0x4000, 0xa1, 0x6a, 0x9c, 0xa0, 0xe7, 0xef, 0xf5, 0x9d);
		
		/// <summary>
		/// DomainRole TargetDomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.TargetDomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/TargetDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/TargetDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceDomainRoles", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite/TargetDomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5cc8da5f-2738-4000-a16a-9ca0e7eff59d")]
		public virtual DomainRole TargetDomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Opposite of a DomainRole
		/// <summary>
		/// Gets Opposite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRole GetOpposite(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleDomainRoleId) as DomainRole;
		}
		
		/// <summary>
		/// Sets Opposite.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOpposite(DomainRole element, DomainRole newTargetDomainRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleDomainRoleId, newTargetDomainRole);
		}
		#endregion
		#region SourceDomainRole link accessor
		/// <summary>
		/// Get the DomainRoleReferencesOpposite link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite GetLinkToOpposite (global::Tum.PDE.LanguageDSL.DomainRole sourceDomainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite>(sourceDomainRoleInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.SourceDomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceDomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetDomainRole link accessor
		/// <summary>
		/// Get the list of DomainRoleReferencesOpposite links to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> GetLinksToSourceDomainRoles ( global::Tum.PDE.LanguageDSL.DomainRole targetDomainRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite>(targetDomainRoleInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.TargetDomainRoleDomainRoleId);
		}
		#endregion
		#region DomainRoleReferencesOpposite instance accessors
		
		/// <summary>
		/// Get any DomainRoleReferencesOpposite links between a given DomainRole and a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> GetLinks( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.SourceDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite link in links )
			{
				if ( target.Equals(link.TargetDomainRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRoleReferencesOpposite link between a given DomainRoleand a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite GetLink( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite.SourceDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesOpposite link in links )
			{
				if ( target.Equals(link.TargetDomainRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship EmbeddingRSNodeReferencesRelationship
	/// Description for Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d10d7dc-3e5e-4d94-9215-26fd9a3b1801")]
	public partial class EmbeddingRSNodeReferencesRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EmbeddingRSNodeReferencesRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d10d7dc, 0x3e5e, 0x4d94, 0x92, 0x15, 0x26, 0xfd, 0x9a, 0x3b, 0x18, 0x01);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EmbeddingRSNodeReferencesRelationship link in the same Partition as the given EmbeddingRSNode
		/// </summary>
		/// <param name="source">EmbeddingRSNode to use as the source of the relationship.</param>
		/// <param name="target">DomainRelationship to use as the target of the relationship.</param>
		public EmbeddingRSNodeReferencesRelationship(EmbeddingRSNode source, DomainRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EmbeddingRSNodeReferencesRelationship.EmbeddingRSNodeDomainRoleId, source), new DslModeling::RoleAssignment(EmbeddingRSNodeReferencesRelationship.DomainRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingRSNodeReferencesRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingRSNodeReferencesRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingRSNodeReferencesRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingRSNodeReferencesRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EmbeddingRSNode domain role code
		
		/// <summary>
		/// EmbeddingRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmbeddingRSNodeDomainRoleId = new global::System.Guid(0x93a7c7be, 0x0202, 0x4aec, 0xa5, 0x69, 0xc7, 0x1d, 0xaf, 0xea, 0x13, 0x4d);
		
		/// <summary>
		/// DomainRole EmbeddingRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.EmbeddingRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/EmbeddingRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/EmbeddingRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Relationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/EmbeddingRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("93a7c7be-0202-4aec-a569-c71dafea134d")]
		public virtual EmbeddingRSNode EmbeddingRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmbeddingRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmbeddingRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingRSNode of a DomainRelationship
		/// <summary>
		/// Gets EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EmbeddingRSNode GetEmbeddingRSNode(DomainRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainRelationshipDomainRoleId) as EmbeddingRSNode;
		}
		
		/// <summary>
		/// Sets EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmbeddingRSNode(DomainRelationship element, EmbeddingRSNode newEmbeddingRSNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainRelationshipDomainRoleId, newEmbeddingRSNode);
		}
		#endregion
		#region DomainRelationship domain role code
		
		/// <summary>
		/// DomainRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRelationshipDomainRoleId = new global::System.Guid(0x1d42630f, 0xbeae, 0x407a, 0x8e, 0x00, 0x64, 0x52, 0x41, 0x51, 0xf8, 0x4a);
		
		/// <summary>
		/// DomainRole DomainRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/DomainRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/DomainRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EmbeddingRSNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship/DomainRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1d42630f-beae-407a-8e00-64524151f84a")]
		public virtual DomainRelationship DomainRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationship of a EmbeddingRSNode
		/// <summary>
		/// Gets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetRelationship(EmbeddingRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmbeddingRSNodeDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationship(EmbeddingRSNode element, DomainRelationship newDomainRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmbeddingRSNodeDomainRoleId, newDomainRelationship);
		}
		#endregion
		#region EmbeddingRSNode link accessor
		/// <summary>
		/// Get the EmbeddingRSNodeReferencesRelationship link to a EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship GetLinkToRelationship (global::Tum.PDE.LanguageDSL.EmbeddingRSNode embeddingRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship>(embeddingRSNodeInstance, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.EmbeddingRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmbeddingRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRelationship link accessor
		/// <summary>
		/// Get the EmbeddingRSNodeReferencesRelationship link to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship GetLinkToEmbeddingRSNode (global::Tum.PDE.LanguageDSL.DomainRelationship domainRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship>(domainRelationshipInstance, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.DomainRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EmbeddingRSNodeReferencesRelationship instance accessors
		
		/// <summary>
		/// Get any EmbeddingRSNodeReferencesRelationship links between a given EmbeddingRSNode and a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> GetLinks( global::Tum.PDE.LanguageDSL.EmbeddingRSNode source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship>(source, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.EmbeddingRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EmbeddingRSNodeReferencesRelationship link between a given EmbeddingRSNodeand a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship GetLink( global::Tum.PDE.LanguageDSL.EmbeddingRSNode source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship>(source, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship.EmbeddingRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesRelationship link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRoleReferencesRolePlayer
	/// Description for Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fea32e61-72fd-4a61-96c2-c3fa3b836729")]
	public partial class DomainRoleReferencesRolePlayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRoleReferencesRolePlayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfea32e61, 0x72fd, 0x4a61, 0x96, 0xc2, 0xc3, 0xfa, 0x3b, 0x83, 0x67, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRoleReferencesRolePlayer link in the same Partition as the given DomainRole
		/// </summary>
		/// <param name="source">DomainRole to use as the source of the relationship.</param>
		/// <param name="target">AttributedDomainElement to use as the target of the relationship.</param>
		public DomainRoleReferencesRolePlayer(DomainRole source, AttributedDomainElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId, source), new DslModeling::RoleAssignment(DomainRoleReferencesRolePlayer.AttributedDomainElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesRolePlayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesRolePlayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesRolePlayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesRolePlayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainRole domain role code
		
		/// <summary>
		/// DomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRoleDomainRoleId = new global::System.Guid(0x394cfccc, 0x057a, 0x4e47, 0xa0, 0xb6, 0xd5, 0x21, 0x34, 0xba, 0x15, 0x91);
		
		/// <summary>
		/// DomainRole DomainRole
		/// Description for Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/DomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/DomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RolePlayer", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/DomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("394cfccc-057a-4e47-a0b6-d52134ba1591")]
		public virtual DomainRole DomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolesPlayed of a AttributedDomainElement
		/// <summary>
		/// Gets a list of RolesPlayed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRole> GetRolesPlayed(AttributedDomainElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRole>, DomainRole>(element, AttributedDomainElementDomainRoleId);
		}
		#endregion
		#region AttributedDomainElement domain role code
		
		/// <summary>
		/// AttributedDomainElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributedDomainElementDomainRoleId = new global::System.Guid(0xf5320f6e, 0xf0fa, 0x4a32, 0xb9, 0x26, 0xf5, 0x94, 0x5b, 0x33, 0x8c, 0x69);
		
		/// <summary>
		/// DomainRole AttributedDomainElement
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.AttributedDomainElement
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/AttributedDomainElement.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/AttributedDomainElement.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RolesPlayed", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer/AttributedDomainElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f5320f6e-f0fa-4a32-b926-f5945b338c69")]
		public virtual AttributedDomainElement AttributedDomainElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributedDomainElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributedDomainElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributedDomainElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RolePlayer of a DomainRole
		/// <summary>
		/// Gets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributedDomainElement GetRolePlayer(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainRoleDomainRoleId) as AttributedDomainElement;
		}
		
		/// <summary>
		/// Sets RolePlayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRolePlayer(DomainRole element, AttributedDomainElement newAttributedDomainElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainRoleDomainRoleId, newAttributedDomainElement);
		}
		#endregion
		#region DomainRole link accessor
		/// <summary>
		/// Get the DomainRoleReferencesRolePlayer link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer GetLinkToRolePlayer (global::Tum.PDE.LanguageDSL.DomainRole domainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(domainRoleInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributedDomainElement link accessor
		/// <summary>
		/// Get the list of DomainRoleReferencesRolePlayer links to a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> GetLinksToRolesPlayed ( global::Tum.PDE.LanguageDSL.AttributedDomainElement attributedDomainElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(attributedDomainElementInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.AttributedDomainElementDomainRoleId);
		}
		#endregion
		#region DomainRoleReferencesRolePlayer instance accessors
		
		/// <summary>
		/// Get any DomainRoleReferencesRolePlayer links between a given DomainRole and a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> GetLinks( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.AttributedDomainElement target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer link in links )
			{
				if ( target.Equals(link.AttributedDomainElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRoleReferencesRolePlayer link between a given DomainRoleand a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer GetLink( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.AttributedDomainElement target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer link in links )
			{
				if ( target.Equals(link.AttributedDomainElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship TreeNodeReferencesDomainElement
	/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8364bf94-b298-4a56-a930-99a3dd40bd59")]
	public partial class TreeNodeReferencesDomainElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TreeNodeReferencesDomainElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8364bf94, 0xb298, 0x4a56, 0xa9, 0x30, 0x99, 0xa3, 0xdd, 0x40, 0xbd, 0x59);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TreeNodeReferencesDomainElement link in the same Partition as the given TreeNode
		/// </summary>
		/// <param name="source">TreeNode to use as the source of the relationship.</param>
		/// <param name="target">AttributedDomainElement to use as the target of the relationship.</param>
		public TreeNodeReferencesDomainElement(TreeNode source, AttributedDomainElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TreeNodeReferencesDomainElement.TreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(TreeNodeReferencesDomainElement.AttributedDomainElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesDomainElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesDomainElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesDomainElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesDomainElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TreeNode domain role code
		
		/// <summary>
		/// TreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TreeNodeDomainRoleId = new global::System.Guid(0x90968612, 0xeee3, 0x4792, 0xac, 0x4e, 0x97, 0xcb, 0x27, 0x26, 0xd6, 0x19);
		
		/// <summary>
		/// DomainRole TreeNode
		/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.TreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/TreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/TreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainElement", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/TreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90968612-eee3-4792-ac4e-97cb2726d619")]
		public virtual TreeNode TreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainModelTreeNodes of a AttributedDomainElement
		/// <summary>
		/// Gets a list of DomainModelTreeNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TreeNode> GetDomainModelTreeNodes(AttributedDomainElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TreeNode>, TreeNode>(element, AttributedDomainElementDomainRoleId);
		}
		#endregion
		#region AttributedDomainElement domain role code
		
		/// <summary>
		/// AttributedDomainElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributedDomainElementDomainRoleId = new global::System.Guid(0x35bf32c7, 0x572b, 0x4753, 0xb7, 0x66, 0x75, 0xee, 0xbe, 0x4c, 0x9f, 0x59);
		
		/// <summary>
		/// DomainRole AttributedDomainElement
		/// Description for
		/// Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.AttributedDomainElement
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/AttributedDomainElement.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/AttributedDomainElement.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainModelTreeNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement/AttributedDomainElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("35bf32c7-572b-4753-b766-75eebe4c9f59")]
		public virtual AttributedDomainElement AttributedDomainElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributedDomainElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributedDomainElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributedDomainElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainElement of a TreeNode
		/// <summary>
		/// Gets DomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributedDomainElement GetDomainElement(TreeNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TreeNodeDomainRoleId) as AttributedDomainElement;
		}
		
		/// <summary>
		/// Sets DomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainElement(TreeNode element, AttributedDomainElement newAttributedDomainElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TreeNodeDomainRoleId, newAttributedDomainElement);
		}
		#endregion
		#region TreeNode link accessor
		/// <summary>
		/// Get the TreeNodeReferencesDomainElement link to a TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement GetLinkToDomainElement (global::Tum.PDE.LanguageDSL.TreeNode treeNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement>(treeNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.TreeNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TreeNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributedDomainElement link accessor
		/// <summary>
		/// Get the list of TreeNodeReferencesDomainElement links to a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> GetLinksToDomainModelTreeNodes ( global::Tum.PDE.LanguageDSL.AttributedDomainElement attributedDomainElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement>(attributedDomainElementInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.AttributedDomainElementDomainRoleId);
		}
		#endregion
		#region TreeNodeReferencesDomainElement instance accessors
		
		/// <summary>
		/// Get any TreeNodeReferencesDomainElement links between a given TreeNode and a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> GetLinks( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.AttributedDomainElement target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement link in links )
			{
				if ( target.Equals(link.AttributedDomainElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TreeNodeReferencesDomainElement link between a given TreeNodeand a AttributedDomainElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement GetLink( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.AttributedDomainElement target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesDomainElement link in links )
			{
				if ( target.Equals(link.AttributedDomainElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ShapeClassReferencesChildren
	/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9a7cd033-ff1c-46e6-81f6-7a5a0189624e")]
	public partial class ShapeClassReferencesChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeClassReferencesChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a7cd033, 0xff1c, 0x46e6, 0x81, 0xf6, 0x7a, 0x5a, 0x01, 0x89, 0x62, 0x4e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeClassReferencesChildren link in the same Partition as the given ShapeClass
		/// </summary>
		/// <param name="source">ShapeClass to use as the source of the relationship.</param>
		/// <param name="target">ShapeClass to use as the target of the relationship.</param>
		public ShapeClassReferencesChildren(ShapeClass source, ShapeClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeClassReferencesChildren.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ShapeClassReferencesChildren.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x93028c32, 0x890c, 0x443a, 0xa8, 0xa3, 0x92, 0xc8, 0x97, 0x18, 0x3b, 0x0f);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Parent.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Parent.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("93028c32-890c-443a-a8a3-92c897183b0f")]
		public virtual ShapeClass Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a ShapeClass
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShapeClass GetParent(ShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildDomainRoleId) as ShapeClass;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(ShapeClass element, ShapeClass newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildDomainRoleId, newParent);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x3fbf1f11, 0x3be9, 0x4036, 0xa7, 0xd1, 0x85, 0x34, 0x40, 0x90, 0xe7, 0xf1);
		
		/// <summary>
		/// DomainRole Child
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.Child
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Child.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Child.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesChildren/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3fbf1f11-3be9-4036-a7d1-85344090e7f1")]
		public virtual ShapeClass Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a ShapeClass
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShapeClass> GetChildren(ShapeClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShapeClass>, ShapeClass>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ShapeClassReferencesChildren links to a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> GetLinksToChildren ( global::Tum.PDE.LanguageDSL.ShapeClass parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren>(parentInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the ShapeClassReferencesChildren link to a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren GetLinkToParent (global::Tum.PDE.LanguageDSL.ShapeClass childInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren>(childInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.ChildDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Child not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShapeClassReferencesChildren instance accessors
		
		/// <summary>
		/// Get any ShapeClassReferencesChildren links between a given ShapeClass and a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> GetLinks( global::Tum.PDE.LanguageDSL.ShapeClass source, global::Tum.PDE.LanguageDSL.ShapeClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.ParentDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeClassReferencesChildren link between a given ShapeClassand a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren GetLink( global::Tum.PDE.LanguageDSL.ShapeClass source, global::Tum.PDE.LanguageDSL.ShapeClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren.ParentDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesChildren link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DiagramClassViewHasRootDiagramNodes
	/// Description for Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3d6d27b8-ca30-4b49-8ff3-9dafedec4dd9")]
	public partial class DiagramClassViewHasRootDiagramNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramClassViewHasRootDiagramNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d6d27b8, 0xca30, 0x4b49, 0x8f, 0xf3, 0x9d, 0xaf, 0xed, 0xec, 0x4d, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramClassViewHasRootDiagramNodes link in the same Partition as the given DiagramClassView
		/// </summary>
		/// <param name="source">DiagramClassView to use as the source of the relationship.</param>
		/// <param name="target">RootDiagramNode to use as the target of the relationship.</param>
		public DiagramClassViewHasRootDiagramNodes(DiagramClassView source, RootDiagramNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramClassViewHasRootDiagramNodes.DiagramClassViewDomainRoleId, source), new DslModeling::RoleAssignment(DiagramClassViewHasRootDiagramNodes.RootDiagramNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassViewHasRootDiagramNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassViewHasRootDiagramNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramClassViewHasRootDiagramNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramClassViewHasRootDiagramNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramClassView domain role code
		
		/// <summary>
		/// DiagramClassView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassViewDomainRoleId = new global::System.Guid(0x05c95da8, 0xd38b, 0x4ef6, 0x98, 0x9c, 0x79, 0xe5, 0x34, 0xbb, 0xe9, 0xfe);
		
		/// <summary>
		/// DomainRole DiagramClassView
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DiagramClassView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/DiagramClassView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/DiagramClassView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RootDiagramNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/DiagramClassView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05c95da8-d38b-4ef6-989c-79e534bbe9fe")]
		public virtual DiagramClassView DiagramClassView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClassView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClassView of a RootDiagramNode
		/// <summary>
		/// Gets DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramClassView GetDiagramClassView(RootDiagramNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RootDiagramNodeDomainRoleId) as DiagramClassView;
		}
		
		/// <summary>
		/// Sets DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramClassView(RootDiagramNode element, DiagramClassView newDiagramClassView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RootDiagramNodeDomainRoleId, newDiagramClassView);
		}
		#endregion
		#region RootDiagramNode domain role code
		
		/// <summary>
		/// RootDiagramNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid RootDiagramNodeDomainRoleId = new global::System.Guid(0x79290138, 0x0397, 0x402f, 0x9b, 0x61, 0xf6, 0x9e, 0x0f, 0x67, 0xa3, 0x32);
		
		/// <summary>
		/// DomainRole RootDiagramNode
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.RootDiagramNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/RootDiagramNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/RootDiagramNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramClassView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes/RootDiagramNode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("79290138-0397-402f-9b61-f69e0f67a332")]
		public virtual RootDiagramNode RootDiagramNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RootDiagramNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, RootDiagramNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RootDiagramNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RootDiagramNodes of a DiagramClassView
		/// <summary>
		/// Gets a list of RootDiagramNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RootDiagramNode> GetRootDiagramNodes(DiagramClassView element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RootDiagramNode>, RootDiagramNode>(element, DiagramClassViewDomainRoleId);
		}
		#endregion
		#region DiagramClassView link accessor
		/// <summary>
		/// Get the list of DiagramClassViewHasRootDiagramNodes links to a DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> GetLinksToRootDiagramNodes ( global::Tum.PDE.LanguageDSL.DiagramClassView diagramClassViewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(diagramClassViewInstance, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DiagramClassViewDomainRoleId);
		}
		#endregion
		#region RootDiagramNode link accessor
		/// <summary>
		/// Get the DiagramClassViewHasRootDiagramNodes link to a RootDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes GetLinkToDiagramClassView (global::Tum.PDE.LanguageDSL.RootDiagramNode rootDiagramNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(rootDiagramNodeInstance, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.RootDiagramNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RootDiagramNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramClassViewHasRootDiagramNodes instance accessors
		
		/// <summary>
		/// Get any DiagramClassViewHasRootDiagramNodes links between a given DiagramClassView and a RootDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> GetLinks( global::Tum.PDE.LanguageDSL.DiagramClassView source, global::Tum.PDE.LanguageDSL.RootDiagramNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(source, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DiagramClassViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes link in links )
			{
				if ( target.Equals(link.RootDiagramNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramClassViewHasRootDiagramNodes link between a given DiagramClassViewand a RootDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes GetLink( global::Tum.PDE.LanguageDSL.DiagramClassView source, global::Tum.PDE.LanguageDSL.RootDiagramNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes>(source, global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes.DiagramClassViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramClassViewHasRootDiagramNodes link in links )
			{
				if ( target.Equals(link.RootDiagramNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationClassReferencesChildren
	/// Description for Tum.PDE.LanguageDSL.SerializationClassReferencesChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0c0e962b-fade-4db8-9341-163b359212b8")]
	public partial class SerializationClassReferencesChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationClassReferencesChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c0e962b, 0xfade, 0x4db8, 0x93, 0x41, 0x16, 0x3b, 0x35, 0x92, 0x12, 0xb8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationClassReferencesChildren link in the same Partition as the given SerializationClass
		/// </summary>
		/// <param name="source">SerializationClass to use as the source of the relationship.</param>
		/// <param name="target">SerializationElement to use as the target of the relationship.</param>
		public SerializationClassReferencesChildren(SerializationClass source, SerializationElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationClassReferencesChildren.ParentDomainRoleId, source), new DslModeling::RoleAssignment(SerializationClassReferencesChildren.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassReferencesChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassReferencesChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassReferencesChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassReferencesChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x312d2c8a, 0x3fcc, 0x47ba, 0xb4, 0x19, 0xa9, 0xa7, 0xf6, 0x05, 0xb8, 0xbc);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Parent.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Parent.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("312d2c8a-3fcc-47ba-b419-a9a7f605b8bc")]
		public virtual SerializationClass Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentEmbeddedElements of a SerializationElement
		/// <summary>
		/// Gets a list of ParentEmbeddedElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializationClass> GetParentEmbeddedElements(SerializationElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializationClass>, SerializationClass>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x62f6345e, 0x7c53, 0x4d8a, 0x97, 0x9c, 0xf2, 0x41, 0xef, 0x94, 0x95, 0xee);
		
		/// <summary>
		/// DomainRole Child
		/// Description for Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.Child
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Child.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Child.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentEmbeddedElements", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassReferencesChildren/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("62f6345e-7c53-4d8a-979c-f241ef9495ee")]
		public virtual SerializationElement Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a SerializationClass
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializationElement> GetChildren(SerializationClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializationElement>, SerializationElement>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of SerializationClassReferencesChildren links to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> GetLinksToChildren ( global::Tum.PDE.LanguageDSL.SerializationClass parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren>(parentInstance, global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.ParentDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of SerializationClassReferencesChildren links to a SerializationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> GetLinksToParentEmbeddedElements ( global::Tum.PDE.LanguageDSL.SerializationElement childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren>(childInstance, global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.ChildDomainRoleId);
		}
		#endregion
		#region SerializationClassReferencesChildren instance accessors
		
		/// <summary>
		/// Get any SerializationClassReferencesChildren links between a given SerializationClass and a SerializationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> GetLinks( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializationElement target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren>(source, global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.ParentDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationClassReferencesChildren link between a given SerializationClassand a SerializationElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren GetLink( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializationElement target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren>(source, global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren.ParentDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassReferencesChildren link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedDomainRoleReferencesDomainRole
	/// Description for Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9edcf94e-9c66-4b23-a7a8-6f2d80372ab9")]
	public partial class SerializedDomainRoleReferencesDomainRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedDomainRoleReferencesDomainRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9edcf94e, 0x9c66, 0x4b23, 0xa7, 0xa8, 0x6f, 0x2d, 0x80, 0x37, 0x2a, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedDomainRoleReferencesDomainRole link in the same Partition as the given SerializedDomainRole
		/// </summary>
		/// <param name="source">SerializedDomainRole to use as the source of the relationship.</param>
		/// <param name="target">DomainRole to use as the target of the relationship.</param>
		public SerializedDomainRoleReferencesDomainRole(SerializedDomainRole source, DomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedDomainRoleReferencesDomainRole.SerializedDomainRoleDomainRoleId, source), new DslModeling::RoleAssignment(SerializedDomainRoleReferencesDomainRole.DomainRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainRoleReferencesDomainRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainRoleReferencesDomainRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainRoleReferencesDomainRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainRoleReferencesDomainRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedDomainRole domain role code
		
		/// <summary>
		/// SerializedDomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainRoleDomainRoleId = new global::System.Guid(0xd179b78f, 0xed93, 0x4363, 0x81, 0x04, 0x4c, 0xb2, 0x29, 0x34, 0xa6, 0x29);
		
		/// <summary>
		/// DomainRole SerializedDomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.SerializedDomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/SerializedDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/SerializedDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainRole", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/SerializedDomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d179b78f-ed93-4363-8104-4cb22934a629")]
		public virtual SerializedDomainRole SerializedDomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainRoles of a DomainRole
		/// <summary>
		/// Gets a list of SerializedDomainRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializedDomainRole> GetSerializedDomainRoles(DomainRole element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializedDomainRole>, SerializedDomainRole>(element, DomainRoleDomainRoleId);
		}
		#endregion
		#region DomainRole domain role code
		
		/// <summary>
		/// DomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRoleDomainRoleId = new global::System.Guid(0xdffe2ef8, 0x69e6, 0x4634, 0xab, 0x8e, 0x72, 0xa0, 0x09, 0x87, 0x09, 0x52);
		
		/// <summary>
		/// DomainRole DomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/DomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/DomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedDomainRoles", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole/DomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dffe2ef8-69e6-4634-ab8e-72a009870952")]
		public virtual DomainRole DomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainRole of a SerializedDomainRole
		/// <summary>
		/// Gets DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRole GetDomainRole(SerializedDomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainRoleDomainRoleId) as DomainRole;
		}
		
		/// <summary>
		/// Sets DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainRole(SerializedDomainRole element, DomainRole newDomainRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainRoleDomainRoleId, newDomainRole);
		}
		#endregion
		#region SerializedDomainRole link accessor
		/// <summary>
		/// Get the SerializedDomainRoleReferencesDomainRole link to a SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole GetLinkToDomainRole (global::Tum.PDE.LanguageDSL.SerializedDomainRole serializedDomainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole>(serializedDomainRoleInstance, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.SerializedDomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRole link accessor
		/// <summary>
		/// Get the list of SerializedDomainRoleReferencesDomainRole links to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> GetLinksToSerializedDomainRoles ( global::Tum.PDE.LanguageDSL.DomainRole domainRoleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole>(domainRoleInstance, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.DomainRoleDomainRoleId);
		}
		#endregion
		#region SerializedDomainRoleReferencesDomainRole instance accessors
		
		/// <summary>
		/// Get any SerializedDomainRoleReferencesDomainRole links between a given SerializedDomainRole and a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> GetLinks( global::Tum.PDE.LanguageDSL.SerializedDomainRole source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole>(source, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.SerializedDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole link in links )
			{
				if ( target.Equals(link.DomainRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedDomainRoleReferencesDomainRole link between a given SerializedDomainRoleand a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole GetLink( global::Tum.PDE.LanguageDSL.SerializedDomainRole source, global::Tum.PDE.LanguageDSL.DomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole>(source, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole.SerializedDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesDomainRole link in links )
			{
				if ( target.Equals(link.DomainRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationClassReferencesAttributes
	/// Description for Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f3850520-b427-4881-96cd-444e826ff2be")]
	public partial class SerializationClassReferencesAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationClassReferencesAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3850520, 0xb427, 0x4881, 0x96, 0xcd, 0x44, 0x4e, 0x82, 0x6f, 0xf2, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationClassReferencesAttributes link in the same Partition as the given SerializationClass
		/// </summary>
		/// <param name="source">SerializationClass to use as the source of the relationship.</param>
		/// <param name="target">SerializationAttributeElement to use as the target of the relationship.</param>
		public SerializationClassReferencesAttributes(SerializationClass source, SerializationAttributeElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationClassReferencesAttributes.ElementDomainRoleId, source), new DslModeling::RoleAssignment(SerializationClassReferencesAttributes.ChildDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassReferencesAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassReferencesAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassReferencesAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassReferencesAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xce1d4039, 0x86e8, 0x43aa, 0xa1, 0xfa, 0x42, 0xb7, 0x75, 0xaa, 0x69, 0x3f);
		
		/// <summary>
		/// DomainRole Element
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.Element
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Element.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Element.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Element.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ce1d4039-86e8-43aa-a1fa-42b775aa693f")]
		public virtual SerializationClass Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentAttributedElements of a SerializationAttributeElement
		/// <summary>
		/// Gets a list of ParentAttributedElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializationClass> GetParentAttributedElements(SerializationAttributeElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializationClass>, SerializationClass>(element, ChildDomainRoleId);
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0xccdbf11b, 0xc1ba, 0x47dd, 0xa0, 0xbe, 0x50, 0x95, 0xbd, 0x86, 0xf5, 0x28);
		
		/// <summary>
		/// DomainRole Child
		/// Description for Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.Child
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Child.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Child.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentAttributedElements", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ccdbf11b-c1ba-47dd-a0be-5095bd86f528")]
		public virtual SerializationAttributeElement Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationAttributeElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a SerializationClass
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializationAttributeElement> GetAttributes(SerializationClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializationAttributeElement>, SerializationAttributeElement>(element, ElementDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the list of SerializationClassReferencesAttributes links to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> GetLinksToAttributes ( global::Tum.PDE.LanguageDSL.SerializationClass elementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes>(elementInstance, global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.ElementDomainRoleId);
		}
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of SerializationClassReferencesAttributes links to a SerializationAttributeElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> GetLinksToParentAttributedElements ( global::Tum.PDE.LanguageDSL.SerializationAttributeElement childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes>(childInstance, global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.ChildDomainRoleId);
		}
		#endregion
		#region SerializationClassReferencesAttributes instance accessors
		
		/// <summary>
		/// Get any SerializationClassReferencesAttributes links between a given SerializationClass and a SerializationAttributeElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> GetLinks( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializationAttributeElement target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes>(source, global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.ElementDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes link in links )
			{
				if ( target.Equals(link.Child) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationClassReferencesAttributes link between a given SerializationClassand a SerializationAttributeElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes GetLink( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializationAttributeElement target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes>(source, global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes.ElementDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassReferencesAttributes link in links )
			{
				if ( target.Equals(link.Child) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasValidation
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasValidation
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasValidation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasValidation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("59f43b2b-c188-4ffb-be89-ea0273db2f24")]
	public partial class MetaModelHasValidation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasValidation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x59f43b2b, 0xc188, 0x4ffb, 0xbe, 0x89, 0xea, 0x02, 0x73, 0xdb, 0x2f, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasValidation link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">Validation to use as the target of the relationship.</param>
		public MetaModelHasValidation(MetaModel source, Validation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasValidation.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasValidation.ValidationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasValidation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasValidation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasValidation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasValidation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0x8a6317f2, 0x664c, 0x43a2, 0xa4, 0x11, 0x91, 0x6f, 0x09, 0xeb, 0x29, 0x9b);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasValidation.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasValidation/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasValidation/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Validation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasValidation/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8a6317f2-664c-43a2-a411-916f09eb299b")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a Validation
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(Validation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValidationDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(Validation element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValidationDomainRoleId, newMetaModel);
		}
		#endregion
		#region Validation domain role code
		
		/// <summary>
		/// Validation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValidationDomainRoleId = new global::System.Guid(0xbed7ef1d, 0x7b2f, 0x4faa, 0xb9, 0x24, 0x9d, 0x8b, 0xfe, 0x04, 0x38, 0xd5);
		
		/// <summary>
		/// DomainRole Validation
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasValidation.Validation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasValidation/Validation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasValidation/Validation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasValidation/Validation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bed7ef1d-7b2f-4faa-b924-9d8bfe0438d5")]
		public virtual Validation Validation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Validation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValidationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValidationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Validation of a MetaModel
		/// <summary>
		/// Gets Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Validation GetValidation(MetaModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaModelDomainRoleId) as Validation;
		}
		
		/// <summary>
		/// Sets Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValidation(MetaModel element, Validation newValidation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaModelDomainRoleId, newValidation);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the MetaModelHasValidation link to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasValidation GetLinkToValidation (global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.MetaModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MetaModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Validation link accessor
		/// <summary>
		/// Get the MetaModelHasValidation link to a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasValidation GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.Validation validationInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(validationInstance, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.ValidationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Validation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasValidation instance accessors
		
		/// <summary>
		/// Get any MetaModelHasValidation links between a given MetaModel and a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.Validation target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(source, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasValidation link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasValidation link between a given MetaModeland a Validation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasValidation GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.Validation target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasValidation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasValidation>(source, global::Tum.PDE.LanguageDSL.MetaModelHasValidation.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasValidation link in links )
			{
				if ( target.Equals(link.Validation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainModelTreeViewReferencesRootNodes
	/// Description for Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89458e4e-325f-4349-a63f-d563ad6f5827")]
	public partial class DomainModelTreeViewReferencesRootNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainModelTreeViewReferencesRootNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89458e4e, 0x325f, 0x4349, 0xa6, 0x3f, 0xd5, 0x63, 0xad, 0x6f, 0x58, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainModelTreeViewReferencesRootNodes link in the same Partition as the given DomainModelTreeView
		/// </summary>
		/// <param name="source">DomainModelTreeView to use as the source of the relationship.</param>
		/// <param name="target">RootNode to use as the target of the relationship.</param>
		public DomainModelTreeViewReferencesRootNodes(DomainModelTreeView source, RootNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainModelTreeViewReferencesRootNodes.DomainModelTreeViewDomainRoleId, source), new DslModeling::RoleAssignment(DomainModelTreeViewReferencesRootNodes.RootNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainModelTreeViewReferencesRootNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainModelTreeViewReferencesRootNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainModelTreeViewReferencesRootNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainModelTreeViewReferencesRootNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainModelTreeView domain role code
		
		/// <summary>
		/// DomainModelTreeView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelTreeViewDomainRoleId = new global::System.Guid(0x0e43bdf0, 0xe6b8, 0x49ed, 0xbf, 0x08, 0x89, 0x21, 0xcf, 0x0b, 0x78, 0x87);
		
		/// <summary>
		/// DomainRole DomainModelTreeView
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainModelTreeView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/DomainModelTreeView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/DomainModelTreeView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RootNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/DomainModelTreeView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0e43bdf0-e6b8-49ed-bf08-8921cf0b7887")]
		public virtual DomainModelTreeView DomainModelTreeView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainModelTreeView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainModelTreeViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainModelTreeViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainModelTreeView of a RootNode
		/// <summary>
		/// Gets DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainModelTreeView GetDomainModelTreeView(RootNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RootNodeDomainRoleId) as DomainModelTreeView;
		}
		
		/// <summary>
		/// Sets DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainModelTreeView(RootNode element, DomainModelTreeView newDomainModelTreeView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RootNodeDomainRoleId, newDomainModelTreeView);
		}
		#endregion
		#region RootNode domain role code
		
		/// <summary>
		/// RootNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid RootNodeDomainRoleId = new global::System.Guid(0xa9255ca5, 0x0f43, 0x4685, 0x9a, 0x51, 0x25, 0xb2, 0xf4, 0xae, 0x22, 0x03);
		
		/// <summary>
		/// DomainRole RootNode
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.RootNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/RootNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/RootNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainModelTreeView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes/RootNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a9255ca5-0f43-4685-9a51-25b2f4ae2203")]
		public virtual RootNode RootNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RootNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, RootNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RootNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RootNodes of a DomainModelTreeView
		/// <summary>
		/// Gets a list of RootNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RootNode> GetRootNodes(DomainModelTreeView element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RootNode>, RootNode>(element, DomainModelTreeViewDomainRoleId);
		}
		#endregion
		#region DomainModelTreeView link accessor
		/// <summary>
		/// Get the list of DomainModelTreeViewReferencesRootNodes links to a DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> GetLinksToRootNodes ( global::Tum.PDE.LanguageDSL.DomainModelTreeView domainModelTreeViewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes>(domainModelTreeViewInstance, global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainModelTreeViewDomainRoleId);
		}
		#endregion
		#region RootNode link accessor
		/// <summary>
		/// Get the DomainModelTreeViewReferencesRootNodes link to a RootNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes GetLinkToDomainModelTreeView (global::Tum.PDE.LanguageDSL.RootNode rootNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes>(rootNodeInstance, global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.RootNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RootNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainModelTreeViewReferencesRootNodes instance accessors
		
		/// <summary>
		/// Get any DomainModelTreeViewReferencesRootNodes links between a given DomainModelTreeView and a RootNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> GetLinks( global::Tum.PDE.LanguageDSL.DomainModelTreeView source, global::Tum.PDE.LanguageDSL.RootNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes>(source, global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainModelTreeViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes link in links )
			{
				if ( target.Equals(link.RootNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainModelTreeViewReferencesRootNodes link between a given DomainModelTreeViewand a RootNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes GetLink( global::Tum.PDE.LanguageDSL.DomainModelTreeView source, global::Tum.PDE.LanguageDSL.RootNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes>(source, global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes.DomainModelTreeViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainModelTreeViewReferencesRootNodes link in links )
			{
				if ( target.Equals(link.RootNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship TreeNodeReferencesEmbeddingRSNodes
	/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6d2a7896-17d3-4c67-9900-60c57a2baa71")]
	public partial class TreeNodeReferencesEmbeddingRSNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TreeNodeReferencesEmbeddingRSNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d2a7896, 0x17d3, 0x4c67, 0x99, 0x00, 0x60, 0xc5, 0x7a, 0x2b, 0xaa, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TreeNodeReferencesEmbeddingRSNodes link in the same Partition as the given TreeNode
		/// </summary>
		/// <param name="source">TreeNode to use as the source of the relationship.</param>
		/// <param name="target">EmbeddingRSNode to use as the target of the relationship.</param>
		public TreeNodeReferencesEmbeddingRSNodes(TreeNode source, EmbeddingRSNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TreeNodeReferencesEmbeddingRSNodes.TreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(TreeNodeReferencesEmbeddingRSNodes.EmbeddingRSNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesEmbeddingRSNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesEmbeddingRSNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesEmbeddingRSNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesEmbeddingRSNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TreeNode domain role code
		
		/// <summary>
		/// TreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TreeNodeDomainRoleId = new global::System.Guid(0xb4272d7d, 0x50d8, 0x4027, 0xa5, 0xa9, 0x21, 0x84, 0x18, 0xcc, 0xa0, 0x99);
		
		/// <summary>
		/// DomainRole TreeNode
		/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.TreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/TreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/TreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmbeddingRSNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/TreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b4272d7d-50d8-4027-a5a9-218418cca099")]
		public virtual TreeNode TreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TreeNode of a EmbeddingRSNode
		/// <summary>
		/// Gets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TreeNode GetTreeNode(EmbeddingRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmbeddingRSNodeDomainRoleId) as TreeNode;
		}
		
		/// <summary>
		/// Sets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTreeNode(EmbeddingRSNode element, TreeNode newTreeNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmbeddingRSNodeDomainRoleId, newTreeNode);
		}
		#endregion
		#region EmbeddingRSNode domain role code
		
		/// <summary>
		/// EmbeddingRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmbeddingRSNodeDomainRoleId = new global::System.Guid(0x323e88be, 0xf638, 0x4100, 0xa2, 0x71, 0x8a, 0xf4, 0xda, 0xd3, 0xbd, 0xaf);
		
		/// <summary>
		/// DomainRole EmbeddingRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.EmbeddingRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/EmbeddingRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/EmbeddingRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TreeNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes/EmbeddingRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("323e88be-f638-4100-a271-8af4dad3bdaf")]
		public virtual EmbeddingRSNode EmbeddingRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmbeddingRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmbeddingRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingRSNodes of a TreeNode
		/// <summary>
		/// Gets a list of EmbeddingRSNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EmbeddingRSNode> GetEmbeddingRSNodes(TreeNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EmbeddingRSNode>, EmbeddingRSNode>(element, TreeNodeDomainRoleId);
		}
		#endregion
		#region TreeNode link accessor
		/// <summary>
		/// Get the list of TreeNodeReferencesEmbeddingRSNodes links to a TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> GetLinksToEmbeddingRSNodes ( global::Tum.PDE.LanguageDSL.TreeNode treeNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes>(treeNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.TreeNodeDomainRoleId);
		}
		#endregion
		#region EmbeddingRSNode link accessor
		/// <summary>
		/// Get the TreeNodeReferencesEmbeddingRSNodes link to a EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes GetLinkToTreeNode (global::Tum.PDE.LanguageDSL.EmbeddingRSNode embeddingRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes>(embeddingRSNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.EmbeddingRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmbeddingRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TreeNodeReferencesEmbeddingRSNodes instance accessors
		
		/// <summary>
		/// Get any TreeNodeReferencesEmbeddingRSNodes links between a given TreeNode and a EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> GetLinks( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.EmbeddingRSNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes link in links )
			{
				if ( target.Equals(link.EmbeddingRSNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TreeNodeReferencesEmbeddingRSNodes link between a given TreeNodeand a EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes GetLink( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.EmbeddingRSNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesEmbeddingRSNodes link in links )
			{
				if ( target.Equals(link.EmbeddingRSNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship EmbeddingRSNodeReferencesEmbeddingNode
	/// Description for Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("10be6552-ffbc-424d-8b86-5189ff3fc1ec")]
	public partial class EmbeddingRSNodeReferencesEmbeddingNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EmbeddingRSNodeReferencesEmbeddingNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x10be6552, 0xffbc, 0x424d, 0x8b, 0x86, 0x51, 0x89, 0xff, 0x3f, 0xc1, 0xec);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EmbeddingRSNodeReferencesEmbeddingNode link in the same Partition as the given EmbeddingRSNode
		/// </summary>
		/// <param name="source">EmbeddingRSNode to use as the source of the relationship.</param>
		/// <param name="target">EmbeddingNode to use as the target of the relationship.</param>
		public EmbeddingRSNodeReferencesEmbeddingNode(EmbeddingRSNode source, EmbeddingNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingRSNodeDomainRoleId, source), new DslModeling::RoleAssignment(EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingRSNodeReferencesEmbeddingNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingRSNodeReferencesEmbeddingNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingRSNodeReferencesEmbeddingNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingRSNodeReferencesEmbeddingNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EmbeddingRSNode domain role code
		
		/// <summary>
		/// EmbeddingRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmbeddingRSNodeDomainRoleId = new global::System.Guid(0x82218ca0, 0xe059, 0x4767, 0x9a, 0x52, 0x30, 0x39, 0x8f, 0x3d, 0x24, 0xce);
		
		/// <summary>
		/// DomainRole EmbeddingRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmbeddingNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("82218ca0-e059-4767-9a52-30398f3d24ce")]
		public virtual EmbeddingRSNode EmbeddingRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmbeddingRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmbeddingRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingRSNode of a EmbeddingNode
		/// <summary>
		/// Gets EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EmbeddingRSNode GetEmbeddingRSNode(EmbeddingNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmbeddingNodeDomainRoleId) as EmbeddingRSNode;
		}
		
		/// <summary>
		/// Sets EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmbeddingRSNode(EmbeddingNode element, EmbeddingRSNode newEmbeddingRSNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmbeddingNodeDomainRoleId, newEmbeddingRSNode);
		}
		#endregion
		#region EmbeddingNode domain role code
		
		/// <summary>
		/// EmbeddingNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmbeddingNodeDomainRoleId = new global::System.Guid(0x6fc773cf, 0x324b, 0x49af, 0xb3, 0xe7, 0x5a, 0x3c, 0xf9, 0xa3, 0x8b, 0x83);
		
		/// <summary>
		/// DomainRole EmbeddingNode
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EmbeddingRSNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode/EmbeddingNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6fc773cf-324b-49af-b3e7-5a3cf9a38b83")]
		public virtual EmbeddingNode EmbeddingNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmbeddingNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmbeddingNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingNode of a EmbeddingRSNode
		/// <summary>
		/// Gets EmbeddingNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EmbeddingNode GetEmbeddingNode(EmbeddingRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmbeddingRSNodeDomainRoleId) as EmbeddingNode;
		}
		
		/// <summary>
		/// Sets EmbeddingNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmbeddingNode(EmbeddingRSNode element, EmbeddingNode newEmbeddingNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmbeddingRSNodeDomainRoleId, newEmbeddingNode);
		}
		#endregion
		#region EmbeddingRSNode link accessor
		/// <summary>
		/// Get the EmbeddingRSNodeReferencesEmbeddingNode link to a EmbeddingRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode GetLinkToEmbeddingNode (global::Tum.PDE.LanguageDSL.EmbeddingRSNode embeddingRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode>(embeddingRSNodeInstance, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmbeddingRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EmbeddingNode link accessor
		/// <summary>
		/// Get the EmbeddingRSNodeReferencesEmbeddingNode link to a EmbeddingNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode GetLinkToEmbeddingRSNode (global::Tum.PDE.LanguageDSL.EmbeddingNode embeddingNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode>(embeddingNodeInstance, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmbeddingNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EmbeddingRSNodeReferencesEmbeddingNode instance accessors
		
		/// <summary>
		/// Get any EmbeddingRSNodeReferencesEmbeddingNode links between a given EmbeddingRSNode and a EmbeddingNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> GetLinks( global::Tum.PDE.LanguageDSL.EmbeddingRSNode source, global::Tum.PDE.LanguageDSL.EmbeddingNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode>(source, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode link in links )
			{
				if ( target.Equals(link.EmbeddingNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EmbeddingRSNodeReferencesEmbeddingNode link between a given EmbeddingRSNodeand a EmbeddingNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode GetLink( global::Tum.PDE.LanguageDSL.EmbeddingRSNode source, global::Tum.PDE.LanguageDSL.EmbeddingNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode>(source, global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode.EmbeddingRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingRSNodeReferencesEmbeddingNode link in links )
			{
				if ( target.Equals(link.EmbeddingNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship TreeNodeReferencesInheritanceNodes
	/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e1c72fae-28a0-4f5c-b1d9-0696a5034720")]
	public partial class TreeNodeReferencesInheritanceNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TreeNodeReferencesInheritanceNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1c72fae, 0x28a0, 0x4f5c, 0xb1, 0xd9, 0x06, 0x96, 0xa5, 0x03, 0x47, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TreeNodeReferencesInheritanceNodes link in the same Partition as the given TreeNode
		/// </summary>
		/// <param name="source">TreeNode to use as the source of the relationship.</param>
		/// <param name="target">InheritanceNode to use as the target of the relationship.</param>
		public TreeNodeReferencesInheritanceNodes(TreeNode source, InheritanceNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TreeNodeReferencesInheritanceNodes.TreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(TreeNodeReferencesInheritanceNodes.InheritanceNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesInheritanceNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesInheritanceNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesInheritanceNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesInheritanceNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TreeNode domain role code
		
		/// <summary>
		/// TreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TreeNodeDomainRoleId = new global::System.Guid(0xee52e6b1, 0x7789, 0x4d5a, 0xb9, 0x7c, 0x81, 0xf6, 0x21, 0xcd, 0x95, 0xab);
		
		/// <summary>
		/// DomainRole TreeNode
		/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.TreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/TreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/TreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InheritanceNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/TreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ee52e6b1-7789-4d5a-b97c-81f621cd95ab")]
		public virtual TreeNode TreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TreeNode of a InheritanceNode
		/// <summary>
		/// Gets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TreeNode GetTreeNode(InheritanceNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InheritanceNodeDomainRoleId) as TreeNode;
		}
		
		/// <summary>
		/// Sets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTreeNode(InheritanceNode element, TreeNode newTreeNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InheritanceNodeDomainRoleId, newTreeNode);
		}
		#endregion
		#region InheritanceNode domain role code
		
		/// <summary>
		/// InheritanceNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid InheritanceNodeDomainRoleId = new global::System.Guid(0x64c38b59, 0xba61, 0x4ace, 0xa2, 0xe3, 0x87, 0x28, 0x5c, 0x6d, 0x25, 0x7d);
		
		/// <summary>
		/// DomainRole InheritanceNode
		/// Description for
		/// Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.InheritanceNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/InheritanceNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/InheritanceNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TreeNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes/InheritanceNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("64c38b59-ba61-4ace-a2e3-87285c6d257d")]
		public virtual InheritanceNode InheritanceNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InheritanceNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, InheritanceNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InheritanceNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InheritanceNodes of a TreeNode
		/// <summary>
		/// Gets a list of InheritanceNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InheritanceNode> GetInheritanceNodes(TreeNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InheritanceNode>, InheritanceNode>(element, TreeNodeDomainRoleId);
		}
		#endregion
		#region TreeNode link accessor
		/// <summary>
		/// Get the list of TreeNodeReferencesInheritanceNodes links to a TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> GetLinksToInheritanceNodes ( global::Tum.PDE.LanguageDSL.TreeNode treeNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes>(treeNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.TreeNodeDomainRoleId);
		}
		#endregion
		#region InheritanceNode link accessor
		/// <summary>
		/// Get the TreeNodeReferencesInheritanceNodes link to a InheritanceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes GetLinkToTreeNode (global::Tum.PDE.LanguageDSL.InheritanceNode inheritanceNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes>(inheritanceNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.InheritanceNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InheritanceNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TreeNodeReferencesInheritanceNodes instance accessors
		
		/// <summary>
		/// Get any TreeNodeReferencesInheritanceNodes links between a given TreeNode and a InheritanceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> GetLinks( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.InheritanceNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes link in links )
			{
				if ( target.Equals(link.InheritanceNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TreeNodeReferencesInheritanceNodes link between a given TreeNodeand a InheritanceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes GetLink( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.InheritanceNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesInheritanceNodes link in links )
			{
				if ( target.Equals(link.InheritanceNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship TreeNodeReferencesReferenceRSNodes
	/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9754f610-96b5-4421-a0f7-6b8a1ec85f93")]
	public partial class TreeNodeReferencesReferenceRSNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TreeNodeReferencesReferenceRSNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9754f610, 0x96b5, 0x4421, 0xa0, 0xf7, 0x6b, 0x8a, 0x1e, 0xc8, 0x5f, 0x93);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TreeNodeReferencesReferenceRSNodes link in the same Partition as the given TreeNode
		/// </summary>
		/// <param name="source">TreeNode to use as the source of the relationship.</param>
		/// <param name="target">ReferenceRSNode to use as the target of the relationship.</param>
		public TreeNodeReferencesReferenceRSNodes(TreeNode source, ReferenceRSNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TreeNodeReferencesReferenceRSNodes.TreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(TreeNodeReferencesReferenceRSNodes.ReferenceRSNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesReferenceRSNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesReferenceRSNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesReferenceRSNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesReferenceRSNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TreeNode domain role code
		
		/// <summary>
		/// TreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TreeNodeDomainRoleId = new global::System.Guid(0x94dce324, 0xcfbb, 0x45f5, 0xac, 0x45, 0x28, 0xc5, 0xbb, 0x37, 0xec, 0xcb);
		
		/// <summary>
		/// DomainRole TreeNode
		/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.TreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/TreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/TreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceRSNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/TreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("94dce324-cfbb-45f5-ac45-28c5bb37eccb")]
		public virtual TreeNode TreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TreeNode of a ReferenceRSNode
		/// <summary>
		/// Gets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TreeNode GetTreeNode(ReferenceRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceRSNodeDomainRoleId) as TreeNode;
		}
		
		/// <summary>
		/// Sets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTreeNode(ReferenceRSNode element, TreeNode newTreeNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceRSNodeDomainRoleId, newTreeNode);
		}
		#endregion
		#region ReferenceRSNode domain role code
		
		/// <summary>
		/// ReferenceRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRSNodeDomainRoleId = new global::System.Guid(0x43d81392, 0x13cb, 0x403b, 0x8d, 0x62, 0x2a, 0x26, 0xb8, 0x7e, 0x2d, 0xbe);
		
		/// <summary>
		/// DomainRole ReferenceRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.ReferenceRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/ReferenceRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/ReferenceRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TreeNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes/ReferenceRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("43d81392-13cb-403b-8d62-2a26b87e2dbe")]
		public virtual ReferenceRSNode ReferenceRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRSNodes of a TreeNode
		/// <summary>
		/// Gets a list of ReferenceRSNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReferenceRSNode> GetReferenceRSNodes(TreeNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReferenceRSNode>, ReferenceRSNode>(element, TreeNodeDomainRoleId);
		}
		#endregion
		#region TreeNode link accessor
		/// <summary>
		/// Get the list of TreeNodeReferencesReferenceRSNodes links to a TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> GetLinksToReferenceRSNodes ( global::Tum.PDE.LanguageDSL.TreeNode treeNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes>(treeNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.TreeNodeDomainRoleId);
		}
		#endregion
		#region ReferenceRSNode link accessor
		/// <summary>
		/// Get the TreeNodeReferencesReferenceRSNodes link to a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes GetLinkToTreeNode (global::Tum.PDE.LanguageDSL.ReferenceRSNode referenceRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes>(referenceRSNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.ReferenceRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TreeNodeReferencesReferenceRSNodes instance accessors
		
		/// <summary>
		/// Get any TreeNodeReferencesReferenceRSNodes links between a given TreeNode and a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> GetLinks( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.ReferenceRSNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes link in links )
			{
				if ( target.Equals(link.ReferenceRSNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TreeNodeReferencesReferenceRSNodes link between a given TreeNodeand a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes GetLink( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.ReferenceRSNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesReferenceRSNodes link in links )
			{
				if ( target.Equals(link.ReferenceRSNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ReferenceRSNodeReferencesReferenceNode
	/// Description for Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7e157ffe-7f6c-407f-93b3-0340f6b683a1")]
	public partial class ReferenceRSNodeReferencesReferenceNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceRSNodeReferencesReferenceNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e157ffe, 0x7f6c, 0x407f, 0x93, 0xb3, 0x03, 0x40, 0xf6, 0xb6, 0x83, 0xa1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceRSNodeReferencesReferenceNode link in the same Partition as the given ReferenceRSNode
		/// </summary>
		/// <param name="source">ReferenceRSNode to use as the source of the relationship.</param>
		/// <param name="target">ReferenceNode to use as the target of the relationship.</param>
		public ReferenceRSNodeReferencesReferenceNode(ReferenceRSNode source, ReferenceNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceRSNodeReferencesReferenceNode.ReferenceRSNodeDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceRSNodeReferencesReferenceNode.ReferenceNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesReferenceNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesReferenceNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesReferenceNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesReferenceNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceRSNode domain role code
		
		/// <summary>
		/// ReferenceRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRSNodeDomainRoleId = new global::System.Guid(0x880b9e0e, 0xbb7e, 0x41c3, 0x88, 0xca, 0x4e, 0x7d, 0xd8, 0x78, 0xc0, 0x96);
		
		/// <summary>
		/// DomainRole ReferenceRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("880b9e0e-bb7e-41c3-88ca-4e7dd878c096")]
		public virtual ReferenceRSNode ReferenceRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRSNode of a ReferenceNode
		/// <summary>
		/// Gets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRSNode GetReferenceRSNode(ReferenceNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceNodeDomainRoleId) as ReferenceRSNode;
		}
		
		/// <summary>
		/// Sets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRSNode(ReferenceNode element, ReferenceRSNode newReferenceRSNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceNodeDomainRoleId, newReferenceRSNode);
		}
		#endregion
		#region ReferenceNode domain role code
		
		/// <summary>
		/// ReferenceNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceNodeDomainRoleId = new global::System.Guid(0xa5acec03, 0x25c5, 0x4e67, 0x91, 0x0d, 0x3b, 0x51, 0x22, 0x1d, 0x2f, 0x16);
		
		/// <summary>
		/// DomainRole ReferenceNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceRSNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode/ReferenceNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a5acec03-25c5-4e67-910d-3b51221d2f16")]
		public virtual ReferenceNode ReferenceNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceNode of a ReferenceRSNode
		/// <summary>
		/// Gets ReferenceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceNode GetReferenceNode(ReferenceRSNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceRSNodeDomainRoleId) as ReferenceNode;
		}
		
		/// <summary>
		/// Sets ReferenceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceNode(ReferenceRSNode element, ReferenceNode newReferenceNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceRSNodeDomainRoleId, newReferenceNode);
		}
		#endregion
		#region ReferenceRSNode link accessor
		/// <summary>
		/// Get the ReferenceRSNodeReferencesReferenceNode link to a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode GetLinkToReferenceNode (global::Tum.PDE.LanguageDSL.ReferenceRSNode referenceRSNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode>(referenceRSNodeInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceRSNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceRSNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceNode link accessor
		/// <summary>
		/// Get the ReferenceRSNodeReferencesReferenceNode link to a ReferenceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode GetLinkToReferenceRSNode (global::Tum.PDE.LanguageDSL.ReferenceNode referenceNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode>(referenceNodeInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRSNodeReferencesReferenceNode instance accessors
		
		/// <summary>
		/// Get any ReferenceRSNodeReferencesReferenceNode links between a given ReferenceRSNode and a ReferenceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> GetLinks( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ReferenceNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode link in links )
			{
				if ( target.Equals(link.ReferenceNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceRSNodeReferencesReferenceNode link between a given ReferenceRSNodeand a ReferenceNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode GetLink( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ReferenceNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesReferenceNode link in links )
			{
				if ( target.Equals(link.ReferenceNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship TreeNodeReferencesShapeClassNodes
	/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d38b9281-3531-424b-b07d-354d67aebc1d")]
	public partial class TreeNodeReferencesShapeClassNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TreeNodeReferencesShapeClassNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd38b9281, 0x3531, 0x424b, 0xb0, 0x7d, 0x35, 0x4d, 0x67, 0xae, 0xbc, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TreeNodeReferencesShapeClassNodes link in the same Partition as the given TreeNode
		/// </summary>
		/// <param name="source">TreeNode to use as the source of the relationship.</param>
		/// <param name="target">ShapeClassNode to use as the target of the relationship.</param>
		public TreeNodeReferencesShapeClassNodes(TreeNode source, ShapeClassNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TreeNodeReferencesShapeClassNodes.TreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(TreeNodeReferencesShapeClassNodes.ShapeClassNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesShapeClassNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesShapeClassNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TreeNodeReferencesShapeClassNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TreeNodeReferencesShapeClassNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TreeNode domain role code
		
		/// <summary>
		/// TreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TreeNodeDomainRoleId = new global::System.Guid(0xc58499b1, 0xa286, 0x4e1c, 0x9e, 0xf0, 0x54, 0xc5, 0x9f, 0x07, 0x48, 0x20);
		
		/// <summary>
		/// DomainRole TreeNode
		/// Description for Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.TreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/TreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/TreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShapeClassNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/TreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c58499b1-a286-4e1c-9ef0-54c59f074820")]
		public virtual TreeNode TreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TreeNode of a ShapeClassNode
		/// <summary>
		/// Gets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TreeNode GetTreeNode(ShapeClassNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeClassNodeDomainRoleId) as TreeNode;
		}
		
		/// <summary>
		/// Sets TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTreeNode(ShapeClassNode element, TreeNode newTreeNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeClassNodeDomainRoleId, newTreeNode);
		}
		#endregion
		#region ShapeClassNode domain role code
		
		/// <summary>
		/// ShapeClassNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeClassNodeDomainRoleId = new global::System.Guid(0xc2dec63f, 0x8892, 0x46e7, 0x89, 0x1c, 0xd9, 0xb2, 0x54, 0x8a, 0xa5, 0x50);
		
		/// <summary>
		/// DomainRole ShapeClassNode
		/// Description for
		/// Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.ShapeClassNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/ShapeClassNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/ShapeClassNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TreeNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes/ShapeClassNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c2dec63f-8892-46e7-891c-d9b2548aa550")]
		public virtual ShapeClassNode ShapeClassNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClassNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeClassNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeClassNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeClassNodes of a TreeNode
		/// <summary>
		/// Gets a list of ShapeClassNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShapeClassNode> GetShapeClassNodes(TreeNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShapeClassNode>, ShapeClassNode>(element, TreeNodeDomainRoleId);
		}
		#endregion
		#region TreeNode link accessor
		/// <summary>
		/// Get the list of TreeNodeReferencesShapeClassNodes links to a TreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> GetLinksToShapeClassNodes ( global::Tum.PDE.LanguageDSL.TreeNode treeNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes>(treeNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.TreeNodeDomainRoleId);
		}
		#endregion
		#region ShapeClassNode link accessor
		/// <summary>
		/// Get the TreeNodeReferencesShapeClassNodes link to a ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes GetLinkToTreeNode (global::Tum.PDE.LanguageDSL.ShapeClassNode shapeClassNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes>(shapeClassNodeInstance, global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.ShapeClassNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeClassNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TreeNodeReferencesShapeClassNodes instance accessors
		
		/// <summary>
		/// Get any TreeNodeReferencesShapeClassNodes links between a given TreeNode and a ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> GetLinks( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.ShapeClassNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes link in links )
			{
				if ( target.Equals(link.ShapeClassNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TreeNodeReferencesShapeClassNodes link between a given TreeNodeand a ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes GetLink( global::Tum.PDE.LanguageDSL.TreeNode source, global::Tum.PDE.LanguageDSL.ShapeClassNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes>(source, global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes.TreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.TreeNodeReferencesShapeClassNodes link in links )
			{
				if ( target.Equals(link.ShapeClassNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DiagramViewHasDiagramClassViews
	/// Description for Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d50bd683-678e-4527-870e-d70c1ca3ec1f")]
	public partial class DiagramViewHasDiagramClassViews : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramViewHasDiagramClassViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd50bd683, 0x678e, 0x4527, 0x87, 0x0e, 0xd7, 0x0c, 0x1c, 0xa3, 0xec, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramViewHasDiagramClassViews link in the same Partition as the given DiagramView
		/// </summary>
		/// <param name="source">DiagramView to use as the source of the relationship.</param>
		/// <param name="target">DiagramClassView to use as the target of the relationship.</param>
		public DiagramViewHasDiagramClassViews(DiagramView source, DiagramClassView target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramViewHasDiagramClassViews.DiagramViewDomainRoleId, source), new DslModeling::RoleAssignment(DiagramViewHasDiagramClassViews.DiagramClassViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramViewHasDiagramClassViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramViewHasDiagramClassViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramViewHasDiagramClassViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramViewHasDiagramClassViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramView domain role code
		
		/// <summary>
		/// DiagramView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramViewDomainRoleId = new global::System.Guid(0x4a97e277, 0xeb76, 0x4821, 0xa8, 0x39, 0x15, 0xbc, 0x75, 0xd6, 0x02, 0x2c);
		
		/// <summary>
		/// DomainRole DiagramView
		/// Description for Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DiagramClassViews", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a97e277-eb76-4821-a839-15bc75d6022c")]
		public virtual DiagramView DiagramView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramView of a DiagramClassView
		/// <summary>
		/// Gets DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramView GetDiagramView(DiagramClassView element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramClassViewDomainRoleId) as DiagramView;
		}
		
		/// <summary>
		/// Sets DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramView(DiagramClassView element, DiagramView newDiagramView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramClassViewDomainRoleId, newDiagramView);
		}
		#endregion
		#region DiagramClassView domain role code
		
		/// <summary>
		/// DiagramClassView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassViewDomainRoleId = new global::System.Guid(0x69021cd6, 0x23f9, 0x4537, 0x8f, 0xcb, 0x30, 0xcf, 0x59, 0x1a, 0x66, 0x11);
		
		/// <summary>
		/// DomainRole DiagramClassView
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramClassView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramClassView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramClassView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews/DiagramClassView.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("69021cd6-23f9-4537-8fcb-30cf591a6611")]
		public virtual DiagramClassView DiagramClassView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClassView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClassViews of a DiagramView
		/// <summary>
		/// Gets a list of DiagramClassViews.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DiagramClassView> GetDiagramClassViews(DiagramView element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DiagramClassView>, DiagramClassView>(element, DiagramViewDomainRoleId);
		}
		#endregion
		#region DiagramView link accessor
		/// <summary>
		/// Get the list of DiagramViewHasDiagramClassViews links to a DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> GetLinksToDiagramClassViews ( global::Tum.PDE.LanguageDSL.DiagramView diagramViewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(diagramViewInstance, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramViewDomainRoleId);
		}
		#endregion
		#region DiagramClassView link accessor
		/// <summary>
		/// Get the DiagramViewHasDiagramClassViews link to a DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews GetLinkToDiagramView (global::Tum.PDE.LanguageDSL.DiagramClassView diagramClassViewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(diagramClassViewInstance, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramClassViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramClassView not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramViewHasDiagramClassViews instance accessors
		
		/// <summary>
		/// Get any DiagramViewHasDiagramClassViews links between a given DiagramView and a DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> GetLinks( global::Tum.PDE.LanguageDSL.DiagramView source, global::Tum.PDE.LanguageDSL.DiagramClassView target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(source, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews link in links )
			{
				if ( target.Equals(link.DiagramClassView) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramViewHasDiagramClassViews link between a given DiagramViewand a DiagramClassView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews GetLink( global::Tum.PDE.LanguageDSL.DiagramView source, global::Tum.PDE.LanguageDSL.DiagramClassView target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews>(source, global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews.DiagramViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramViewHasDiagramClassViews link in links )
			{
				if ( target.Equals(link.DiagramClassView) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DiagramTreeNodeReferencesPresentationElementClass
	/// Description for
	/// Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("15b18815-804b-46c8-8e75-82f3507e3bd1")]
	public partial class DiagramTreeNodeReferencesPresentationElementClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DiagramTreeNodeReferencesPresentationElementClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15b18815, 0x804b, 0x46c8, 0x8e, 0x75, 0x82, 0xf3, 0x50, 0x7e, 0x3b, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DiagramTreeNodeReferencesPresentationElementClass link in the same Partition as the given DiagramTreeNode
		/// </summary>
		/// <param name="source">DiagramTreeNode to use as the source of the relationship.</param>
		/// <param name="target">PresentationElementClass to use as the target of the relationship.</param>
		public DiagramTreeNodeReferencesPresentationElementClass(DiagramTreeNode source, PresentationElementClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DiagramTreeNodeReferencesPresentationElementClass.DiagramTreeNodeDomainRoleId, source), new DslModeling::RoleAssignment(DiagramTreeNodeReferencesPresentationElementClass.PresentationElementClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramTreeNodeReferencesPresentationElementClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramTreeNodeReferencesPresentationElementClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DiagramTreeNodeReferencesPresentationElementClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DiagramTreeNodeReferencesPresentationElementClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DiagramTreeNode domain role code
		
		/// <summary>
		/// DiagramTreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramTreeNodeDomainRoleId = new global::System.Guid(0xc166be4b, 0xf810, 0x4f28, 0xb8, 0x6d, 0xd3, 0x97, 0xf9, 0x45, 0x08, 0x64);
		
		/// <summary>
		/// DomainRole DiagramTreeNode
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DiagramTreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/DiagramTreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/DiagramTreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PresentationElementClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/DiagramTreeNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c166be4b-f810-4f28-b86d-d397f9450864")]
		public virtual DiagramTreeNode DiagramTreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramTreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramTreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramTreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramTreeNode of a PresentationElementClass
		/// <summary>
		/// Gets DiagramTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramTreeNode GetDiagramTreeNode(PresentationElementClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PresentationElementClassDomainRoleId) as DiagramTreeNode;
		}
		
		/// <summary>
		/// Sets DiagramTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramTreeNode(PresentationElementClass element, DiagramTreeNode newDiagramTreeNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PresentationElementClassDomainRoleId, newDiagramTreeNode);
		}
		#endregion
		#region PresentationElementClass domain role code
		
		/// <summary>
		/// PresentationElementClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid PresentationElementClassDomainRoleId = new global::System.Guid(0xda37610b, 0xe501, 0x4fee, 0xb4, 0x7e, 0xe6, 0x7b, 0x77, 0x75, 0x52, 0x0d);
		
		/// <summary>
		/// DomainRole PresentationElementClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.PresentationElementClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/PresentationElementClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/PresentationElementClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DiagramTreeNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass/PresentationElementClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("da37610b-e501-4fee-b47e-e67b7775520d")]
		public virtual PresentationElementClass PresentationElementClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PresentationElementClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, PresentationElementClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PresentationElementClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PresentationElementClass of a DiagramTreeNode
		/// <summary>
		/// Gets PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PresentationElementClass GetPresentationElementClass(DiagramTreeNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramTreeNodeDomainRoleId) as PresentationElementClass;
		}
		
		/// <summary>
		/// Sets PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPresentationElementClass(DiagramTreeNode element, PresentationElementClass newPresentationElementClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramTreeNodeDomainRoleId, newPresentationElementClass);
		}
		#endregion
		#region DiagramTreeNode link accessor
		/// <summary>
		/// Get the DiagramTreeNodeReferencesPresentationElementClass link to a DiagramTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass GetLinkToPresentationElementClass (global::Tum.PDE.LanguageDSL.DiagramTreeNode diagramTreeNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass>(diagramTreeNodeInstance, global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DiagramTreeNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramTreeNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PresentationElementClass link accessor
		/// <summary>
		/// Get the DiagramTreeNodeReferencesPresentationElementClass link to a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass GetLinkToDiagramTreeNode (global::Tum.PDE.LanguageDSL.PresentationElementClass presentationElementClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass>(presentationElementClassInstance, global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.PresentationElementClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PresentationElementClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramTreeNodeReferencesPresentationElementClass instance accessors
		
		/// <summary>
		/// Get any DiagramTreeNodeReferencesPresentationElementClass links between a given DiagramTreeNode and a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> GetLinks( global::Tum.PDE.LanguageDSL.DiagramTreeNode source, global::Tum.PDE.LanguageDSL.PresentationElementClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass>(source, global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DiagramTreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass link in links )
			{
				if ( target.Equals(link.PresentationElementClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DiagramTreeNodeReferencesPresentationElementClass link between a given DiagramTreeNodeand a PresentationElementClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass GetLink( global::Tum.PDE.LanguageDSL.DiagramTreeNode source, global::Tum.PDE.LanguageDSL.PresentationElementClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass>(source, global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass.DiagramTreeNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DiagramTreeNodeReferencesPresentationElementClass link in links )
			{
				if ( target.Equals(link.PresentationElementClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship EmbeddingDiagramNodeHasEmbeddingDiagramNodes
	/// Description for Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b33486e1-ca79-4c57-a725-5efadc23f36d")]
	public partial class EmbeddingDiagramNodeHasEmbeddingDiagramNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EmbeddingDiagramNodeHasEmbeddingDiagramNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb33486e1, 0xca79, 0x4c57, 0xa7, 0x25, 0x5e, 0xfa, 0xdc, 0x23, 0xf3, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EmbeddingDiagramNodeHasEmbeddingDiagramNodes link in the same Partition as the given EmbeddingDiagramNode
		/// </summary>
		/// <param name="source">EmbeddingDiagramNode to use as the source of the relationship.</param>
		/// <param name="target">EmbeddingDiagramNode to use as the target of the relationship.</param>
		public EmbeddingDiagramNodeHasEmbeddingDiagramNodes(EmbeddingDiagramNode source, EmbeddingDiagramNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EmbeddingDiagramNodeHasEmbeddingDiagramNodes.SourceEmbeddingDiagramNodeDomainRoleId, source), new DslModeling::RoleAssignment(EmbeddingDiagramNodeHasEmbeddingDiagramNodes.TargetEmbeddingDiagramNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingDiagramNodeHasEmbeddingDiagramNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingDiagramNodeHasEmbeddingDiagramNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EmbeddingDiagramNodeHasEmbeddingDiagramNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EmbeddingDiagramNodeHasEmbeddingDiagramNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEmbeddingDiagramNode domain role code
		
		/// <summary>
		/// SourceEmbeddingDiagramNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEmbeddingDiagramNodeDomainRoleId = new global::System.Guid(0x7a2c04d4, 0xd3f5, 0x49de, 0xaf, 0x33, 0xf0, 0x41, 0xa4, 0xdb, 0x57, 0x27);
		
		/// <summary>
		/// DomainRole SourceEmbeddingDiagramNode
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.SourceEmbeddingDiagramNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/SourceEmbeddingDiagramNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/SourceEmbeddingDiagramNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmbeddingDiagramNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/SourceEmbeddingDiagramNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7a2c04d4-d3f5-49de-af33-f041a4db5727")]
		public virtual EmbeddingDiagramNode SourceEmbeddingDiagramNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingDiagramNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEmbeddingDiagramNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEmbeddingDiagramNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceEmbeddingDiagramNode of a EmbeddingDiagramNode
		/// <summary>
		/// Gets SourceEmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EmbeddingDiagramNode GetSourceEmbeddingDiagramNode(EmbeddingDiagramNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetEmbeddingDiagramNodeDomainRoleId) as EmbeddingDiagramNode;
		}
		
		/// <summary>
		/// Sets SourceEmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceEmbeddingDiagramNode(EmbeddingDiagramNode element, EmbeddingDiagramNode newSourceEmbeddingDiagramNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetEmbeddingDiagramNodeDomainRoleId, newSourceEmbeddingDiagramNode);
		}
		#endregion
		#region TargetEmbeddingDiagramNode domain role code
		
		/// <summary>
		/// TargetEmbeddingDiagramNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEmbeddingDiagramNodeDomainRoleId = new global::System.Guid(0xb074fcc1, 0x5a69, 0x4be6, 0x9b, 0x0a, 0x65, 0xa2, 0xb0, 0x3f, 0xa6, 0xe8);
		
		/// <summary>
		/// DomainRole TargetEmbeddingDiagramNode
		/// Description for
		/// Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.TargetEmbeddingDiagramNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/TargetEmbeddingDiagramNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/TargetEmbeddingDiagramNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceEmbeddingDiagramNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes/TargetEmbeddingDiagramNode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b074fcc1-5a69-4be6-9b0a-65a2b03fa6e8")]
		public virtual EmbeddingDiagramNode TargetEmbeddingDiagramNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingDiagramNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEmbeddingDiagramNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEmbeddingDiagramNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingDiagramNodes of a EmbeddingDiagramNode
		/// <summary>
		/// Gets a list of EmbeddingDiagramNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EmbeddingDiagramNode> GetEmbeddingDiagramNodes(EmbeddingDiagramNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EmbeddingDiagramNode>, EmbeddingDiagramNode>(element, SourceEmbeddingDiagramNodeDomainRoleId);
		}
		#endregion
		#region SourceEmbeddingDiagramNode link accessor
		/// <summary>
		/// Get the list of EmbeddingDiagramNodeHasEmbeddingDiagramNodes links to a EmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> GetLinksToEmbeddingDiagramNodes ( global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode sourceEmbeddingDiagramNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(sourceEmbeddingDiagramNodeInstance, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.SourceEmbeddingDiagramNodeDomainRoleId);
		}
		#endregion
		#region TargetEmbeddingDiagramNode link accessor
		/// <summary>
		/// Get the EmbeddingDiagramNodeHasEmbeddingDiagramNodes link to a EmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes GetLinkToSourceEmbeddingDiagramNode (global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode targetEmbeddingDiagramNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(targetEmbeddingDiagramNodeInstance, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.TargetEmbeddingDiagramNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetEmbeddingDiagramNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EmbeddingDiagramNodeHasEmbeddingDiagramNodes instance accessors
		
		/// <summary>
		/// Get any EmbeddingDiagramNodeHasEmbeddingDiagramNodes links between a given EmbeddingDiagramNode and a EmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> GetLinks( global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode source, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(source, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.SourceEmbeddingDiagramNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes link in links )
			{
				if ( target.Equals(link.TargetEmbeddingDiagramNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EmbeddingDiagramNodeHasEmbeddingDiagramNodes link between a given EmbeddingDiagramNodeand a EmbeddingDiagramNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes GetLink( global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode source, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes>(source, global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes.SourceEmbeddingDiagramNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.EmbeddingDiagramNodeHasEmbeddingDiagramNodes link in links )
			{
				if ( target.Equals(link.TargetEmbeddingDiagramNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MappingRelationshipShapeClassReferencesSource
	/// Description for
	/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("db980dac-886b-4d2f-a3c1-3f2cd68217bb")]
	public partial class MappingRelationshipShapeClassReferencesSource : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingRelationshipShapeClassReferencesSource domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb980dac, 0x886b, 0x4d2f, 0xa3, 0xc1, 0x3f, 0x2c, 0xd6, 0x82, 0x17, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingRelationshipShapeClassReferencesSource link in the same Partition as the given MappingRelationshipShapeClass
		/// </summary>
		/// <param name="source">MappingRelationshipShapeClass to use as the source of the relationship.</param>
		/// <param name="target">ReferenceRelationship to use as the target of the relationship.</param>
		public MappingRelationshipShapeClassReferencesSource(MappingRelationshipShapeClass source, ReferenceRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingRelationshipShapeClassReferencesSource.MappingRelationshipShapeClassDomainRoleId, source), new DslModeling::RoleAssignment(MappingRelationshipShapeClassReferencesSource.ReferenceRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingRelationshipShapeClassReferencesSource(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingRelationshipShapeClassReferencesSource(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingRelationshipShapeClassReferencesSource(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingRelationshipShapeClassReferencesSource(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MappingRelationshipShapeClass domain role code
		
		/// <summary>
		/// MappingRelationshipShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid MappingRelationshipShapeClassDomainRoleId = new global::System.Guid(0x74fb747f, 0x364a, 0x44b0, 0xac, 0xf4, 0x92, 0xe7, 0x08, 0xe9, 0x55, 0x18);
		
		/// <summary>
		/// DomainRole MappingRelationshipShapeClass
		/// Description for
		/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.MappingRelationshipShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/MappingRelationshipShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/MappingRelationshipShapeClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/MappingRelationshipShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Source", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/MappingRelationshipShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74fb747f-364a-44b0-acf4-92e708e95518")]
		public virtual MappingRelationshipShapeClass MappingRelationshipShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingRelationshipShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, MappingRelationshipShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MappingRelationshipShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MappingRelationshipShapeClasses of a ReferenceRelationship
		/// <summary>
		/// Gets a list of MappingRelationshipShapeClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MappingRelationshipShapeClass> GetMappingRelationshipShapeClasses(ReferenceRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MappingRelationshipShapeClass>, MappingRelationshipShapeClass>(element, ReferenceRelationshipDomainRoleId);
		}
		#endregion
		#region ReferenceRelationship domain role code
		
		/// <summary>
		/// ReferenceRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRelationshipDomainRoleId = new global::System.Guid(0xcb161474, 0xe33a, 0x4ac5, 0x93, 0xbd, 0x80, 0x60, 0x53, 0x90, 0x4e, 0x36);
		
		/// <summary>
		/// DomainRole ReferenceRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.ReferenceRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/ReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/ReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MappingRelationshipShapeClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource/ReferenceRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cb161474-e33a-4ac5-93bd-806053904e36")]
		public virtual ReferenceRelationship ReferenceRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Source of a MappingRelationshipShapeClass
		/// <summary>
		/// Gets Source.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRelationship GetSource(MappingRelationshipShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MappingRelationshipShapeClassDomainRoleId) as ReferenceRelationship;
		}
		
		/// <summary>
		/// Sets Source.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSource(MappingRelationshipShapeClass element, ReferenceRelationship newReferenceRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MappingRelationshipShapeClassDomainRoleId, newReferenceRelationship);
		}
		#endregion
		#region MappingRelationshipShapeClass link accessor
		/// <summary>
		/// Get the MappingRelationshipShapeClassReferencesSource link to a MappingRelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource GetLinkToSource (global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass mappingRelationshipShapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource>(mappingRelationshipShapeClassInstance, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.MappingRelationshipShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MappingRelationshipShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRelationship link accessor
		/// <summary>
		/// Get the list of MappingRelationshipShapeClassReferencesSource links to a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> GetLinksToMappingRelationshipShapeClasses ( global::Tum.PDE.LanguageDSL.ReferenceRelationship referenceRelationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource>(referenceRelationshipInstance, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.ReferenceRelationshipDomainRoleId);
		}
		#endregion
		#region MappingRelationshipShapeClassReferencesSource instance accessors
		
		/// <summary>
		/// Get any MappingRelationshipShapeClassReferencesSource links between a given MappingRelationshipShapeClass and a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> GetLinks( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource>(source, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.MappingRelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingRelationshipShapeClassReferencesSource link between a given MappingRelationshipShapeClassand a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource GetLink( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource>(source, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource.MappingRelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesSource link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MappingRelationshipShapeClassReferencesTarget
	/// Description for
	/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7691ad7f-5adb-454b-8685-fb595a575553")]
	public partial class MappingRelationshipShapeClassReferencesTarget : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MappingRelationshipShapeClassReferencesTarget domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7691ad7f, 0x5adb, 0x454b, 0x86, 0x85, 0xfb, 0x59, 0x5a, 0x57, 0x55, 0x53);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MappingRelationshipShapeClassReferencesTarget link in the same Partition as the given MappingRelationshipShapeClass
		/// </summary>
		/// <param name="source">MappingRelationshipShapeClass to use as the source of the relationship.</param>
		/// <param name="target">ReferenceRelationship to use as the target of the relationship.</param>
		public MappingRelationshipShapeClassReferencesTarget(MappingRelationshipShapeClass source, ReferenceRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MappingRelationshipShapeClassReferencesTarget.MappingRelationshipShapeClassDomainRoleId, source), new DslModeling::RoleAssignment(MappingRelationshipShapeClassReferencesTarget.ReferenceRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingRelationshipShapeClassReferencesTarget(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingRelationshipShapeClassReferencesTarget(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MappingRelationshipShapeClassReferencesTarget(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MappingRelationshipShapeClassReferencesTarget(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MappingRelationshipShapeClass domain role code
		
		/// <summary>
		/// MappingRelationshipShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid MappingRelationshipShapeClassDomainRoleId = new global::System.Guid(0x2a33bad6, 0x7a87, 0x4a04, 0xb1, 0xfe, 0x12, 0x78, 0x63, 0x77, 0x4a, 0xc2);
		
		/// <summary>
		/// DomainRole MappingRelationshipShapeClass
		/// Description for
		/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.MappingRelationshipShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/MappingRelationshipShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/MappingRelationshipShapeClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/MappingRelationshipShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Target", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/MappingRelationshipShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2a33bad6-7a87-4a04-b1fe-127863774ac2")]
		public virtual MappingRelationshipShapeClass MappingRelationshipShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MappingRelationshipShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, MappingRelationshipShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MappingRelationshipShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MappingRelationshipShapeClasses of a ReferenceRelationship
		/// <summary>
		/// Gets a list of MappingRelationshipShapeClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MappingRelationshipShapeClass> GetMappingRelationshipShapeClasses(ReferenceRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MappingRelationshipShapeClass>, MappingRelationshipShapeClass>(element, ReferenceRelationshipDomainRoleId);
		}
		#endregion
		#region ReferenceRelationship domain role code
		
		/// <summary>
		/// ReferenceRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRelationshipDomainRoleId = new global::System.Guid(0xc79eb4ef, 0x412c, 0x448e, 0xbe, 0x8e, 0x4e, 0xe5, 0x6a, 0x6d, 0xff, 0x58);
		
		/// <summary>
		/// DomainRole ReferenceRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.ReferenceRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/ReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/ReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MappingRelationshipShapeClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget/ReferenceRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c79eb4ef-412c-448e-be8e-4ee56a6dff58")]
		public virtual ReferenceRelationship ReferenceRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Target of a MappingRelationshipShapeClass
		/// <summary>
		/// Gets Target.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRelationship GetTarget(MappingRelationshipShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MappingRelationshipShapeClassDomainRoleId) as ReferenceRelationship;
		}
		
		/// <summary>
		/// Sets Target.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTarget(MappingRelationshipShapeClass element, ReferenceRelationship newReferenceRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MappingRelationshipShapeClassDomainRoleId, newReferenceRelationship);
		}
		#endregion
		#region MappingRelationshipShapeClass link accessor
		/// <summary>
		/// Get the MappingRelationshipShapeClassReferencesTarget link to a MappingRelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget GetLinkToTarget (global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass mappingRelationshipShapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget>(mappingRelationshipShapeClassInstance, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.MappingRelationshipShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MappingRelationshipShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRelationship link accessor
		/// <summary>
		/// Get the list of MappingRelationshipShapeClassReferencesTarget links to a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> GetLinksToMappingRelationshipShapeClasses ( global::Tum.PDE.LanguageDSL.ReferenceRelationship referenceRelationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget>(referenceRelationshipInstance, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.ReferenceRelationshipDomainRoleId);
		}
		#endregion
		#region MappingRelationshipShapeClassReferencesTarget instance accessors
		
		/// <summary>
		/// Get any MappingRelationshipShapeClassReferencesTarget links between a given MappingRelationshipShapeClass and a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> GetLinks( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget>(source, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.MappingRelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MappingRelationshipShapeClassReferencesTarget link between a given MappingRelationshipShapeClassand a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget GetLink( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClass source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget>(source, global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget.MappingRelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MappingRelationshipShapeClassReferencesTarget link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ShapeRelationshipNodeReferencesRelationshipShapeClass
	/// Description for
	/// Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("23051d10-d60e-41ed-901e-cd35859d3073")]
	public partial class ShapeRelationshipNodeReferencesRelationshipShapeClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeRelationshipNodeReferencesRelationshipShapeClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x23051d10, 0xd60e, 0x41ed, 0x90, 0x1e, 0xcd, 0x35, 0x85, 0x9d, 0x30, 0x73);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeRelationshipNodeReferencesRelationshipShapeClass link in the same Partition as the given ShapeRelationshipNode
		/// </summary>
		/// <param name="source">ShapeRelationshipNode to use as the source of the relationship.</param>
		/// <param name="target">RelationshipShapeClass to use as the target of the relationship.</param>
		public ShapeRelationshipNodeReferencesRelationshipShapeClass(ShapeRelationshipNode source, RelationshipShapeClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeRelationshipNodeReferencesRelationshipShapeClass.ShapeRelationshipNodeDomainRoleId, source), new DslModeling::RoleAssignment(ShapeRelationshipNodeReferencesRelationshipShapeClass.RelationshipShapeClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeRelationshipNodeReferencesRelationshipShapeClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeRelationshipNodeReferencesRelationshipShapeClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeRelationshipNodeReferencesRelationshipShapeClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeRelationshipNodeReferencesRelationshipShapeClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShapeRelationshipNode domain role code
		
		/// <summary>
		/// ShapeRelationshipNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeRelationshipNodeDomainRoleId = new global::System.Guid(0x3069d73d, 0xa5d9, 0x44c7, 0xa1, 0x68, 0xbb, 0x51, 0xe0, 0x1e, 0xbc, 0x59);
		
		/// <summary>
		/// DomainRole ShapeRelationshipNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.ShapeRelationshipNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/ShapeRelationshipNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/ShapeRelationshipNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RelationshipShapeClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/ShapeRelationshipNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3069d73d-a5d9-44c7-a168-bb51e01ebc59")]
		public virtual ShapeRelationshipNode ShapeRelationshipNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeRelationshipNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeRelationshipNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeRelationshipNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeRelationshipNode of a RelationshipShapeClass
		/// <summary>
		/// Gets ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShapeRelationshipNode GetShapeRelationshipNode(RelationshipShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipShapeClassDomainRoleId) as ShapeRelationshipNode;
		}
		
		/// <summary>
		/// Sets ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShapeRelationshipNode(RelationshipShapeClass element, ShapeRelationshipNode newShapeRelationshipNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipShapeClassDomainRoleId, newShapeRelationshipNode);
		}
		#endregion
		#region RelationshipShapeClass domain role code
		
		/// <summary>
		/// RelationshipShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipShapeClassDomainRoleId = new global::System.Guid(0x4444cb78, 0xdec6, 0x4539, 0xa7, 0x94, 0xe4, 0xdb, 0xce, 0x33, 0x7a, 0x26);
		
		/// <summary>
		/// DomainRole RelationshipShapeClass
		/// Description for
		/// Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.RelationshipShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/RelationshipShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/RelationshipShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShapeRelationshipNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass/RelationshipShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4444cb78-dec6-4539-a794-e4dbce337a26")]
		public virtual RelationshipShapeClass RelationshipShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationshipShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationshipShapeClass of a ShapeRelationshipNode
		/// <summary>
		/// Gets RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RelationshipShapeClass GetRelationshipShapeClass(ShapeRelationshipNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeRelationshipNodeDomainRoleId) as RelationshipShapeClass;
		}
		
		/// <summary>
		/// Sets RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRelationshipShapeClass(ShapeRelationshipNode element, RelationshipShapeClass newRelationshipShapeClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeRelationshipNodeDomainRoleId, newRelationshipShapeClass);
		}
		#endregion
		#region ShapeRelationshipNode link accessor
		/// <summary>
		/// Get the ShapeRelationshipNodeReferencesRelationshipShapeClass link to a ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass GetLinkToRelationshipShapeClass (global::Tum.PDE.LanguageDSL.ShapeRelationshipNode shapeRelationshipNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass>(shapeRelationshipNodeInstance, global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.ShapeRelationshipNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeRelationshipNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RelationshipShapeClass link accessor
		/// <summary>
		/// Get the ShapeRelationshipNodeReferencesRelationshipShapeClass link to a RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass GetLinkToShapeRelationshipNode (global::Tum.PDE.LanguageDSL.RelationshipShapeClass relationshipShapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass>(relationshipShapeClassInstance, global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.RelationshipShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationshipShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShapeRelationshipNodeReferencesRelationshipShapeClass instance accessors
		
		/// <summary>
		/// Get any ShapeRelationshipNodeReferencesRelationshipShapeClass links between a given ShapeRelationshipNode and a RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> GetLinks( global::Tum.PDE.LanguageDSL.ShapeRelationshipNode source, global::Tum.PDE.LanguageDSL.RelationshipShapeClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass>(source, global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.ShapeRelationshipNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass link in links )
			{
				if ( target.Equals(link.RelationshipShapeClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeRelationshipNodeReferencesRelationshipShapeClass link between a given ShapeRelationshipNodeand a RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass GetLink( global::Tum.PDE.LanguageDSL.ShapeRelationshipNode source, global::Tum.PDE.LanguageDSL.RelationshipShapeClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass>(source, global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass.ShapeRelationshipNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeRelationshipNodeReferencesRelationshipShapeClass link in links )
			{
				if ( target.Equals(link.RelationshipShapeClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainModelTreeViewHasModelTreeNodes
	/// Description for Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("55bc437f-b862-4e4d-8d53-a184870509e9")]
	public partial class DomainModelTreeViewHasModelTreeNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainModelTreeViewHasModelTreeNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55bc437f, 0xb862, 0x4e4d, 0x8d, 0x53, 0xa1, 0x84, 0x87, 0x05, 0x09, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainModelTreeViewHasModelTreeNodes link in the same Partition as the given DomainModelTreeView
		/// </summary>
		/// <param name="source">DomainModelTreeView to use as the source of the relationship.</param>
		/// <param name="target">ModelTreeNode to use as the target of the relationship.</param>
		public DomainModelTreeViewHasModelTreeNodes(DomainModelTreeView source, ModelTreeNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainModelTreeViewHasModelTreeNodes.DomainModelTreeViewDomainRoleId, source), new DslModeling::RoleAssignment(DomainModelTreeViewHasModelTreeNodes.ModelTreeNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainModelTreeViewHasModelTreeNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainModelTreeViewHasModelTreeNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainModelTreeViewHasModelTreeNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainModelTreeViewHasModelTreeNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainModelTreeView domain role code
		
		/// <summary>
		/// DomainModelTreeView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelTreeViewDomainRoleId = new global::System.Guid(0xbf66fc54, 0x0a13, 0x4766, 0x86, 0x5d, 0x3e, 0x19, 0x90, 0xf5, 0x9a, 0xdf);
		
		/// <summary>
		/// DomainRole DomainModelTreeView
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainModelTreeView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/DomainModelTreeView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/DomainModelTreeView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelTreeNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/DomainModelTreeView.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf66fc54-0a13-4766-865d-3e1990f59adf")]
		public virtual DomainModelTreeView DomainModelTreeView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainModelTreeView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainModelTreeViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainModelTreeViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingModelTreeViewModel of a ModelTreeNode
		/// <summary>
		/// Gets EmbeddingModelTreeViewModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainModelTreeView GetEmbeddingModelTreeViewModel(ModelTreeNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTreeNodeDomainRoleId) as DomainModelTreeView;
		}
		
		/// <summary>
		/// Sets EmbeddingModelTreeViewModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmbeddingModelTreeViewModel(ModelTreeNode element, DomainModelTreeView newDomainModelTreeView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTreeNodeDomainRoleId, newDomainModelTreeView);
		}
		#endregion
		#region ModelTreeNode domain role code
		
		/// <summary>
		/// ModelTreeNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTreeNodeDomainRoleId = new global::System.Guid(0xb953332a, 0xbb2d, 0x4a82, 0xb2, 0x6c, 0x4e, 0x92, 0x73, 0xa3, 0x4a, 0x03);
		
		/// <summary>
		/// DomainRole ModelTreeNode
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.ModelTreeNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/ModelTreeNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/ModelTreeNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EmbeddingModelTreeViewModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes/ModelTreeNode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b953332a-bb2d-4a82-b26c-4e9273a34a03")]
		public virtual ModelTreeNode ModelTreeNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelTreeNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTreeNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTreeNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelTreeNodes of a DomainModelTreeView
		/// <summary>
		/// Gets a list of ModelTreeNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelTreeNode> GetModelTreeNodes(DomainModelTreeView element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelTreeNode>, ModelTreeNode>(element, DomainModelTreeViewDomainRoleId);
		}
		#endregion
		#region DomainModelTreeView link accessor
		/// <summary>
		/// Get the list of DomainModelTreeViewHasModelTreeNodes links to a DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> GetLinksToModelTreeNodes ( global::Tum.PDE.LanguageDSL.DomainModelTreeView domainModelTreeViewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(domainModelTreeViewInstance, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainModelTreeViewDomainRoleId);
		}
		#endregion
		#region ModelTreeNode link accessor
		/// <summary>
		/// Get the DomainModelTreeViewHasModelTreeNodes link to a ModelTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes GetLinkToEmbeddingModelTreeViewModel (global::Tum.PDE.LanguageDSL.ModelTreeNode modelTreeNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(modelTreeNodeInstance, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.ModelTreeNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelTreeNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainModelTreeViewHasModelTreeNodes instance accessors
		
		/// <summary>
		/// Get any DomainModelTreeViewHasModelTreeNodes links between a given DomainModelTreeView and a ModelTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> GetLinks( global::Tum.PDE.LanguageDSL.DomainModelTreeView source, global::Tum.PDE.LanguageDSL.ModelTreeNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(source, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainModelTreeViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes link in links )
			{
				if ( target.Equals(link.ModelTreeNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainModelTreeViewHasModelTreeNodes link between a given DomainModelTreeViewand a ModelTreeNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes GetLink( global::Tum.PDE.LanguageDSL.DomainModelTreeView source, global::Tum.PDE.LanguageDSL.ModelTreeNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes>(source, global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes.DomainModelTreeViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainModelTreeViewHasModelTreeNodes link in links )
			{
				if ( target.Equals(link.ModelTreeNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ReferenceRSNodeReferencesShapeRelationshipNodes
	/// Description for
	/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c32a3277-4171-48c4-9022-702e540389dc")]
	public partial class ReferenceRSNodeReferencesShapeRelationshipNodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReferenceRSNodeReferencesShapeRelationshipNodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc32a3277, 0x4171, 0x48c4, 0x90, 0x22, 0x70, 0x2e, 0x54, 0x03, 0x89, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReferenceRSNodeReferencesShapeRelationshipNodes link in the same Partition as the given ReferenceRSNode
		/// </summary>
		/// <param name="source">ReferenceRSNode to use as the source of the relationship.</param>
		/// <param name="target">ShapeRelationshipNode to use as the target of the relationship.</param>
		public ReferenceRSNodeReferencesShapeRelationshipNodes(ReferenceRSNode source, ShapeRelationshipNode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReferenceRSNodeReferencesShapeRelationshipNodes.ReferenceRSNodeDomainRoleId, source), new DslModeling::RoleAssignment(ReferenceRSNodeReferencesShapeRelationshipNodes.ShapeRelationshipNodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesShapeRelationshipNodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesShapeRelationshipNodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReferenceRSNodeReferencesShapeRelationshipNodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReferenceRSNodeReferencesShapeRelationshipNodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceRSNode domain role code
		
		/// <summary>
		/// ReferenceRSNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRSNodeDomainRoleId = new global::System.Guid(0x74d2c9f4, 0x0eea, 0x4458, 0x91, 0xd4, 0x19, 0x05, 0xac, 0x7c, 0x0f, 0x7a);
		
		/// <summary>
		/// DomainRole ReferenceRSNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ReferenceRSNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ReferenceRSNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ReferenceRSNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShapeRelationshipNodes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ReferenceRSNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("74d2c9f4-0eea-4458-91d4-1905ac7c0f7a")]
		public virtual ReferenceRSNode ReferenceRSNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRSNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRSNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRSNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRSNode of a ShapeRelationshipNode
		/// <summary>
		/// Gets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRSNode GetReferenceRSNode(ShapeRelationshipNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeRelationshipNodeDomainRoleId) as ReferenceRSNode;
		}
		
		/// <summary>
		/// Sets ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRSNode(ShapeRelationshipNode element, ReferenceRSNode newReferenceRSNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeRelationshipNodeDomainRoleId, newReferenceRSNode);
		}
		#endregion
		#region ShapeRelationshipNode domain role code
		
		/// <summary>
		/// ShapeRelationshipNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeRelationshipNodeDomainRoleId = new global::System.Guid(0x0643f7de, 0xc7f5, 0x4585, 0x8c, 0x75, 0xb2, 0xb7, 0x71, 0x06, 0x5e, 0x61);
		
		/// <summary>
		/// DomainRole ShapeRelationshipNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ShapeRelationshipNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ShapeRelationshipNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ShapeRelationshipNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferenceRSNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes/ShapeRelationshipNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0643f7de-c7f5-4585-8c75-b2b771065e61")]
		public virtual ShapeRelationshipNode ShapeRelationshipNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeRelationshipNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeRelationshipNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeRelationshipNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeRelationshipNodes of a ReferenceRSNode
		/// <summary>
		/// Gets a list of ShapeRelationshipNodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShapeRelationshipNode> GetShapeRelationshipNodes(ReferenceRSNode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShapeRelationshipNode>, ShapeRelationshipNode>(element, ReferenceRSNodeDomainRoleId);
		}
		#endregion
		#region ReferenceRSNode link accessor
		/// <summary>
		/// Get the list of ReferenceRSNodeReferencesShapeRelationshipNodes links to a ReferenceRSNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> GetLinksToShapeRelationshipNodes ( global::Tum.PDE.LanguageDSL.ReferenceRSNode referenceRSNodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes>(referenceRSNodeInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ReferenceRSNodeDomainRoleId);
		}
		#endregion
		#region ShapeRelationshipNode link accessor
		/// <summary>
		/// Get the ReferenceRSNodeReferencesShapeRelationshipNodes link to a ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes GetLinkToReferenceRSNode (global::Tum.PDE.LanguageDSL.ShapeRelationshipNode shapeRelationshipNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes>(shapeRelationshipNodeInstance, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ShapeRelationshipNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeRelationshipNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRSNodeReferencesShapeRelationshipNodes instance accessors
		
		/// <summary>
		/// Get any ReferenceRSNodeReferencesShapeRelationshipNodes links between a given ReferenceRSNode and a ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> GetLinks( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ShapeRelationshipNode target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes link in links )
			{
				if ( target.Equals(link.ShapeRelationshipNode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReferenceRSNodeReferencesShapeRelationshipNodes link between a given ReferenceRSNodeand a ShapeRelationshipNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes GetLink( global::Tum.PDE.LanguageDSL.ReferenceRSNode source, global::Tum.PDE.LanguageDSL.ShapeRelationshipNode target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes>(source, global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes.ReferenceRSNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ReferenceRSNodeReferencesShapeRelationshipNodes link in links )
			{
				if ( target.Equals(link.ShapeRelationshipNode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ShapeClassReferencesDomainClass
	/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3031942f-a8e9-4801-9ece-27c2f90c630e")]
	public partial class ShapeClassReferencesDomainClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeClassReferencesDomainClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3031942f, 0xa8e9, 0x4801, 0x9e, 0xce, 0x27, 0xc2, 0xf9, 0x0c, 0x63, 0x0e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeClassReferencesDomainClass link in the same Partition as the given PresentationDomainClassElement
		/// </summary>
		/// <param name="source">PresentationDomainClassElement to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public ShapeClassReferencesDomainClass(PresentationDomainClassElement source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeClassReferencesDomainClass.ShapeClassDomainRoleId, source), new DslModeling::RoleAssignment(ShapeClassReferencesDomainClass.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesDomainClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesDomainClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesDomainClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesDomainClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShapeClass domain role code
		
		/// <summary>
		/// ShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeClassDomainRoleId = new global::System.Guid(0x1f0822ad, 0x0dde, 0x4b49, 0xbd, 0x8e, 0xe4, 0x18, 0x8f, 0x7e, 0xe0, 0x76);
		
		/// <summary>
		/// DomainRole ShapeClass
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.ShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/ShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/ShapeClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/ShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/ShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1f0822ad-0dde-4b49-bd8e-e4188f7ee076")]
		public virtual PresentationDomainClassElement ShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PresentationDomainClassElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeClasses of a DomainClass
		/// <summary>
		/// Gets a list of ShapeClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PresentationDomainClassElement> GetShapeClasses(DomainClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PresentationDomainClassElement>, PresentationDomainClassElement>(element, DomainClassDomainRoleId);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0x92a82cdf, 0x1f88, 0x427d, 0xa8, 0x56, 0x44, 0x0a, 0xe3, 0x88, 0xa6, 0xa9);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/DomainClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShapeClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass/DomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92a82cdf-1f88-427d-a856-440ae388a6a9")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainClass of a PresentationDomainClassElement
		/// <summary>
		/// Gets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainClass GetDomainClass(PresentationDomainClassElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeClassDomainRoleId) as DomainClass;
		}
		
		/// <summary>
		/// Sets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainClass(PresentationDomainClassElement element, DomainClass newDomainClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeClassDomainRoleId, newDomainClass);
		}
		#endregion
		#region ShapeClass link accessor
		/// <summary>
		/// Get the ShapeClassReferencesDomainClass link to a PresentationDomainClassElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass GetLinkToDomainClass (global::Tum.PDE.LanguageDSL.PresentationDomainClassElement shapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass>(shapeClassInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.ShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the list of ShapeClassReferencesDomainClass links to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> GetLinksToShapeClasses ( global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass>(domainClassInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.DomainClassDomainRoleId);
		}
		#endregion
		#region ShapeClassReferencesDomainClass instance accessors
		
		/// <summary>
		/// Get any ShapeClassReferencesDomainClass links between a given PresentationDomainClassElement and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> GetLinks( global::Tum.PDE.LanguageDSL.PresentationDomainClassElement source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.ShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeClassReferencesDomainClass link between a given PresentationDomainClassElementand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass GetLink( global::Tum.PDE.LanguageDSL.PresentationDomainClassElement source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass.ShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ShapeClassNodeReferencesShapeClass
	/// Description for Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4942cd8a-4858-4c55-b3b7-db478d3e304e")]
	public partial class ShapeClassNodeReferencesShapeClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeClassNodeReferencesShapeClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4942cd8a, 0x4858, 0x4c55, 0xb3, 0xb7, 0xdb, 0x47, 0x8d, 0x3e, 0x30, 0x4e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeClassNodeReferencesShapeClass link in the same Partition as the given ShapeClassNode
		/// </summary>
		/// <param name="source">ShapeClassNode to use as the source of the relationship.</param>
		/// <param name="target">PresentationDomainClassElement to use as the target of the relationship.</param>
		public ShapeClassNodeReferencesShapeClass(ShapeClassNode source, PresentationDomainClassElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeClassNodeReferencesShapeClass.ShapeClassNodeDomainRoleId, source), new DslModeling::RoleAssignment(ShapeClassNodeReferencesShapeClass.ShapeClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassNodeReferencesShapeClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassNodeReferencesShapeClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassNodeReferencesShapeClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassNodeReferencesShapeClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShapeClassNode domain role code
		
		/// <summary>
		/// ShapeClassNode domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeClassNodeDomainRoleId = new global::System.Guid(0xd1cf1b78, 0x81c4, 0x44b5, 0xb6, 0x91, 0xee, 0xdf, 0x6d, 0xdb, 0xeb, 0x5b);
		
		/// <summary>
		/// DomainRole ShapeClassNode
		/// Description for
		/// Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClassNode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClassNode.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClassNode.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShapeClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClassNode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1cf1b78-81c4-44b5-b691-eedf6ddbeb5b")]
		public virtual ShapeClassNode ShapeClassNode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClassNode)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeClassNodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeClassNodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeClassNode of a PresentationDomainClassElement
		/// <summary>
		/// Gets ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShapeClassNode GetShapeClassNode(PresentationDomainClassElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeClassDomainRoleId) as ShapeClassNode;
		}
		
		/// <summary>
		/// Sets ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShapeClassNode(PresentationDomainClassElement element, ShapeClassNode newShapeClassNode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeClassDomainRoleId, newShapeClassNode);
		}
		#endregion
		#region ShapeClass domain role code
		
		/// <summary>
		/// ShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShapeClassDomainRoleId = new global::System.Guid(0x729c7c50, 0x78d7, 0x485e, 0x84, 0x25, 0xc2, 0xf4, 0xf1, 0xdc, 0xa1, 0xca);
		
		/// <summary>
		/// DomainRole ShapeClass
		/// Description for
		/// Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShapeClassNode", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass/ShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("729c7c50-78d7-485e-8425-c2f4f1dca1ca")]
		public virtual PresentationDomainClassElement ShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PresentationDomainClassElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShapeClass of a ShapeClassNode
		/// <summary>
		/// Gets ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PresentationDomainClassElement GetShapeClass(ShapeClassNode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShapeClassNodeDomainRoleId) as PresentationDomainClassElement;
		}
		
		/// <summary>
		/// Sets ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShapeClass(ShapeClassNode element, PresentationDomainClassElement newShapeClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShapeClassNodeDomainRoleId, newShapeClass);
		}
		#endregion
		#region ShapeClassNode link accessor
		/// <summary>
		/// Get the ShapeClassNodeReferencesShapeClass link to a ShapeClassNode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass GetLinkToShapeClass (global::Tum.PDE.LanguageDSL.ShapeClassNode shapeClassNodeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass>(shapeClassNodeInstance, global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClassNodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeClassNode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShapeClass link accessor
		/// <summary>
		/// Get the ShapeClassNodeReferencesShapeClass link to a PresentationDomainClassElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass GetLinkToShapeClassNode (global::Tum.PDE.LanguageDSL.PresentationDomainClassElement shapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass>(shapeClassInstance, global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShapeClassNodeReferencesShapeClass instance accessors
		
		/// <summary>
		/// Get any ShapeClassNodeReferencesShapeClass links between a given ShapeClassNode and a PresentationDomainClassElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> GetLinks( global::Tum.PDE.LanguageDSL.ShapeClassNode source, global::Tum.PDE.LanguageDSL.PresentationDomainClassElement target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass>(source, global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClassNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass link in links )
			{
				if ( target.Equals(link.ShapeClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeClassNodeReferencesShapeClass link between a given ShapeClassNodeand a PresentationDomainClassElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass GetLink( global::Tum.PDE.LanguageDSL.ShapeClassNode source, global::Tum.PDE.LanguageDSL.PresentationDomainClassElement target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass>(source, global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass.ShapeClassNodeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassNodeReferencesShapeClass link in links )
			{
				if ( target.Equals(link.ShapeClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationModelHasSerializedDomainModel
	/// Description for Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("911605ee-fa77-4f17-abc6-5b7c9af6aa9d")]
	public partial class SerializationModelHasSerializedDomainModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationModelHasSerializedDomainModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x911605ee, 0xfa77, 0x4f17, 0xab, 0xc6, 0x5b, 0x7c, 0x9a, 0xf6, 0xaa, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationModelHasSerializedDomainModel link in the same Partition as the given SerializationModel
		/// </summary>
		/// <param name="source">SerializationModel to use as the source of the relationship.</param>
		/// <param name="target">SerializedDomainModel to use as the target of the relationship.</param>
		public SerializationModelHasSerializedDomainModel(SerializationModel source, SerializedDomainModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationModelHasSerializedDomainModel.SerializationModelDomainRoleId, source), new DslModeling::RoleAssignment(SerializationModelHasSerializedDomainModel.SerializedDomainModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationModelHasSerializedDomainModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationModelHasSerializedDomainModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationModelHasSerializedDomainModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationModelHasSerializedDomainModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializationModel domain role code
		
		/// <summary>
		/// SerializationModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationModelDomainRoleId = new global::System.Guid(0x8a1350bd, 0x7441, 0x4556, 0xb1, 0x94, 0x87, 0x93, 0xa5, 0xd7, 0x9b, 0xf1);
		
		/// <summary>
		/// DomainRole SerializationModel
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializationModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializationModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializationModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SerializedDomainModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializationModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8a1350bd-7441-4556-b194-8793a5d79bf1")]
		public virtual SerializationModel SerializationModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a SerializedDomainModel
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationModel GetModel(SerializedDomainModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainModelDomainRoleId) as SerializationModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(SerializedDomainModel element, SerializationModel newSerializationModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainModelDomainRoleId, newSerializationModel);
		}
		#endregion
		#region SerializedDomainModel domain role code
		
		/// <summary>
		/// SerializedDomainModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainModelDomainRoleId = new global::System.Guid(0x12700d9b, 0xd15e, 0x48cb, 0x85, 0xe0, 0x59, 0xdf, 0x36, 0x96, 0xec, 0x34);
		
		/// <summary>
		/// DomainRole SerializedDomainModel
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializedDomainModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializedDomainModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializedDomainModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel/SerializedDomainModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("12700d9b-d15e-48cb-85e0-59df3696ec34")]
		public virtual SerializedDomainModel SerializedDomainModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainModel of a SerializationModel
		/// <summary>
		/// Gets SerializedDomainModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedDomainModel GetSerializedDomainModel(SerializationModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializationModelDomainRoleId) as SerializedDomainModel;
		}
		
		/// <summary>
		/// Sets SerializedDomainModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedDomainModel(SerializationModel element, SerializedDomainModel newSerializedDomainModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializationModelDomainRoleId, newSerializedDomainModel);
		}
		#endregion
		#region SerializationModel link accessor
		/// <summary>
		/// Get the SerializationModelHasSerializedDomainModel link to a SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel GetLinkToSerializedDomainModel (global::Tum.PDE.LanguageDSL.SerializationModel serializationModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(serializationModelInstance, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializationModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializationModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedDomainModel link accessor
		/// <summary>
		/// Get the SerializationModelHasSerializedDomainModel link to a SerializedDomainModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel GetLinkToModel (global::Tum.PDE.LanguageDSL.SerializedDomainModel serializedDomainModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(serializedDomainModelInstance, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializedDomainModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationModelHasSerializedDomainModel instance accessors
		
		/// <summary>
		/// Get any SerializationModelHasSerializedDomainModel links between a given SerializationModel and a SerializedDomainModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> GetLinks( global::Tum.PDE.LanguageDSL.SerializationModel source, global::Tum.PDE.LanguageDSL.SerializedDomainModel target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(source, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializationModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel link in links )
			{
				if ( target.Equals(link.SerializedDomainModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationModelHasSerializedDomainModel link between a given SerializationModeland a SerializedDomainModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel GetLink( global::Tum.PDE.LanguageDSL.SerializationModel source, global::Tum.PDE.LanguageDSL.SerializedDomainModel target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel>(source, global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel.SerializationModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationModelHasSerializedDomainModel link in links )
			{
				if ( target.Equals(link.SerializedDomainModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationClassHasIdProperty
	/// Description for Tum.PDE.LanguageDSL.SerializationClassHasIdProperty
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9d6b1eb9-c9fd-400e-814f-7b404a8cd684")]
	public partial class SerializationClassHasIdProperty : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationClassHasIdProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d6b1eb9, 0xc9fd, 0x400e, 0x81, 0x4f, 0x7b, 0x40, 0x4a, 0x8c, 0xd6, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationClassHasIdProperty link in the same Partition as the given SerializationClass
		/// </summary>
		/// <param name="source">SerializationClass to use as the source of the relationship.</param>
		/// <param name="target">SerializedIdProperty to use as the target of the relationship.</param>
		public SerializationClassHasIdProperty(SerializationClass source, SerializedIdProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationClassHasIdProperty.SerializationClassDomainRoleId, source), new DslModeling::RoleAssignment(SerializationClassHasIdProperty.SerializedIdPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassHasIdProperty(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassHasIdProperty(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassHasIdProperty(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassHasIdProperty(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializationClass domain role code
		
		/// <summary>
		/// SerializationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationClassDomainRoleId = new global::System.Guid(0xed4d4b8f, 0xad48, 0x4664, 0xa5, 0x19, 0x86, 0xa7, 0x10, 0x4e, 0xce, 0xc6);
		
		/// <summary>
		/// DomainRole SerializationClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializationClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializationClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializationClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IdProperty", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializationClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ed4d4b8f-ad48-4664-a519-86a7104ecec6")]
		public virtual SerializationClass SerializationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializationClass of a SerializedIdProperty
		/// <summary>
		/// Gets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationClass GetSerializationClass(SerializedIdProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedIdPropertyDomainRoleId) as SerializationClass;
		}
		
		/// <summary>
		/// Sets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializationClass(SerializedIdProperty element, SerializationClass newSerializationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedIdPropertyDomainRoleId, newSerializationClass);
		}
		#endregion
		#region SerializedIdProperty domain role code
		
		/// <summary>
		/// SerializedIdProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedIdPropertyDomainRoleId = new global::System.Guid(0xe071cbb3, 0x4070, 0x4901, 0x80, 0x38, 0x29, 0x93, 0x71, 0xf0, 0x10, 0xd4);
		
		/// <summary>
		/// DomainRole SerializedIdProperty
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializedIdProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializedIdProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializedIdProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializationClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassHasIdProperty/SerializedIdProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e071cbb3-4070-4901-8038-299371f010d4")]
		public virtual SerializedIdProperty SerializedIdProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedIdProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedIdPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedIdPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IdProperty of a SerializationClass
		/// <summary>
		/// Gets IdProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedIdProperty GetIdProperty(SerializationClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializationClassDomainRoleId) as SerializedIdProperty;
		}
		
		/// <summary>
		/// Sets IdProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIdProperty(SerializationClass element, SerializedIdProperty newSerializedIdProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializationClassDomainRoleId, newSerializedIdProperty);
		}
		#endregion
		#region SerializationClass link accessor
		/// <summary>
		/// Get the SerializationClassHasIdProperty link to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty GetLinkToIdProperty (global::Tum.PDE.LanguageDSL.SerializationClass serializationClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(serializationClassInstance, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedIdProperty link accessor
		/// <summary>
		/// Get the SerializationClassHasIdProperty link to a SerializedIdProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty GetLinkToSerializationClass (global::Tum.PDE.LanguageDSL.SerializedIdProperty serializedIdPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(serializedIdPropertyInstance, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializedIdPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedIdProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationClassHasIdProperty instance accessors
		
		/// <summary>
		/// Get any SerializationClassHasIdProperty links between a given SerializationClass and a SerializedIdProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> GetLinks( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializedIdProperty target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(source, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializationClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty link in links )
			{
				if ( target.Equals(link.SerializedIdProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationClassHasIdProperty link between a given SerializationClassand a SerializedIdProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty GetLink( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializedIdProperty target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty>(source, global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty.SerializationClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassHasIdProperty link in links )
			{
				if ( target.Equals(link.SerializedIdProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedRelationshipHasSerializedDomainRoles
	/// Description for
	/// Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b780f88c-fedb-4b5a-85cd-6ce9618bb866")]
	public partial class SerializedRelationshipHasSerializedDomainRoles : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedRelationshipHasSerializedDomainRoles domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb780f88c, 0xfedb, 0x4b5a, 0x85, 0xcd, 0x6c, 0xe9, 0x61, 0x8b, 0xb8, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedRelationshipHasSerializedDomainRoles link in the same Partition as the given SerializedRelationship
		/// </summary>
		/// <param name="source">SerializedRelationship to use as the source of the relationship.</param>
		/// <param name="target">SerializedDomainRole to use as the target of the relationship.</param>
		public SerializedRelationshipHasSerializedDomainRoles(SerializedRelationship source, SerializedDomainRole target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedRelationshipHasSerializedDomainRoles.SerializedRelationshipDomainRoleId, source), new DslModeling::RoleAssignment(SerializedRelationshipHasSerializedDomainRoles.SerializedDomainRoleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedRelationshipHasSerializedDomainRoles(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedRelationshipHasSerializedDomainRoles(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedRelationshipHasSerializedDomainRoles(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedRelationshipHasSerializedDomainRoles(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedRelationship domain role code
		
		/// <summary>
		/// SerializedRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedRelationshipDomainRoleId = new global::System.Guid(0xd6dae9d9, 0x7d00, 0x46e4, 0x9f, 0x70, 0xb9, 0x0f, 0x6f, 0xf5, 0xba, 0xe1);
		
		/// <summary>
		/// DomainRole SerializedRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SerializedDomainRoles", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d6dae9d9-7d00-46e4-9f70-b90f6ff5bae1")]
		public virtual SerializedRelationship SerializedRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedRelationship of a SerializedDomainRole
		/// <summary>
		/// Gets SerializedRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedRelationship GetSerializedRelationship(SerializedDomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainRoleDomainRoleId) as SerializedRelationship;
		}
		
		/// <summary>
		/// Sets SerializedRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedRelationship(SerializedDomainRole element, SerializedRelationship newSerializedRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainRoleDomainRoleId, newSerializedRelationship);
		}
		#endregion
		#region SerializedDomainRole domain role code
		
		/// <summary>
		/// SerializedDomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainRoleDomainRoleId = new global::System.Guid(0x7c28be3a, 0xa0ee, 0x4e45, 0xb7, 0x92, 0x4e, 0x0e, 0x16, 0xcc, 0x33, 0xc1);
		
		/// <summary>
		/// DomainRole SerializedDomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedDomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles/SerializedDomainRole.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7c28be3a-a0ee-4e45-b792-4e0e16cc33c1")]
		public virtual SerializedDomainRole SerializedDomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainRoles of a SerializedRelationship
		/// <summary>
		/// Gets a list of SerializedDomainRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializedDomainRole> GetSerializedDomainRoles(SerializedRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializedDomainRole>, SerializedDomainRole>(element, SerializedRelationshipDomainRoleId);
		}
		#endregion
		#region SerializedRelationship link accessor
		/// <summary>
		/// Get the list of SerializedRelationshipHasSerializedDomainRoles links to a SerializedRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> GetLinksToSerializedDomainRoles ( global::Tum.PDE.LanguageDSL.SerializedRelationship serializedRelationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(serializedRelationshipInstance, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedRelationshipDomainRoleId);
		}
		#endregion
		#region SerializedDomainRole link accessor
		/// <summary>
		/// Get the SerializedRelationshipHasSerializedDomainRoles link to a SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles GetLinkToSerializedRelationship (global::Tum.PDE.LanguageDSL.SerializedDomainRole serializedDomainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(serializedDomainRoleInstance, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedDomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedRelationshipHasSerializedDomainRoles instance accessors
		
		/// <summary>
		/// Get any SerializedRelationshipHasSerializedDomainRoles links between a given SerializedRelationship and a SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> GetLinks( global::Tum.PDE.LanguageDSL.SerializedRelationship source, global::Tum.PDE.LanguageDSL.SerializedDomainRole target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(source, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles link in links )
			{
				if ( target.Equals(link.SerializedDomainRole) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedRelationshipHasSerializedDomainRoles link between a given SerializedRelationshipand a SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles GetLink( global::Tum.PDE.LanguageDSL.SerializedRelationship source, global::Tum.PDE.LanguageDSL.SerializedDomainRole target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles>(source, global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles.SerializedRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedRelationshipHasSerializedDomainRoles link in links )
			{
				if ( target.Equals(link.SerializedDomainRole) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedDomainClassReferencesDomainClass
	/// Description for Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("33634d38-17e4-4f6d-889e-84bc2e910a12")]
	public partial class SerializedDomainClassReferencesDomainClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedDomainClassReferencesDomainClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33634d38, 0x17e4, 0x4f6d, 0x88, 0x9e, 0x84, 0xbc, 0x2e, 0x91, 0x0a, 0x12);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedDomainClassReferencesDomainClass link in the same Partition as the given SerializedDomainClass
		/// </summary>
		/// <param name="source">SerializedDomainClass to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public SerializedDomainClassReferencesDomainClass(SerializedDomainClass source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedDomainClassReferencesDomainClass.SerializedDomainClassDomainRoleId, source), new DslModeling::RoleAssignment(SerializedDomainClassReferencesDomainClass.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainClassReferencesDomainClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainClassReferencesDomainClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainClassReferencesDomainClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainClassReferencesDomainClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedDomainClass domain role code
		
		/// <summary>
		/// SerializedDomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainClassDomainRoleId = new global::System.Guid(0xa87347ad, 0xbf33, 0x4c31, 0xa2, 0x1b, 0x1d, 0x1c, 0x2a, 0x85, 0x89, 0x99);
		
		/// <summary>
		/// DomainRole SerializedDomainClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.SerializedDomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/SerializedDomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/SerializedDomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/SerializedDomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a87347ad-bf33-4c31-a21b-1d1c2a858999")]
		public virtual SerializedDomainClass SerializedDomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainClass of a DomainClass
		/// <summary>
		/// Gets SerializedDomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedDomainClass GetSerializedDomainClass(DomainClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainClassDomainRoleId) as SerializedDomainClass;
		}
		
		/// <summary>
		/// Sets SerializedDomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedDomainClass(DomainClass element, SerializedDomainClass newSerializedDomainClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainClassDomainRoleId, newSerializedDomainClass);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0xacc2027a, 0x77cf, 0x4d93, 0x84, 0x80, 0xb5, 0x24, 0x96, 0xd2, 0x63, 0x50);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedDomainClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass/DomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("acc2027a-77cf-4d93-8480-b52496d26350")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainClass of a SerializedDomainClass
		/// <summary>
		/// Gets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainClass GetDomainClass(SerializedDomainClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainClassDomainRoleId) as DomainClass;
		}
		
		/// <summary>
		/// Sets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainClass(SerializedDomainClass element, DomainClass newDomainClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainClassDomainRoleId, newDomainClass);
		}
		#endregion
		#region SerializedDomainClass link accessor
		/// <summary>
		/// Get the SerializedDomainClassReferencesDomainClass link to a SerializedDomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass GetLinkToDomainClass (global::Tum.PDE.LanguageDSL.SerializedDomainClass serializedDomainClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass>(serializedDomainClassInstance, global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.SerializedDomainClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the SerializedDomainClassReferencesDomainClass link to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass GetLinkToSerializedDomainClass (global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass>(domainClassInstance, global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.DomainClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedDomainClassReferencesDomainClass instance accessors
		
		/// <summary>
		/// Get any SerializedDomainClassReferencesDomainClass links between a given SerializedDomainClass and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> GetLinks( global::Tum.PDE.LanguageDSL.SerializedDomainClass source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.SerializedDomainClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedDomainClassReferencesDomainClass link between a given SerializedDomainClassand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass GetLink( global::Tum.PDE.LanguageDSL.SerializedDomainClass source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass.SerializedDomainClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainClassReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedEmbeddingRelationshipReferencesEmbeddingRelationship
	/// Description for
	/// Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("af7e80d4-b14a-4917-ab68-a857899946bf")]
	public partial class SerializedEmbeddingRelationshipReferencesEmbeddingRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedEmbeddingRelationshipReferencesEmbeddingRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf7e80d4, 0xb14a, 0x4917, 0xab, 0x68, 0xa8, 0x57, 0x89, 0x99, 0x46, 0xbf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link in the same Partition as the given SerializedEmbeddingRelationship
		/// </summary>
		/// <param name="source">SerializedEmbeddingRelationship to use as the source of the relationship.</param>
		/// <param name="target">EmbeddingRelationship to use as the target of the relationship.</param>
		public SerializedEmbeddingRelationshipReferencesEmbeddingRelationship(SerializedEmbeddingRelationship source, EmbeddingRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.SerializedEmbeddingRelationshipDomainRoleId, source), new DslModeling::RoleAssignment(SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.EmbeddingRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedEmbeddingRelationshipReferencesEmbeddingRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedEmbeddingRelationshipReferencesEmbeddingRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedEmbeddingRelationshipReferencesEmbeddingRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedEmbeddingRelationshipReferencesEmbeddingRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedEmbeddingRelationship domain role code
		
		/// <summary>
		/// SerializedEmbeddingRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedEmbeddingRelationshipDomainRoleId = new global::System.Guid(0xb4926cd6, 0xa94a, 0x4c74, 0x88, 0x13, 0x27, 0xe9, 0x91, 0x78, 0x97, 0xca);
		
		/// <summary>
		/// DomainRole SerializedEmbeddingRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.SerializedEmbeddingRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/SerializedEmbeddingRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/SerializedEmbeddingRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EmbeddingRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/SerializedEmbeddingRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b4926cd6-a94a-4c74-8813-27e9917897ca")]
		public virtual SerializedEmbeddingRelationship SerializedEmbeddingRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedEmbeddingRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedEmbeddingRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedEmbeddingRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedEmbeddingRelationship of a EmbeddingRelationship
		/// <summary>
		/// Gets SerializedEmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedEmbeddingRelationship GetSerializedEmbeddingRelationship(EmbeddingRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EmbeddingRelationshipDomainRoleId) as SerializedEmbeddingRelationship;
		}
		
		/// <summary>
		/// Sets SerializedEmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedEmbeddingRelationship(EmbeddingRelationship element, SerializedEmbeddingRelationship newSerializedEmbeddingRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EmbeddingRelationshipDomainRoleId, newSerializedEmbeddingRelationship);
		}
		#endregion
		#region EmbeddingRelationship domain role code
		
		/// <summary>
		/// EmbeddingRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid EmbeddingRelationshipDomainRoleId = new global::System.Guid(0x055710e2, 0x0d57, 0x4cb9, 0x8b, 0x51, 0x62, 0xa6, 0x8b, 0x7b, 0x0d, 0x80);
		
		/// <summary>
		/// DomainRole EmbeddingRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.EmbeddingRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/EmbeddingRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/EmbeddingRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedEmbeddingRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship/EmbeddingRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("055710e2-0d57-4cb9-8b51-62a68b7b0d80")]
		public virtual EmbeddingRelationship EmbeddingRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EmbeddingRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, EmbeddingRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EmbeddingRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EmbeddingRelationship of a SerializedEmbeddingRelationship
		/// <summary>
		/// Gets EmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EmbeddingRelationship GetEmbeddingRelationship(SerializedEmbeddingRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedEmbeddingRelationshipDomainRoleId) as EmbeddingRelationship;
		}
		
		/// <summary>
		/// Sets EmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEmbeddingRelationship(SerializedEmbeddingRelationship element, EmbeddingRelationship newEmbeddingRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedEmbeddingRelationshipDomainRoleId, newEmbeddingRelationship);
		}
		#endregion
		#region SerializedEmbeddingRelationship link accessor
		/// <summary>
		/// Get the SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link to a SerializedEmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship GetLinkToEmbeddingRelationship (global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship serializedEmbeddingRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship>(serializedEmbeddingRelationshipInstance, global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.SerializedEmbeddingRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedEmbeddingRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EmbeddingRelationship link accessor
		/// <summary>
		/// Get the SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link to a EmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship GetLinkToSerializedEmbeddingRelationship (global::Tum.PDE.LanguageDSL.EmbeddingRelationship embeddingRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship>(embeddingRelationshipInstance, global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.EmbeddingRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EmbeddingRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedEmbeddingRelationshipReferencesEmbeddingRelationship instance accessors
		
		/// <summary>
		/// Get any SerializedEmbeddingRelationshipReferencesEmbeddingRelationship links between a given SerializedEmbeddingRelationship and a EmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> GetLinks( global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship source, global::Tum.PDE.LanguageDSL.EmbeddingRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship>(source, global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.SerializedEmbeddingRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link in links )
			{
				if ( target.Equals(link.EmbeddingRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link between a given SerializedEmbeddingRelationshipand a EmbeddingRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship GetLink( global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationship source, global::Tum.PDE.LanguageDSL.EmbeddingRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship>(source, global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship.SerializedEmbeddingRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedEmbeddingRelationshipReferencesEmbeddingRelationship link in links )
			{
				if ( target.Equals(link.EmbeddingRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedReferenceRelationshipReferencesReferenceRelationship
	/// Description for
	/// Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4727780c-970d-4ae6-aeac-c5f5d1488acb")]
	public partial class SerializedReferenceRelationshipReferencesReferenceRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedReferenceRelationshipReferencesReferenceRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4727780c, 0x970d, 0x4ae6, 0xae, 0xac, 0xc5, 0xf5, 0xd1, 0x48, 0x8a, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedReferenceRelationshipReferencesReferenceRelationship link in the same Partition as the given SerializedReferenceRelationship
		/// </summary>
		/// <param name="source">SerializedReferenceRelationship to use as the source of the relationship.</param>
		/// <param name="target">ReferenceRelationship to use as the target of the relationship.</param>
		public SerializedReferenceRelationshipReferencesReferenceRelationship(SerializedReferenceRelationship source, ReferenceRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedReferenceRelationshipReferencesReferenceRelationship.SerializedReferenceRelationshipDomainRoleId, source), new DslModeling::RoleAssignment(SerializedReferenceRelationshipReferencesReferenceRelationship.ReferenceRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedReferenceRelationshipReferencesReferenceRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedReferenceRelationshipReferencesReferenceRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedReferenceRelationshipReferencesReferenceRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedReferenceRelationshipReferencesReferenceRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedReferenceRelationship domain role code
		
		/// <summary>
		/// SerializedReferenceRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedReferenceRelationshipDomainRoleId = new global::System.Guid(0x06e5a9d7, 0x4cf8, 0x4452, 0xac, 0x21, 0x1a, 0x33, 0xd3, 0x8c, 0x84, 0x1e);
		
		/// <summary>
		/// DomainRole SerializedReferenceRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.SerializedReferenceRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/SerializedReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/SerializedReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/SerializedReferenceRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("06e5a9d7-4cf8-4452-ac21-1a33d38c841e")]
		public virtual SerializedReferenceRelationship SerializedReferenceRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedReferenceRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedReferenceRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedReferenceRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedReferenceRelationship of a ReferenceRelationship
		/// <summary>
		/// Gets SerializedReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedReferenceRelationship GetSerializedReferenceRelationship(ReferenceRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceRelationshipDomainRoleId) as SerializedReferenceRelationship;
		}
		
		/// <summary>
		/// Sets SerializedReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedReferenceRelationship(ReferenceRelationship element, SerializedReferenceRelationship newSerializedReferenceRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceRelationshipDomainRoleId, newSerializedReferenceRelationship);
		}
		#endregion
		#region ReferenceRelationship domain role code
		
		/// <summary>
		/// ReferenceRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceRelationshipDomainRoleId = new global::System.Guid(0x10ef763a, 0x5205, 0x497e, 0x8b, 0x09, 0x68, 0xfe, 0x93, 0xe6, 0xc9, 0xfc);
		
		/// <summary>
		/// DomainRole ReferenceRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.ReferenceRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/ReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/ReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedReferenceRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship/ReferenceRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("10ef763a-5205-497e-8b09-68fe93e6c9fc")]
		public virtual ReferenceRelationship ReferenceRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReferenceRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRelationship of a SerializedReferenceRelationship
		/// <summary>
		/// Gets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ReferenceRelationship GetReferenceRelationship(SerializedReferenceRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedReferenceRelationshipDomainRoleId) as ReferenceRelationship;
		}
		
		/// <summary>
		/// Sets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRelationship(SerializedReferenceRelationship element, ReferenceRelationship newReferenceRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedReferenceRelationshipDomainRoleId, newReferenceRelationship);
		}
		#endregion
		#region SerializedReferenceRelationship link accessor
		/// <summary>
		/// Get the SerializedReferenceRelationshipReferencesReferenceRelationship link to a SerializedReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship GetLinkToReferenceRelationship (global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship serializedReferenceRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship>(serializedReferenceRelationshipInstance, global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.SerializedReferenceRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedReferenceRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ReferenceRelationship link accessor
		/// <summary>
		/// Get the SerializedReferenceRelationshipReferencesReferenceRelationship link to a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship GetLinkToSerializedReferenceRelationship (global::Tum.PDE.LanguageDSL.ReferenceRelationship referenceRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship>(referenceRelationshipInstance, global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.ReferenceRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferenceRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedReferenceRelationshipReferencesReferenceRelationship instance accessors
		
		/// <summary>
		/// Get any SerializedReferenceRelationshipReferencesReferenceRelationship links between a given SerializedReferenceRelationship and a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> GetLinks( global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.SerializedReferenceRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedReferenceRelationshipReferencesReferenceRelationship link between a given SerializedReferenceRelationshipand a ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship GetLink( global::Tum.PDE.LanguageDSL.SerializedReferenceRelationship source, global::Tum.PDE.LanguageDSL.ReferenceRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship.SerializedReferenceRelationshipDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedReferenceRelationshipReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.ReferenceRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedDomainPropertyReferencesDomainProperty
	/// Description for
	/// Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f4fdb6df-79a9-477f-97b3-9ed81c060246")]
	public partial class SerializedDomainPropertyReferencesDomainProperty : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedDomainPropertyReferencesDomainProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4fdb6df, 0x79a9, 0x477f, 0x97, 0xb3, 0x9e, 0xd8, 0x1c, 0x06, 0x02, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedDomainPropertyReferencesDomainProperty link in the same Partition as the given SerializedDomainProperty
		/// </summary>
		/// <param name="source">SerializedDomainProperty to use as the source of the relationship.</param>
		/// <param name="target">DomainProperty to use as the target of the relationship.</param>
		public SerializedDomainPropertyReferencesDomainProperty(SerializedDomainProperty source, DomainProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedDomainPropertyReferencesDomainProperty.SerializedDomainPropertyDomainRoleId, source), new DslModeling::RoleAssignment(SerializedDomainPropertyReferencesDomainProperty.DomainPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainPropertyReferencesDomainProperty(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainPropertyReferencesDomainProperty(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainPropertyReferencesDomainProperty(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainPropertyReferencesDomainProperty(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedDomainProperty domain role code
		
		/// <summary>
		/// SerializedDomainProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainPropertyDomainRoleId = new global::System.Guid(0x7ee09536, 0x675c, 0x40d2, 0xb3, 0x08, 0x5f, 0x82, 0x74, 0xa0, 0x76, 0xf1);
		
		/// <summary>
		/// DomainRole SerializedDomainProperty
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.SerializedDomainProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/SerializedDomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/SerializedDomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainProperty", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/SerializedDomainProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7ee09536-675c-40d2-b308-5f8274a076f1")]
		public virtual SerializedDomainProperty SerializedDomainProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainProperty of a DomainProperty
		/// <summary>
		/// Gets SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedDomainProperty GetSerializedDomainProperty(DomainProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainPropertyDomainRoleId) as SerializedDomainProperty;
		}
		
		/// <summary>
		/// Sets SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedDomainProperty(DomainProperty element, SerializedDomainProperty newSerializedDomainProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainPropertyDomainRoleId, newSerializedDomainProperty);
		}
		#endregion
		#region DomainProperty domain role code
		
		/// <summary>
		/// DomainProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainPropertyDomainRoleId = new global::System.Guid(0x80d922ee, 0xcd4a, 0x4217, 0x9d, 0xc6, 0xd3, 0xad, 0x62, 0x4c, 0x4e, 0x11);
		
		/// <summary>
		/// DomainRole DomainProperty
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/DomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/DomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedDomainProperty", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty/DomainProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("80d922ee-cd4a-4217-9dc6-d3ad624c4e11")]
		public virtual DomainProperty DomainProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainProperty of a SerializedDomainProperty
		/// <summary>
		/// Gets DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainProperty GetDomainProperty(SerializedDomainProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainPropertyDomainRoleId) as DomainProperty;
		}
		
		/// <summary>
		/// Sets DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainProperty(SerializedDomainProperty element, DomainProperty newDomainProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainPropertyDomainRoleId, newDomainProperty);
		}
		#endregion
		#region SerializedDomainProperty link accessor
		/// <summary>
		/// Get the SerializedDomainPropertyReferencesDomainProperty link to a SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty GetLinkToDomainProperty (global::Tum.PDE.LanguageDSL.SerializedDomainProperty serializedDomainPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty>(serializedDomainPropertyInstance, global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.SerializedDomainPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainProperty link accessor
		/// <summary>
		/// Get the SerializedDomainPropertyReferencesDomainProperty link to a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty GetLinkToSerializedDomainProperty (global::Tum.PDE.LanguageDSL.DomainProperty domainPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty>(domainPropertyInstance, global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.DomainPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedDomainPropertyReferencesDomainProperty instance accessors
		
		/// <summary>
		/// Get any SerializedDomainPropertyReferencesDomainProperty links between a given SerializedDomainProperty and a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> GetLinks( global::Tum.PDE.LanguageDSL.SerializedDomainProperty source, global::Tum.PDE.LanguageDSL.DomainProperty target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty>(source, global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.SerializedDomainPropertyDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty link in links )
			{
				if ( target.Equals(link.DomainProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedDomainPropertyReferencesDomainProperty link between a given SerializedDomainPropertyand a DomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty GetLink( global::Tum.PDE.LanguageDSL.SerializedDomainProperty source, global::Tum.PDE.LanguageDSL.DomainProperty target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty>(source, global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty.SerializedDomainPropertyDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainPropertyReferencesDomainProperty link in links )
			{
				if ( target.Equals(link.DomainProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializedDomainRoleReferencesSerializationClass
	/// Description for
	/// Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fe2ba1de-36c5-4736-8441-f4f887a89f37")]
	public partial class SerializedDomainRoleReferencesSerializationClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializedDomainRoleReferencesSerializationClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfe2ba1de, 0x36c5, 0x4736, 0x84, 0x41, 0xf4, 0xf8, 0x87, 0xa8, 0x9f, 0x37);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializedDomainRoleReferencesSerializationClass link in the same Partition as the given SerializedDomainRole
		/// </summary>
		/// <param name="source">SerializedDomainRole to use as the source of the relationship.</param>
		/// <param name="target">SerializationClass to use as the target of the relationship.</param>
		public SerializedDomainRoleReferencesSerializationClass(SerializedDomainRole source, SerializationClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializedDomainRoleReferencesSerializationClass.SerializedDomainRoleDomainRoleId, source), new DslModeling::RoleAssignment(SerializedDomainRoleReferencesSerializationClass.SerializationClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainRoleReferencesSerializationClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainRoleReferencesSerializationClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializedDomainRoleReferencesSerializationClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializedDomainRoleReferencesSerializationClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializedDomainRole domain role code
		
		/// <summary>
		/// SerializedDomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainRoleDomainRoleId = new global::System.Guid(0x9106a54e, 0x97a0, 0x4ce4, 0x93, 0xc0, 0x7f, 0xf1, 0x9c, 0x3a, 0x34, 0x09);
		
		/// <summary>
		/// DomainRole SerializedDomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializedDomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializedDomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializedDomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SerializationClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializedDomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9106a54e-97a0-4ce4-93c0-7ff19c3a3409")]
		public virtual SerializedDomainRole SerializedDomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializedDomainRole of a SerializationClass
		/// <summary>
		/// Gets SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializedDomainRole GetSerializedDomainRole(SerializationClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializationClassDomainRoleId) as SerializedDomainRole;
		}
		
		/// <summary>
		/// Sets SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializedDomainRole(SerializationClass element, SerializedDomainRole newSerializedDomainRole)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializationClassDomainRoleId, newSerializedDomainRole);
		}
		#endregion
		#region SerializationClass domain role code
		
		/// <summary>
		/// SerializationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationClassDomainRoleId = new global::System.Guid(0x1f0aa60f, 0x7bc8, 0x4669, 0xbe, 0x07, 0x65, 0x43, 0xf0, 0xdc, 0x62, 0xeb);
		
		/// <summary>
		/// DomainRole SerializationClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializationClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializationClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializationClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializedDomainRole", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass/SerializationClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1f0aa60f-7bc8-4669-be07-6543f0dc62eb")]
		public virtual SerializationClass SerializationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializationClass of a SerializedDomainRole
		/// <summary>
		/// Gets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationClass GetSerializationClass(SerializedDomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainRoleDomainRoleId) as SerializationClass;
		}
		
		/// <summary>
		/// Sets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializationClass(SerializedDomainRole element, SerializationClass newSerializationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainRoleDomainRoleId, newSerializationClass);
		}
		#endregion
		#region SerializedDomainRole link accessor
		/// <summary>
		/// Get the SerializedDomainRoleReferencesSerializationClass link to a SerializedDomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass GetLinkToSerializationClass (global::Tum.PDE.LanguageDSL.SerializedDomainRole serializedDomainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass>(serializedDomainRoleInstance, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializedDomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationClass link accessor
		/// <summary>
		/// Get the SerializedDomainRoleReferencesSerializationClass link to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass GetLinkToSerializedDomainRole (global::Tum.PDE.LanguageDSL.SerializationClass serializationClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass>(serializationClassInstance, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializedDomainRoleReferencesSerializationClass instance accessors
		
		/// <summary>
		/// Get any SerializedDomainRoleReferencesSerializationClass links between a given SerializedDomainRole and a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> GetLinks( global::Tum.PDE.LanguageDSL.SerializedDomainRole source, global::Tum.PDE.LanguageDSL.SerializationClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass>(source, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializedDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass link in links )
			{
				if ( target.Equals(link.SerializationClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializedDomainRoleReferencesSerializationClass link between a given SerializedDomainRoleand a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass GetLink( global::Tum.PDE.LanguageDSL.SerializedDomainRole source, global::Tum.PDE.LanguageDSL.SerializationClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass>(source, global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass.SerializedDomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializedDomainRoleReferencesSerializationClass link in links )
			{
				if ( target.Equals(link.SerializationClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationModelHasChildren
	/// Description for Tum.PDE.LanguageDSL.SerializationModelHasChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0bb261cd-b9ed-41c7-8702-7ce28306279e")]
	public partial class SerializationModelHasChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationModelHasChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0bb261cd, 0xb9ed, 0x41c7, 0x87, 0x02, 0x7c, 0xe2, 0x83, 0x06, 0x27, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationModelHasChildren link in the same Partition as the given SerializationModel
		/// </summary>
		/// <param name="source">SerializationModel to use as the source of the relationship.</param>
		/// <param name="target">SerializationClass to use as the target of the relationship.</param>
		public SerializationModelHasChildren(SerializationModel source, SerializationClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationModelHasChildren.SerializationModelDomainRoleId, source), new DslModeling::RoleAssignment(SerializationModelHasChildren.SerializationClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationModelHasChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationModelHasChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationModelHasChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationModelHasChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializationModel domain role code
		
		/// <summary>
		/// SerializationModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationModelDomainRoleId = new global::System.Guid(0x83541948, 0xff66, 0x436c, 0xb2, 0x2a, 0x0c, 0xd5, 0xc0, 0x2f, 0x6b, 0xee);
		
		/// <summary>
		/// DomainRole SerializationModel
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("83541948-ff66-436c-b22a-0cd5c02f6bee")]
		public virtual SerializationModel SerializationModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializationModel of a SerializationClass
		/// <summary>
		/// Gets SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationModel GetSerializationModel(SerializationClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializationClassDomainRoleId) as SerializationModel;
		}
		
		/// <summary>
		/// Sets SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializationModel(SerializationClass element, SerializationModel newSerializationModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializationClassDomainRoleId, newSerializationModel);
		}
		#endregion
		#region SerializationClass domain role code
		
		/// <summary>
		/// SerializationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationClassDomainRoleId = new global::System.Guid(0x9c7ff85a, 0xe697, 0x4a43, 0xa7, 0xcc, 0xb0, 0x51, 0x6d, 0xac, 0xe5, 0x1b);
		
		/// <summary>
		/// DomainRole SerializationClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializationModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationModelHasChildren/SerializationClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9c7ff85a-e697-4a43-a7cc-b0516dace51b")]
		public virtual SerializationClass SerializationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a SerializationModel
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializationClass> GetChildren(SerializationModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializationClass>, SerializationClass>(element, SerializationModelDomainRoleId);
		}
		#endregion
		#region SerializationModel link accessor
		/// <summary>
		/// Get the list of SerializationModelHasChildren links to a SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> GetLinksToChildren ( global::Tum.PDE.LanguageDSL.SerializationModel serializationModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(serializationModelInstance, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationModelDomainRoleId);
		}
		#endregion
		#region SerializationClass link accessor
		/// <summary>
		/// Get the SerializationModelHasChildren link to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationModelHasChildren GetLinkToSerializationModel (global::Tum.PDE.LanguageDSL.SerializationClass serializationClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(serializationClassInstance, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationModelHasChildren instance accessors
		
		/// <summary>
		/// Get any SerializationModelHasChildren links between a given SerializationModel and a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> GetLinks( global::Tum.PDE.LanguageDSL.SerializationModel source, global::Tum.PDE.LanguageDSL.SerializationClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(source, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationModelHasChildren link in links )
			{
				if ( target.Equals(link.SerializationClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationModelHasChildren link between a given SerializationModeland a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationModelHasChildren GetLink( global::Tum.PDE.LanguageDSL.SerializationModel source, global::Tum.PDE.LanguageDSL.SerializationClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationModelHasChildren>(source, global::Tum.PDE.LanguageDSL.SerializationModelHasChildren.SerializationModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationModelHasChildren link in links )
			{
				if ( target.Equals(link.SerializationClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SerializationClassHasProperties
	/// Description for Tum.PDE.LanguageDSL.SerializationClassHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("418f5cc0-56be-4c93-8270-0725ef7d0558")]
	public partial class SerializationClassHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SerializationClassHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x418f5cc0, 0x56be, 0x4c93, 0x82, 0x70, 0x07, 0x25, 0xef, 0x7d, 0x05, 0x58);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SerializationClassHasProperties link in the same Partition as the given SerializationClass
		/// </summary>
		/// <param name="source">SerializationClass to use as the source of the relationship.</param>
		/// <param name="target">SerializedDomainProperty to use as the target of the relationship.</param>
		public SerializationClassHasProperties(SerializationClass source, SerializedDomainProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SerializationClassHasProperties.SerializationClassDomainRoleId, source), new DslModeling::RoleAssignment(SerializationClassHasProperties.SerializedDomainPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SerializationClassHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SerializationClassHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SerializationClass domain role code
		
		/// <summary>
		/// SerializationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationClassDomainRoleId = new global::System.Guid(0xf0dd50f3, 0x281f, 0x45a2, 0xbe, 0xdb, 0x5e, 0x85, 0x5a, 0x47, 0x73, 0x18);
		
		/// <summary>
		/// DomainRole SerializationClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializationClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializationClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializationClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializationClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f0dd50f3-281f-45a2-bedb-5e855a477318")]
		public virtual SerializationClass SerializationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializationClass of a SerializedDomainProperty
		/// <summary>
		/// Gets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationClass GetSerializationClass(SerializedDomainProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializedDomainPropertyDomainRoleId) as SerializationClass;
		}
		
		/// <summary>
		/// Sets SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializationClass(SerializedDomainProperty element, SerializationClass newSerializationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializedDomainPropertyDomainRoleId, newSerializationClass);
		}
		#endregion
		#region SerializedDomainProperty domain role code
		
		/// <summary>
		/// SerializedDomainProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializedDomainPropertyDomainRoleId = new global::System.Guid(0x30dd8c4a, 0xb599, 0x4268, 0xb1, 0x40, 0x41, 0xda, 0x77, 0xd5, 0x90, 0x82);
		
		/// <summary>
		/// DomainRole SerializedDomainProperty
		/// Description for
		/// Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializedDomainProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializedDomainProperty.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializedDomainProperty.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SerializationClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SerializationClassHasProperties/SerializedDomainProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("30dd8c4a-b599-4268-b140-41da77d59082")]
		public virtual SerializedDomainProperty SerializedDomainProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializedDomainProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializedDomainPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializedDomainPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a SerializationClass
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SerializedDomainProperty> GetProperties(SerializationClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SerializedDomainProperty>, SerializedDomainProperty>(element, SerializationClassDomainRoleId);
		}
		#endregion
		#region SerializationClass link accessor
		/// <summary>
		/// Get the list of SerializationClassHasProperties links to a SerializationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> GetLinksToProperties ( global::Tum.PDE.LanguageDSL.SerializationClass serializationClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(serializationClassInstance, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializationClassDomainRoleId);
		}
		#endregion
		#region SerializedDomainProperty link accessor
		/// <summary>
		/// Get the SerializationClassHasProperties link to a SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassHasProperties GetLinkToSerializationClass (global::Tum.PDE.LanguageDSL.SerializedDomainProperty serializedDomainPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(serializedDomainPropertyInstance, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializedDomainPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializedDomainProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationClassHasProperties instance accessors
		
		/// <summary>
		/// Get any SerializationClassHasProperties links between a given SerializationClass and a SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> GetLinks( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializedDomainProperty target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(source, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializationClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassHasProperties link in links )
			{
				if ( target.Equals(link.SerializedDomainProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SerializationClassHasProperties link between a given SerializationClassand a SerializedDomainProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SerializationClassHasProperties GetLink( global::Tum.PDE.LanguageDSL.SerializationClass source, global::Tum.PDE.LanguageDSL.SerializedDomainProperty target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SerializationClassHasProperties>(source, global::Tum.PDE.LanguageDSL.SerializationClassHasProperties.SerializationClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SerializationClassHasProperties link in links )
			{
				if ( target.Equals(link.SerializedDomainProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship CreditsHasCreditItems
	/// Description for Tum.PDE.LanguageDSL.CreditsHasCreditItems
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("677d26fc-7c41-41ea-be43-b14598182255")]
	public partial class CreditsHasCreditItems : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CreditsHasCreditItems domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x677d26fc, 0x7c41, 0x41ea, 0xbe, 0x43, 0xb1, 0x45, 0x98, 0x18, 0x22, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CreditsHasCreditItems link in the same Partition as the given Credits
		/// </summary>
		/// <param name="source">Credits to use as the source of the relationship.</param>
		/// <param name="target">CreditItem to use as the target of the relationship.</param>
		public CreditsHasCreditItems(Credits source, CreditItem target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CreditsHasCreditItems.CreditsDomainRoleId, source), new DslModeling::RoleAssignment(CreditsHasCreditItems.CreditItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CreditsHasCreditItems(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CreditsHasCreditItems(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CreditsHasCreditItems(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CreditsHasCreditItems(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Credits domain role code
		
		/// <summary>
		/// Credits domain role Id.
		/// </summary>
		public static readonly global::System.Guid CreditsDomainRoleId = new global::System.Guid(0x734a93e0, 0x0d7b, 0x403f, 0x87, 0x32, 0x03, 0x53, 0x69, 0x8f, 0xd8, 0xed);
		
		/// <summary>
		/// DomainRole Credits
		/// Description for Tum.PDE.LanguageDSL.CreditsHasCreditItems.Credits
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems/Credits.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems/Credits.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CreditItems", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.CreditsHasCreditItems/Credits.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("734a93e0-0d7b-403f-8732-0353698fd8ed")]
		public virtual Credits Credits
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Credits)DslModeling::DomainRoleInfo.GetRolePlayer(this, CreditsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CreditsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Credits of a CreditItem
		/// <summary>
		/// Gets Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Credits GetCredits(CreditItem element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CreditItemDomainRoleId) as Credits;
		}
		
		/// <summary>
		/// Sets Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCredits(CreditItem element, Credits newCredits)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CreditItemDomainRoleId, newCredits);
		}
		#endregion
		#region CreditItem domain role code
		
		/// <summary>
		/// CreditItem domain role Id.
		/// </summary>
		public static readonly global::System.Guid CreditItemDomainRoleId = new global::System.Guid(0xb6c01631, 0xb5a1, 0x4e48, 0x99, 0x92, 0x2a, 0xb5, 0x95, 0xcf, 0x3c, 0xb9);
		
		/// <summary>
		/// DomainRole CreditItem
		/// Description for Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditItem
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems/CreditItem.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.CreditsHasCreditItems/CreditItem.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Credits", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.CreditsHasCreditItems/CreditItem.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b6c01631-b5a1-4e48-9992-2ab595cf3cb9")]
		public virtual CreditItem CreditItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CreditItem)DslModeling::DomainRoleInfo.GetRolePlayer(this, CreditItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CreditItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CreditItems of a Credits
		/// <summary>
		/// Gets a list of CreditItems.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CreditItem> GetCreditItems(Credits element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CreditItem>, CreditItem>(element, CreditsDomainRoleId);
		}
		#endregion
		#region Credits link accessor
		/// <summary>
		/// Get the list of CreditsHasCreditItems links to a Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> GetLinksToCreditItems ( global::Tum.PDE.LanguageDSL.Credits creditsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(creditsInstance, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditsDomainRoleId);
		}
		#endregion
		#region CreditItem link accessor
		/// <summary>
		/// Get the CreditsHasCreditItems link to a CreditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.CreditsHasCreditItems GetLinkToCredits (global::Tum.PDE.LanguageDSL.CreditItem creditItemInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(creditItemInstance, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CreditItem not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CreditsHasCreditItems instance accessors
		
		/// <summary>
		/// Get any CreditsHasCreditItems links between a given Credits and a CreditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> GetLinks( global::Tum.PDE.LanguageDSL.Credits source, global::Tum.PDE.LanguageDSL.CreditItem target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(source, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditsDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.CreditsHasCreditItems link in links )
			{
				if ( target.Equals(link.CreditItem) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CreditsHasCreditItems link between a given Creditsand a CreditItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.CreditsHasCreditItems GetLink( global::Tum.PDE.LanguageDSL.Credits source, global::Tum.PDE.LanguageDSL.CreditItem target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.CreditsHasCreditItems>(source, global::Tum.PDE.LanguageDSL.CreditsHasCreditItems.CreditsDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.CreditsHasCreditItems link in links )
			{
				if ( target.Equals(link.CreditItem) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasAdditionalInformation
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3da7c81b-2375-4ba0-9e87-090f3be7ee56")]
	public partial class MetaModelHasAdditionalInformation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasAdditionalInformation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3da7c81b, 0x2375, 0x4ba0, 0x9e, 0x87, 0x09, 0x0f, 0x3b, 0xe7, 0xee, 0x56);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasAdditionalInformation link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">AdditionalInformation to use as the target of the relationship.</param>
		public MetaModelHasAdditionalInformation(MetaModel source, AdditionalInformation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasAdditionalInformation.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasAdditionalInformation.AdditionalInformationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasAdditionalInformation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasAdditionalInformation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasAdditionalInformation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasAdditionalInformation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0x8b2a965c, 0x6143, 0x4602, 0xac, 0xff, 0xf5, 0x2f, 0x7f, 0x18, 0x8f, 0xf6);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AdditionalInformation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8b2a965c-6143-4602-acff-f52f7f188ff6")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a AdditionalInformation
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(AdditionalInformation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AdditionalInformationDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(AdditionalInformation element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AdditionalInformationDomainRoleId, newMetaModel);
		}
		#endregion
		#region AdditionalInformation domain role code
		
		/// <summary>
		/// AdditionalInformation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AdditionalInformationDomainRoleId = new global::System.Guid(0x62c119a6, 0x6331, 0x4b19, 0x97, 0x72, 0x53, 0xe0, 0x2e, 0xf1, 0xe8, 0xbe);
		
		/// <summary>
		/// DomainRole AdditionalInformation
		/// Description for
		/// Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.AdditionalInformation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/AdditionalInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/AdditionalInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation/AdditionalInformation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("62c119a6-6331-4b19-9772-53e02ef1e8be")]
		public virtual AdditionalInformation AdditionalInformation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AdditionalInformation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AdditionalInformationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AdditionalInformationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AdditionalInformation of a MetaModel
		/// <summary>
		/// Gets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AdditionalInformation GetAdditionalInformation(MetaModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaModelDomainRoleId) as AdditionalInformation;
		}
		
		/// <summary>
		/// Sets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAdditionalInformation(MetaModel element, AdditionalInformation newAdditionalInformation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaModelDomainRoleId, newAdditionalInformation);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the MetaModelHasAdditionalInformation link to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation GetLinkToAdditionalInformation (global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.MetaModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MetaModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AdditionalInformation link accessor
		/// <summary>
		/// Get the MetaModelHasAdditionalInformation link to a AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.AdditionalInformation additionalInformationInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(additionalInformationInstance, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.AdditionalInformationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AdditionalInformation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasAdditionalInformation instance accessors
		
		/// <summary>
		/// Get any MetaModelHasAdditionalInformation links between a given MetaModel and a AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.AdditionalInformation target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(source, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation link in links )
			{
				if ( target.Equals(link.AdditionalInformation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasAdditionalInformation link between a given MetaModeland a AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.AdditionalInformation target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation>(source, global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasAdditionalInformation link in links )
			{
				if ( target.Equals(link.AdditionalInformation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship AdditionalInformationHasCredits
	/// Description for Tum.PDE.LanguageDSL.AdditionalInformationHasCredits
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("91a91561-bd6d-4e90-a53e-4a09711db83f")]
	public partial class AdditionalInformationHasCredits : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AdditionalInformationHasCredits domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91a91561, 0xbd6d, 0x4e90, 0xa5, 0x3e, 0x4a, 0x09, 0x71, 0x1d, 0xb8, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AdditionalInformationHasCredits link in the same Partition as the given AdditionalInformation
		/// </summary>
		/// <param name="source">AdditionalInformation to use as the source of the relationship.</param>
		/// <param name="target">Credits to use as the target of the relationship.</param>
		public AdditionalInformationHasCredits(AdditionalInformation source, Credits target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AdditionalInformationHasCredits.AdditionalInformationDomainRoleId, source), new DslModeling::RoleAssignment(AdditionalInformationHasCredits.CreditsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AdditionalInformationHasCredits(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AdditionalInformationHasCredits(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AdditionalInformationHasCredits(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AdditionalInformationHasCredits(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AdditionalInformation domain role code
		
		/// <summary>
		/// AdditionalInformation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AdditionalInformationDomainRoleId = new global::System.Guid(0x8dc7dffd, 0x4477, 0x45ed, 0xad, 0xb7, 0x78, 0x13, 0x14, 0x25, 0xdd, 0xe6);
		
		/// <summary>
		/// DomainRole AdditionalInformation
		/// Description for
		/// Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.AdditionalInformation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/AdditionalInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/AdditionalInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Credits", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/AdditionalInformation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8dc7dffd-4477-45ed-adb7-78131425dde6")]
		public virtual AdditionalInformation AdditionalInformation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AdditionalInformation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AdditionalInformationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AdditionalInformationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AdditionalInformation of a Credits
		/// <summary>
		/// Gets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AdditionalInformation GetAdditionalInformation(Credits element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CreditsDomainRoleId) as AdditionalInformation;
		}
		
		/// <summary>
		/// Sets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAdditionalInformation(Credits element, AdditionalInformation newAdditionalInformation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CreditsDomainRoleId, newAdditionalInformation);
		}
		#endregion
		#region Credits domain role code
		
		/// <summary>
		/// Credits domain role Id.
		/// </summary>
		public static readonly global::System.Guid CreditsDomainRoleId = new global::System.Guid(0xad89471f, 0x22fc, 0x4b96, 0xa1, 0xee, 0x0d, 0xa5, 0x1e, 0x01, 0x86, 0xf2);
		
		/// <summary>
		/// DomainRole Credits
		/// Description for Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.Credits
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/Credits.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/Credits.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AdditionalInformation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AdditionalInformationHasCredits/Credits.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ad89471f-22fc-4b96-a1ee-0da51e0186f2")]
		public virtual Credits Credits
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Credits)DslModeling::DomainRoleInfo.GetRolePlayer(this, CreditsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CreditsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Credits of a AdditionalInformation
		/// <summary>
		/// Gets Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Credits GetCredits(AdditionalInformation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AdditionalInformationDomainRoleId) as Credits;
		}
		
		/// <summary>
		/// Sets Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCredits(AdditionalInformation element, Credits newCredits)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AdditionalInformationDomainRoleId, newCredits);
		}
		#endregion
		#region AdditionalInformation link accessor
		/// <summary>
		/// Get the AdditionalInformationHasCredits link to a AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits GetLinkToCredits (global::Tum.PDE.LanguageDSL.AdditionalInformation additionalInformationInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(additionalInformationInstance, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.AdditionalInformationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AdditionalInformation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Credits link accessor
		/// <summary>
		/// Get the AdditionalInformationHasCredits link to a Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits GetLinkToAdditionalInformation (global::Tum.PDE.LanguageDSL.Credits creditsInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(creditsInstance, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.CreditsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Credits not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AdditionalInformationHasCredits instance accessors
		
		/// <summary>
		/// Get any AdditionalInformationHasCredits links between a given AdditionalInformation and a Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> GetLinks( global::Tum.PDE.LanguageDSL.AdditionalInformation source, global::Tum.PDE.LanguageDSL.Credits target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(source, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.AdditionalInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits link in links )
			{
				if ( target.Equals(link.Credits) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AdditionalInformationHasCredits link between a given AdditionalInformationand a Credits.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits GetLink( global::Tum.PDE.LanguageDSL.AdditionalInformation source, global::Tum.PDE.LanguageDSL.Credits target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits>(source, global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits.AdditionalInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AdditionalInformationHasCredits link in links )
			{
				if ( target.Equals(link.Credits) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship AdditionalInformationHasFurtherInformation
	/// Description for Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1ac943d7-a449-4060-9eac-362093d051b1")]
	public partial class AdditionalInformationHasFurtherInformation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AdditionalInformationHasFurtherInformation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ac943d7, 0xa449, 0x4060, 0x9e, 0xac, 0x36, 0x20, 0x93, 0xd0, 0x51, 0xb1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AdditionalInformationHasFurtherInformation link in the same Partition as the given AdditionalInformation
		/// </summary>
		/// <param name="source">AdditionalInformation to use as the source of the relationship.</param>
		/// <param name="target">FurtherInformation to use as the target of the relationship.</param>
		public AdditionalInformationHasFurtherInformation(AdditionalInformation source, FurtherInformation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AdditionalInformationHasFurtherInformation.AdditionalInformationDomainRoleId, source), new DslModeling::RoleAssignment(AdditionalInformationHasFurtherInformation.FurtherInformationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AdditionalInformationHasFurtherInformation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AdditionalInformationHasFurtherInformation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AdditionalInformationHasFurtherInformation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AdditionalInformationHasFurtherInformation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AdditionalInformation domain role code
		
		/// <summary>
		/// AdditionalInformation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AdditionalInformationDomainRoleId = new global::System.Guid(0xbd969ac0, 0x67f2, 0x4f5e, 0xb3, 0x0b, 0x85, 0x5b, 0x46, 0xb7, 0x84, 0xe8);
		
		/// <summary>
		/// DomainRole AdditionalInformation
		/// Description for
		/// Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.AdditionalInformation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/AdditionalInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/AdditionalInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FurtherInformation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/AdditionalInformation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bd969ac0-67f2-4f5e-b30b-855b46b784e8")]
		public virtual AdditionalInformation AdditionalInformation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AdditionalInformation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AdditionalInformationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AdditionalInformationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AdditionalInformation of a FurtherInformation
		/// <summary>
		/// Gets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AdditionalInformation GetAdditionalInformation(FurtherInformation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FurtherInformationDomainRoleId) as AdditionalInformation;
		}
		
		/// <summary>
		/// Sets AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAdditionalInformation(FurtherInformation element, AdditionalInformation newAdditionalInformation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FurtherInformationDomainRoleId, newAdditionalInformation);
		}
		#endregion
		#region FurtherInformation domain role code
		
		/// <summary>
		/// FurtherInformation domain role Id.
		/// </summary>
		public static readonly global::System.Guid FurtherInformationDomainRoleId = new global::System.Guid(0x8d0151c4, 0x5f28, 0x4aa4, 0xa1, 0x74, 0xd2, 0x21, 0x48, 0x19, 0x6a, 0xb2);
		
		/// <summary>
		/// DomainRole FurtherInformation
		/// Description for
		/// Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.FurtherInformation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/FurtherInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/FurtherInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AdditionalInformation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation/FurtherInformation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d0151c4-5f28-4aa4-a174-d22148196ab2")]
		public virtual FurtherInformation FurtherInformation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FurtherInformation)DslModeling::DomainRoleInfo.GetRolePlayer(this, FurtherInformationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FurtherInformationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FurtherInformation of a AdditionalInformation
		/// <summary>
		/// Gets FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FurtherInformation GetFurtherInformation(AdditionalInformation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AdditionalInformationDomainRoleId) as FurtherInformation;
		}
		
		/// <summary>
		/// Sets FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFurtherInformation(AdditionalInformation element, FurtherInformation newFurtherInformation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AdditionalInformationDomainRoleId, newFurtherInformation);
		}
		#endregion
		#region AdditionalInformation link accessor
		/// <summary>
		/// Get the AdditionalInformationHasFurtherInformation link to a AdditionalInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation GetLinkToFurtherInformation (global::Tum.PDE.LanguageDSL.AdditionalInformation additionalInformationInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(additionalInformationInstance, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.AdditionalInformationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AdditionalInformation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FurtherInformation link accessor
		/// <summary>
		/// Get the AdditionalInformationHasFurtherInformation link to a FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation GetLinkToAdditionalInformation (global::Tum.PDE.LanguageDSL.FurtherInformation furtherInformationInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(furtherInformationInstance, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.FurtherInformationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FurtherInformation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AdditionalInformationHasFurtherInformation instance accessors
		
		/// <summary>
		/// Get any AdditionalInformationHasFurtherInformation links between a given AdditionalInformation and a FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> GetLinks( global::Tum.PDE.LanguageDSL.AdditionalInformation source, global::Tum.PDE.LanguageDSL.FurtherInformation target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(source, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.AdditionalInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation link in links )
			{
				if ( target.Equals(link.FurtherInformation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AdditionalInformationHasFurtherInformation link between a given AdditionalInformationand a FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation GetLink( global::Tum.PDE.LanguageDSL.AdditionalInformation source, global::Tum.PDE.LanguageDSL.FurtherInformation target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation>(source, global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation.AdditionalInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.AdditionalInformationHasFurtherInformation link in links )
			{
				if ( target.Equals(link.FurtherInformation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship FurtherInformationHasInformationItems
	/// Description for Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3016196e-1148-49a2-ae3b-7fa914efee32")]
	public partial class FurtherInformationHasInformationItems : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FurtherInformationHasInformationItems domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3016196e, 0x1148, 0x49a2, 0xae, 0x3b, 0x7f, 0xa9, 0x14, 0xef, 0xee, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FurtherInformationHasInformationItems link in the same Partition as the given FurtherInformation
		/// </summary>
		/// <param name="source">FurtherInformation to use as the source of the relationship.</param>
		/// <param name="target">InformationItem to use as the target of the relationship.</param>
		public FurtherInformationHasInformationItems(FurtherInformation source, InformationItem target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FurtherInformationHasInformationItems.FurtherInformationDomainRoleId, source), new DslModeling::RoleAssignment(FurtherInformationHasInformationItems.InformationItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FurtherInformationHasInformationItems(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FurtherInformationHasInformationItems(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FurtherInformationHasInformationItems(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FurtherInformationHasInformationItems(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FurtherInformation domain role code
		
		/// <summary>
		/// FurtherInformation domain role Id.
		/// </summary>
		public static readonly global::System.Guid FurtherInformationDomainRoleId = new global::System.Guid(0x582303b9, 0x41ec, 0x4142, 0xab, 0xf5, 0x97, 0x96, 0x89, 0xa2, 0x85, 0x14);
		
		/// <summary>
		/// DomainRole FurtherInformation
		/// Description for
		/// Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.FurtherInformation
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/FurtherInformation.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/FurtherInformation.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InformationItems", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/FurtherInformation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("582303b9-41ec-4142-abf5-979689a28514")]
		public virtual FurtherInformation FurtherInformation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FurtherInformation)DslModeling::DomainRoleInfo.GetRolePlayer(this, FurtherInformationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FurtherInformationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FurtherInformation of a InformationItem
		/// <summary>
		/// Gets FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FurtherInformation GetFurtherInformation(InformationItem element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InformationItemDomainRoleId) as FurtherInformation;
		}
		
		/// <summary>
		/// Sets FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFurtherInformation(InformationItem element, FurtherInformation newFurtherInformation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InformationItemDomainRoleId, newFurtherInformation);
		}
		#endregion
		#region InformationItem domain role code
		
		/// <summary>
		/// InformationItem domain role Id.
		/// </summary>
		public static readonly global::System.Guid InformationItemDomainRoleId = new global::System.Guid(0x5d437ace, 0x5bb1, 0x4cdf, 0xb6, 0x93, 0x4d, 0xb1, 0x89, 0xc4, 0xe4, 0x33);
		
		/// <summary>
		/// DomainRole InformationItem
		/// Description for
		/// Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.InformationItem
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/InformationItem.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/InformationItem.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FurtherInformation", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems/InformationItem.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5d437ace-5bb1-4cdf-b693-4db189c4e433")]
		public virtual InformationItem InformationItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InformationItem)DslModeling::DomainRoleInfo.GetRolePlayer(this, InformationItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InformationItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InformationItems of a FurtherInformation
		/// <summary>
		/// Gets a list of InformationItems.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InformationItem> GetInformationItems(FurtherInformation element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InformationItem>, InformationItem>(element, FurtherInformationDomainRoleId);
		}
		#endregion
		#region FurtherInformation link accessor
		/// <summary>
		/// Get the list of FurtherInformationHasInformationItems links to a FurtherInformation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> GetLinksToInformationItems ( global::Tum.PDE.LanguageDSL.FurtherInformation furtherInformationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(furtherInformationInstance, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.FurtherInformationDomainRoleId);
		}
		#endregion
		#region InformationItem link accessor
		/// <summary>
		/// Get the FurtherInformationHasInformationItems link to a InformationItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems GetLinkToFurtherInformation (global::Tum.PDE.LanguageDSL.InformationItem informationItemInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(informationItemInstance, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.InformationItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InformationItem not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FurtherInformationHasInformationItems instance accessors
		
		/// <summary>
		/// Get any FurtherInformationHasInformationItems links between a given FurtherInformation and a InformationItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> GetLinks( global::Tum.PDE.LanguageDSL.FurtherInformation source, global::Tum.PDE.LanguageDSL.InformationItem target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(source, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.FurtherInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems link in links )
			{
				if ( target.Equals(link.InformationItem) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FurtherInformationHasInformationItems link between a given FurtherInformationand a InformationItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems GetLink( global::Tum.PDE.LanguageDSL.FurtherInformation source, global::Tum.PDE.LanguageDSL.InformationItem target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems>(source, global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems.FurtherInformationDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.FurtherInformationHasInformationItems link in links )
			{
				if ( target.Equals(link.InformationItem) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasMetaModelLibraries
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7727aeab-b885-4792-b0e6-b6f816966a74")]
	public partial class MetaModelHasMetaModelLibraries : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasMetaModelLibraries domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7727aeab, 0xb885, 0x4792, 0xb0, 0xe6, 0xb6, 0xf8, 0x16, 0x96, 0x6a, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasMetaModelLibraries link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">MetaModelLibrary to use as the target of the relationship.</param>
		public MetaModelHasMetaModelLibraries(MetaModel source, MetaModelLibrary target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasMetaModelLibraries.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasMetaModelLibraries.MetaModelLibraryDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasMetaModelLibraries(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasMetaModelLibraries(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasMetaModelLibraries(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasMetaModelLibraries(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0xb6c40eab, 0x5fc5, 0x4812, 0x94, 0xbc, 0x56, 0x17, 0xa4, 0x49, 0x2b, 0x3b);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MetaModelLibraries", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b6c40eab-5fc5-4812-94bc-5617a4492b3b")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a MetaModelLibrary
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(MetaModelLibrary element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaModelLibraryDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(MetaModelLibrary element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaModelLibraryDomainRoleId, newMetaModel);
		}
		#endregion
		#region MetaModelLibrary domain role code
		
		/// <summary>
		/// MetaModelLibrary domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelLibraryDomainRoleId = new global::System.Guid(0x6f070745, 0xba9b, 0x4032, 0xb9, 0xe0, 0x22, 0x34, 0xe0, 0x09, 0xfb, 0x5e);
		
		/// <summary>
		/// DomainRole MetaModelLibrary
		/// Description for
		/// Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelLibrary
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModelLibrary.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModelLibrary.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries/MetaModelLibrary.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f070745-ba9b-4032-b9e0-2234e009fb5e")]
		public virtual MetaModelLibrary MetaModelLibrary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModelLibrary)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelLibraryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelLibraryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModelLibraries of a MetaModel
		/// <summary>
		/// Gets a list of MetaModelLibraries.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MetaModelLibrary> GetMetaModelLibraries(MetaModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MetaModelLibrary>, MetaModelLibrary>(element, MetaModelDomainRoleId);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the list of MetaModelHasMetaModelLibraries links to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> GetLinksToMetaModelLibraries ( global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelDomainRoleId);
		}
		#endregion
		#region MetaModelLibrary link accessor
		/// <summary>
		/// Get the MetaModelHasMetaModelLibraries link to a MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.MetaModelLibrary metaModelLibraryInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(metaModelLibraryInstance, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelLibraryDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MetaModelLibrary not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasMetaModelLibraries instance accessors
		
		/// <summary>
		/// Get any MetaModelHasMetaModelLibraries links between a given MetaModel and a MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.MetaModelLibrary target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(source, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries link in links )
			{
				if ( target.Equals(link.MetaModelLibrary) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasMetaModelLibraries link between a given MetaModeland a MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.MetaModelLibrary target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries>(source, global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasMetaModelLibraries link in links )
			{
				if ( target.Equals(link.MetaModelLibrary) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelLibraryHasImportedLibrary
	/// Description for Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c32907d1-1267-4245-a9b0-b65ee48b13ef")]
	public partial class MetaModelLibraryHasImportedLibrary : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelLibraryHasImportedLibrary domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc32907d1, 0x1267, 0x4245, 0xa9, 0xb0, 0xb6, 0x5e, 0xe4, 0x8b, 0x13, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelLibraryHasImportedLibrary link in the same Partition as the given MetaModelLibrary
		/// </summary>
		/// <param name="source">MetaModelLibrary to use as the source of the relationship.</param>
		/// <param name="target">BaseMetaModel to use as the target of the relationship.</param>
		public MetaModelLibraryHasImportedLibrary(MetaModelLibrary source, BaseMetaModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelLibraryHasImportedLibrary.MetaModelLibraryDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelLibraryHasImportedLibrary.BaseMetaModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelLibraryHasImportedLibrary(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelLibraryHasImportedLibrary(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelLibraryHasImportedLibrary(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelLibraryHasImportedLibrary(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModelLibrary domain role code
		
		/// <summary>
		/// MetaModelLibrary domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelLibraryDomainRoleId = new global::System.Guid(0xb0382a54, 0xc23c, 0x4752, 0x8b, 0x87, 0xfd, 0xdf, 0x7a, 0x35, 0xac, 0xf1);
		
		/// <summary>
		/// DomainRole MetaModelLibrary
		/// Description for
		/// Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.MetaModelLibrary
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/MetaModelLibrary.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/MetaModelLibrary.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImportedLibrary", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/MetaModelLibrary.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b0382a54-c23c-4752-8b87-fddf7a35acf1")]
		public virtual MetaModelLibrary MetaModelLibrary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModelLibrary)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelLibraryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelLibraryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModelLibrary of a BaseMetaModel
		/// <summary>
		/// Gets MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModelLibrary GetMetaModelLibrary(BaseMetaModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseMetaModelDomainRoleId) as MetaModelLibrary;
		}
		
		/// <summary>
		/// Sets MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModelLibrary(BaseMetaModel element, MetaModelLibrary newMetaModelLibrary)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseMetaModelDomainRoleId, newMetaModelLibrary);
		}
		#endregion
		#region BaseMetaModel domain role code
		
		/// <summary>
		/// BaseMetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseMetaModelDomainRoleId = new global::System.Guid(0xf88be592, 0x05ae, 0x42f0, 0xa7, 0x4f, 0xee, 0x8f, 0x46, 0xcf, 0xef, 0x61);
		
		/// <summary>
		/// DomainRole BaseMetaModel
		/// Description for
		/// Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.BaseMetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/BaseMetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/BaseMetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModelLibrary", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary/BaseMetaModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f88be592-05ae-42f0-a74f-ee8f46cfef61")]
		public virtual BaseMetaModel BaseMetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseMetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseMetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseMetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImportedLibrary of a MetaModelLibrary
		/// <summary>
		/// Gets ImportedLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BaseMetaModel GetImportedLibrary(MetaModelLibrary element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaModelLibraryDomainRoleId) as BaseMetaModel;
		}
		
		/// <summary>
		/// Sets ImportedLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImportedLibrary(MetaModelLibrary element, BaseMetaModel newBaseMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaModelLibraryDomainRoleId, newBaseMetaModel);
		}
		#endregion
		#region MetaModelLibrary link accessor
		/// <summary>
		/// Get the MetaModelLibraryHasImportedLibrary link to a MetaModelLibrary.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary GetLinkToImportedLibrary (global::Tum.PDE.LanguageDSL.MetaModelLibrary metaModelLibraryInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(metaModelLibraryInstance, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.MetaModelLibraryDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MetaModelLibrary not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BaseMetaModel link accessor
		/// <summary>
		/// Get the MetaModelLibraryHasImportedLibrary link to a BaseMetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary GetLinkToMetaModelLibrary (global::Tum.PDE.LanguageDSL.BaseMetaModel baseMetaModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(baseMetaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.BaseMetaModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BaseMetaModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelLibraryHasImportedLibrary instance accessors
		
		/// <summary>
		/// Get any MetaModelLibraryHasImportedLibrary links between a given MetaModelLibrary and a BaseMetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> GetLinks( global::Tum.PDE.LanguageDSL.MetaModelLibrary source, global::Tum.PDE.LanguageDSL.BaseMetaModel target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(source, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.MetaModelLibraryDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary link in links )
			{
				if ( target.Equals(link.BaseMetaModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelLibraryHasImportedLibrary link between a given MetaModelLibraryand a BaseMetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary GetLink( global::Tum.PDE.LanguageDSL.MetaModelLibrary source, global::Tum.PDE.LanguageDSL.BaseMetaModel target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary>(source, global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary.MetaModelLibraryDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelLibraryHasImportedLibrary link in links )
			{
				if ( target.Equals(link.BaseMetaModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ViewContextHasDomainModelTreeView
	/// Description for Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7fd950ed-9e0c-41ab-95bf-989256c80c2f")]
	public partial class ViewContextHasDomainModelTreeView : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewContextHasDomainModelTreeView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7fd950ed, 0x9e0c, 0x41ab, 0x95, 0xbf, 0x98, 0x92, 0x56, 0xc8, 0x0c, 0x2f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewContextHasDomainModelTreeView link in the same Partition as the given ViewContext
		/// </summary>
		/// <param name="source">ViewContext to use as the source of the relationship.</param>
		/// <param name="target">DomainModelTreeView to use as the target of the relationship.</param>
		public ViewContextHasDomainModelTreeView(ViewContext source, DomainModelTreeView target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewContextHasDomainModelTreeView.ViewContextDomainRoleId, source), new DslModeling::RoleAssignment(ViewContextHasDomainModelTreeView.DomainModelTreeViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextHasDomainModelTreeView(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextHasDomainModelTreeView(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextHasDomainModelTreeView(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextHasDomainModelTreeView(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewContext domain role code
		
		/// <summary>
		/// ViewContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewContextDomainRoleId = new global::System.Guid(0x3a17a0ea, 0x1899, 0x4faf, 0x82, 0x3c, 0xf3, 0xa2, 0xda, 0x13, 0x85, 0x7d);
		
		/// <summary>
		/// DomainRole ViewContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.ViewContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/ViewContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/ViewContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainModelTreeView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/ViewContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3a17a0ea-1899-4faf-823c-f3a2da13857d")]
		public virtual ViewContext ViewContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewContext of a DomainModelTreeView
		/// <summary>
		/// Gets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ViewContext GetViewContext(DomainModelTreeView element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainModelTreeViewDomainRoleId) as ViewContext;
		}
		
		/// <summary>
		/// Sets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetViewContext(DomainModelTreeView element, ViewContext newViewContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainModelTreeViewDomainRoleId, newViewContext);
		}
		#endregion
		#region DomainModelTreeView domain role code
		
		/// <summary>
		/// DomainModelTreeView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelTreeViewDomainRoleId = new global::System.Guid(0x8424ef42, 0x7d5b, 0x443f, 0x9d, 0x9c, 0xb2, 0x45, 0x3c, 0x8f, 0x95, 0x6c);
		
		/// <summary>
		/// DomainRole DomainModelTreeView
		/// Description for
		/// Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainModelTreeView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/DomainModelTreeView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/DomainModelTreeView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ViewContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView/DomainModelTreeView.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8424ef42-7d5b-443f-9d9c-b2453c8f956c")]
		public virtual DomainModelTreeView DomainModelTreeView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainModelTreeView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainModelTreeViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainModelTreeViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainModelTreeView of a ViewContext
		/// <summary>
		/// Gets DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainModelTreeView GetDomainModelTreeView(ViewContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewContextDomainRoleId) as DomainModelTreeView;
		}
		
		/// <summary>
		/// Sets DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainModelTreeView(ViewContext element, DomainModelTreeView newDomainModelTreeView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewContextDomainRoleId, newDomainModelTreeView);
		}
		#endregion
		#region ViewContext link accessor
		/// <summary>
		/// Get the ViewContextHasDomainModelTreeView link to a ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView GetLinkToDomainModelTreeView (global::Tum.PDE.LanguageDSL.ViewContext viewContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(viewContextInstance, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.ViewContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainModelTreeView link accessor
		/// <summary>
		/// Get the ViewContextHasDomainModelTreeView link to a DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView GetLinkToViewContext (global::Tum.PDE.LanguageDSL.DomainModelTreeView domainModelTreeViewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(domainModelTreeViewInstance, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.DomainModelTreeViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainModelTreeView not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewContextHasDomainModelTreeView instance accessors
		
		/// <summary>
		/// Get any ViewContextHasDomainModelTreeView links between a given ViewContext and a DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> GetLinks( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.DomainModelTreeView target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(source, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView link in links )
			{
				if ( target.Equals(link.DomainModelTreeView) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewContextHasDomainModelTreeView link between a given ViewContextand a DomainModelTreeView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView GetLink( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.DomainModelTreeView target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView>(source, global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextHasDomainModelTreeView link in links )
			{
				if ( target.Equals(link.DomainModelTreeView) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ViewContextHasDiagramView
	/// Description for Tum.PDE.LanguageDSL.ViewContextHasDiagramView
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7875a5f1-3d5e-4563-84c5-98bdec387c92")]
	public partial class ViewContextHasDiagramView : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewContextHasDiagramView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7875a5f1, 0x3d5e, 0x4563, 0x84, 0xc5, 0x98, 0xbd, 0xec, 0x38, 0x7c, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewContextHasDiagramView link in the same Partition as the given ViewContext
		/// </summary>
		/// <param name="source">ViewContext to use as the source of the relationship.</param>
		/// <param name="target">DiagramView to use as the target of the relationship.</param>
		public ViewContextHasDiagramView(ViewContext source, DiagramView target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewContextHasDiagramView.ViewContextDomainRoleId, source), new DslModeling::RoleAssignment(ViewContextHasDiagramView.DiagramViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextHasDiagramView(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextHasDiagramView(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextHasDiagramView(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextHasDiagramView(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewContext domain role code
		
		/// <summary>
		/// ViewContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewContextDomainRoleId = new global::System.Guid(0xe4e0ced1, 0x5e0f, 0x403c, 0x91, 0x1c, 0x84, 0x29, 0x7c, 0x23, 0x42, 0x43);
		
		/// <summary>
		/// DomainRole ViewContext
		/// Description for Tum.PDE.LanguageDSL.ViewContextHasDiagramView.ViewContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView/ViewContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView/ViewContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DiagramView", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextHasDiagramView/ViewContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e4e0ced1-5e0f-403c-911c-84297c234243")]
		public virtual ViewContext ViewContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewContext of a DiagramView
		/// <summary>
		/// Gets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ViewContext GetViewContext(DiagramView element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramViewDomainRoleId) as ViewContext;
		}
		
		/// <summary>
		/// Sets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetViewContext(DiagramView element, ViewContext newViewContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramViewDomainRoleId, newViewContext);
		}
		#endregion
		#region DiagramView domain role code
		
		/// <summary>
		/// DiagramView domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramViewDomainRoleId = new global::System.Guid(0x0e373c0d, 0x98c2, 0x4fff, 0xa7, 0x82, 0x28, 0x29, 0xe5, 0x52, 0xf4, 0x84);
		
		/// <summary>
		/// DomainRole DiagramView
		/// Description for Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DiagramView
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView/DiagramView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextHasDiagramView/DiagramView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ViewContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextHasDiagramView/DiagramView.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0e373c0d-98c2-4fff-a782-2829e552f484")]
		public virtual DiagramView DiagramView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramView)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramView of a ViewContext
		/// <summary>
		/// Gets DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DiagramView GetDiagramView(ViewContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewContextDomainRoleId) as DiagramView;
		}
		
		/// <summary>
		/// Sets DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDiagramView(ViewContext element, DiagramView newDiagramView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewContextDomainRoleId, newDiagramView);
		}
		#endregion
		#region ViewContext link accessor
		/// <summary>
		/// Get the ViewContextHasDiagramView link to a ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView GetLinkToDiagramView (global::Tum.PDE.LanguageDSL.ViewContext viewContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(viewContextInstance, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.ViewContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DiagramView link accessor
		/// <summary>
		/// Get the ViewContextHasDiagramView link to a DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView GetLinkToViewContext (global::Tum.PDE.LanguageDSL.DiagramView diagramViewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(diagramViewInstance, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.DiagramViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramView not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewContextHasDiagramView instance accessors
		
		/// <summary>
		/// Get any ViewContextHasDiagramView links between a given ViewContext and a DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> GetLinks( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.DiagramView target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(source, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView link in links )
			{
				if ( target.Equals(link.DiagramView) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewContextHasDiagramView link between a given ViewContextand a DiagramView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView GetLink( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.DiagramView target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView>(source, global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextHasDiagramView link in links )
			{
				if ( target.Equals(link.DiagramView) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship LibraryModelContextHasClasses
	/// Description for Tum.PDE.LanguageDSL.LibraryModelContextHasClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("27bb056a-065c-4f7b-a6bd-15d0b3f70404")]
	public partial class LibraryModelContextHasClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LibraryModelContextHasClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27bb056a, 0x065c, 0x4f7b, 0xa6, 0xbd, 0x15, 0xd0, 0xb3, 0xf7, 0x04, 0x04);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LibraryModelContextHasClasses link in the same Partition as the given LibraryModelContext
		/// </summary>
		/// <param name="source">LibraryModelContext to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public LibraryModelContextHasClasses(LibraryModelContext source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LibraryModelContextHasClasses.LibraryModelContextDomainRoleId, source), new DslModeling::RoleAssignment(LibraryModelContextHasClasses.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LibraryModelContext domain role code
		
		/// <summary>
		/// LibraryModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibraryModelContextDomainRoleId = new global::System.Guid(0xb6a7eb19, 0xd1c0, 0x4cf9, 0x8b, 0x3d, 0xf3, 0x1e, 0x97, 0x99, 0xfc, 0x8f);
		
		/// <summary>
		/// DomainRole LibraryModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.LibraryModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/LibraryModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/LibraryModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/LibraryModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b6a7eb19-d1c0-4cf9-8b3d-f31e9799fc8f")]
		public virtual LibraryModelContext LibraryModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LibraryModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibraryModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibraryModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContext of a DomainClass
		/// <summary>
		/// Gets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LibraryModelContext GetModelContext(DomainClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainClassDomainRoleId) as LibraryModelContext;
		}
		
		/// <summary>
		/// Sets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelContext(DomainClass element, LibraryModelContext newLibraryModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainClassDomainRoleId, newLibraryModelContext);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0x4153ad18, 0xce62, 0x488b, 0x8b, 0x0c, 0x8e, 0xb7, 0xa6, 0x4f, 0xd6, 0x42);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasClasses/DomainClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4153ad18-ce62-488b-8b0c-8eb7a64fd642")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classes of a LibraryModelContext
		/// <summary>
		/// Gets a list of Classes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainClass> GetClasses(LibraryModelContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainClass>, DomainClass>(element, LibraryModelContextDomainRoleId);
		}
		#endregion
		#region LibraryModelContext link accessor
		/// <summary>
		/// Get the list of LibraryModelContextHasClasses links to a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> GetLinksToClasses ( global::Tum.PDE.LanguageDSL.LibraryModelContext libraryModelContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(libraryModelContextInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.LibraryModelContextDomainRoleId);
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the LibraryModelContextHasClasses link to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses GetLinkToModelContext (global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(domainClassInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.DomainClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LibraryModelContextHasClasses instance accessors
		
		/// <summary>
		/// Get any LibraryModelContextHasClasses links between a given LibraryModelContext and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> GetLinks( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LibraryModelContextHasClasses link between a given LibraryModelContextand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses GetLink( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasClasses link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship LibraryModelContextHasDiagramClasses
	/// Description for Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("46bf94fb-8ead-43d3-9ab8-868bcba8916d")]
	public partial class LibraryModelContextHasDiagramClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LibraryModelContextHasDiagramClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46bf94fb, 0x8ead, 0x43d3, 0x9a, 0xb8, 0x86, 0x8b, 0xcb, 0xa8, 0x91, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LibraryModelContextHasDiagramClasses link in the same Partition as the given LibraryModelContext
		/// </summary>
		/// <param name="source">LibraryModelContext to use as the source of the relationship.</param>
		/// <param name="target">DiagramClass to use as the target of the relationship.</param>
		public LibraryModelContextHasDiagramClasses(LibraryModelContext source, DiagramClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LibraryModelContextHasDiagramClasses.LibraryModelContextDomainRoleId, source), new DslModeling::RoleAssignment(LibraryModelContextHasDiagramClasses.DiagramClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasDiagramClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasDiagramClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasDiagramClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasDiagramClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LibraryModelContext domain role code
		
		/// <summary>
		/// LibraryModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibraryModelContextDomainRoleId = new global::System.Guid(0x4d17db4d, 0xb055, 0x4e00, 0xac, 0xd6, 0x84, 0x18, 0x7f, 0xbb, 0x20, 0x39);
		
		/// <summary>
		/// DomainRole LibraryModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.LibraryModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/LibraryModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/LibraryModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DiagramClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/LibraryModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4d17db4d-b055-4e00-acd6-84187fbb2039")]
		public virtual LibraryModelContext LibraryModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LibraryModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibraryModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibraryModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContext of a DiagramClass
		/// <summary>
		/// Gets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LibraryModelContext GetModelContext(DiagramClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DiagramClassDomainRoleId) as LibraryModelContext;
		}
		
		/// <summary>
		/// Sets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelContext(DiagramClass element, LibraryModelContext newLibraryModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DiagramClassDomainRoleId, newLibraryModelContext);
		}
		#endregion
		#region DiagramClass domain role code
		
		/// <summary>
		/// DiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassDomainRoleId = new global::System.Guid(0x55de9127, 0xb40a, 0x403b, 0xa2, 0x58, 0x92, 0xbe, 0x69, 0xfa, 0xa8, 0xf1);
		
		/// <summary>
		/// DomainRole DiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/DiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/DiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses/DiagramClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("55de9127-b40a-403b-a258-92be69faa8f1")]
		public virtual DiagramClass DiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DiagramClasses of a LibraryModelContext
		/// <summary>
		/// Gets a list of DiagramClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DiagramClass> GetDiagramClasses(LibraryModelContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DiagramClass>, DiagramClass>(element, LibraryModelContextDomainRoleId);
		}
		#endregion
		#region LibraryModelContext link accessor
		/// <summary>
		/// Get the list of LibraryModelContextHasDiagramClasses links to a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> GetLinksToDiagramClasses ( global::Tum.PDE.LanguageDSL.LibraryModelContext libraryModelContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(libraryModelContextInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.LibraryModelContextDomainRoleId);
		}
		#endregion
		#region DiagramClass link accessor
		/// <summary>
		/// Get the LibraryModelContextHasDiagramClasses link to a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses GetLinkToModelContext (global::Tum.PDE.LanguageDSL.DiagramClass diagramClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(diagramClassInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.DiagramClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DiagramClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LibraryModelContextHasDiagramClasses instance accessors
		
		/// <summary>
		/// Get any LibraryModelContextHasDiagramClasses links between a given LibraryModelContext and a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> GetLinks( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LibraryModelContextHasDiagramClasses link between a given LibraryModelContextand a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses GetLink( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship LibraryModelContextHasRelationships
	/// Description for Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d15a3055-2894-44ac-8044-d25cc5daae7e")]
	public partial class LibraryModelContextHasRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LibraryModelContextHasRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd15a3055, 0x2894, 0x44ac, 0x80, 0x44, 0xd2, 0x5c, 0xc5, 0xda, 0xae, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LibraryModelContextHasRelationships link in the same Partition as the given LibraryModelContext
		/// </summary>
		/// <param name="source">LibraryModelContext to use as the source of the relationship.</param>
		/// <param name="target">DomainRelationship to use as the target of the relationship.</param>
		public LibraryModelContextHasRelationships(LibraryModelContext source, DomainRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LibraryModelContextHasRelationships.LibraryModelContextDomainRoleId, source), new DslModeling::RoleAssignment(LibraryModelContextHasRelationships.DomainRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LibraryModelContext domain role code
		
		/// <summary>
		/// LibraryModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibraryModelContextDomainRoleId = new global::System.Guid(0xd48222ad, 0x572b, 0x4dc8, 0xba, 0xae, 0x6b, 0xf2, 0xcf, 0x3a, 0x90, 0x55);
		
		/// <summary>
		/// DomainRole LibraryModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.LibraryModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/LibraryModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/LibraryModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Relationships", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/LibraryModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d48222ad-572b-4dc8-baae-6bf2cf3a9055")]
		public virtual LibraryModelContext LibraryModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LibraryModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibraryModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibraryModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContext of a DomainRelationship
		/// <summary>
		/// Gets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LibraryModelContext GetModelContext(DomainRelationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainRelationshipDomainRoleId) as LibraryModelContext;
		}
		
		/// <summary>
		/// Sets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelContext(DomainRelationship element, LibraryModelContext newLibraryModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainRelationshipDomainRoleId, newLibraryModelContext);
		}
		#endregion
		#region DomainRelationship domain role code
		
		/// <summary>
		/// DomainRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRelationshipDomainRoleId = new global::System.Guid(0x2835ca5e, 0x9653, 0x4bdb, 0xb5, 0x60, 0xe6, 0x1d, 0x39, 0xc9, 0x4a, 0x16);
		
		/// <summary>
		/// DomainRole DomainRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/DomainRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/DomainRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships/DomainRelationship.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2835ca5e-9653-4bdb-b560-e61d39c94a16")]
		public virtual DomainRelationship DomainRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationships of a LibraryModelContext
		/// <summary>
		/// Gets a list of Relationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRelationship> GetRelationships(LibraryModelContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRelationship>, DomainRelationship>(element, LibraryModelContextDomainRoleId);
		}
		#endregion
		#region LibraryModelContext link accessor
		/// <summary>
		/// Get the list of LibraryModelContextHasRelationships links to a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> GetLinksToRelationships ( global::Tum.PDE.LanguageDSL.LibraryModelContext libraryModelContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(libraryModelContextInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.LibraryModelContextDomainRoleId);
		}
		#endregion
		#region DomainRelationship link accessor
		/// <summary>
		/// Get the LibraryModelContextHasRelationships link to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships GetLinkToModelContext (global::Tum.PDE.LanguageDSL.DomainRelationship domainRelationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(domainRelationshipInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.DomainRelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainRelationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LibraryModelContextHasRelationships instance accessors
		
		/// <summary>
		/// Get any LibraryModelContextHasRelationships links between a given LibraryModelContext and a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> GetLinks( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LibraryModelContextHasRelationships link between a given LibraryModelContextand a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships GetLink( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasRelationships link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ViewContextReferencesModelContext
	/// Description for Tum.PDE.LanguageDSL.ViewContextReferencesModelContext
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("876f2d00-ec5c-4c42-83f0-9e4112f190b2")]
	public partial class ViewContextReferencesModelContext : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewContextReferencesModelContext domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x876f2d00, 0xec5c, 0x4c42, 0x83, 0xf0, 0x9e, 0x41, 0x12, 0xf1, 0x90, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewContextReferencesModelContext link in the same Partition as the given ViewContext
		/// </summary>
		/// <param name="source">ViewContext to use as the source of the relationship.</param>
		/// <param name="target">LibraryModelContext to use as the target of the relationship.</param>
		public ViewContextReferencesModelContext(ViewContext source, LibraryModelContext target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewContextReferencesModelContext.ViewContextDomainRoleId, source), new DslModeling::RoleAssignment(ViewContextReferencesModelContext.LibraryModelContextDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextReferencesModelContext(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextReferencesModelContext(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewContextReferencesModelContext(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewContextReferencesModelContext(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewContext domain role code
		
		/// <summary>
		/// ViewContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewContextDomainRoleId = new global::System.Guid(0x8459a243, 0x37ac, 0x45d9, 0x8d, 0xc0, 0x78, 0xb0, 0x82, 0x1f, 0xf0, 0xc2);
		
		/// <summary>
		/// DomainRole ViewContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.ViewContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/ViewContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/ViewContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/ViewContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8459a243-37ac-45d9-8dc0-78b0821ff0c2")]
		public virtual ViewContext ViewContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewContext of a LibraryModelContext
		/// <summary>
		/// Gets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ViewContext GetViewContext(LibraryModelContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LibraryModelContextDomainRoleId) as ViewContext;
		}
		
		/// <summary>
		/// Sets ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetViewContext(LibraryModelContext element, ViewContext newViewContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LibraryModelContextDomainRoleId, newViewContext);
		}
		#endregion
		#region LibraryModelContext domain role code
		
		/// <summary>
		/// LibraryModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibraryModelContextDomainRoleId = new global::System.Guid(0x847f79a8, 0xcd65, 0x44d0, 0xb4, 0x7a, 0xa9, 0x55, 0x6e, 0x39, 0x70, 0x16);
		
		/// <summary>
		/// DomainRole LibraryModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.LibraryModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/LibraryModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/LibraryModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ViewContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewContextReferencesModelContext/LibraryModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("847f79a8-cd65-44d0-b47a-a9556e397016")]
		public virtual LibraryModelContext LibraryModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LibraryModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibraryModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibraryModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContext of a ViewContext
		/// <summary>
		/// Gets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LibraryModelContext GetModelContext(ViewContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewContextDomainRoleId) as LibraryModelContext;
		}
		
		/// <summary>
		/// Sets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelContext(ViewContext element, LibraryModelContext newLibraryModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewContextDomainRoleId, newLibraryModelContext);
		}
		#endregion
		#region ViewContext link accessor
		/// <summary>
		/// Get the ViewContextReferencesModelContext link to a ViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext GetLinkToModelContext (global::Tum.PDE.LanguageDSL.ViewContext viewContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext>(viewContextInstance, global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.ViewContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LibraryModelContext link accessor
		/// <summary>
		/// Get the ViewContextReferencesModelContext link to a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext GetLinkToViewContext (global::Tum.PDE.LanguageDSL.LibraryModelContext libraryModelContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext>(libraryModelContextInstance, global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.LibraryModelContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LibraryModelContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewContextReferencesModelContext instance accessors
		
		/// <summary>
		/// Get any ViewContextReferencesModelContext links between a given ViewContext and a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> GetLinks( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.LibraryModelContext target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext>(source, global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext link in links )
			{
				if ( target.Equals(link.LibraryModelContext) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewContextReferencesModelContext link between a given ViewContextand a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext GetLink( global::Tum.PDE.LanguageDSL.ViewContext source, global::Tum.PDE.LanguageDSL.LibraryModelContext target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext>(source, global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext.ViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewContextReferencesModelContext link in links )
			{
				if ( target.Equals(link.LibraryModelContext) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasView
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasView
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasView.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasView.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9cb643d7-f381-4391-a9c0-4001511b683c")]
	public partial class MetaModelHasView : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9cb643d7, 0xf381, 0x4391, 0xa9, 0xc0, 0x40, 0x01, 0x51, 0x1b, 0x68, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasView link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public MetaModelHasView(MetaModel source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasView.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasView.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasView(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasView(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasView(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasView(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0xb84c70e9, 0x1bcd, 0x4e42, 0xaa, 0xa9, 0x75, 0xa5, 0x27, 0x76, 0xaa, 0xd9);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasView.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasView/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasView/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "View", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasView/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b84c70e9-1bcd-4e42-aaa9-75a52776aad9")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a View
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(View element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newMetaModel);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xbe3738db, 0x5734, 0x4b0f, 0x86, 0x17, 0xd9, 0xaa, 0x78, 0xdc, 0xd5, 0xd0);
		
		/// <summary>
		/// DomainRole View
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasView.View
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasView/View.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasView/View.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasView/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("be3738db-5734-4b0f-8617-d9aa78dcd5d0")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a MetaModel
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(MetaModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaModelDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(MetaModel element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaModelDomainRoleId, newView);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the MetaModelHasView link to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasView GetLinkToView (global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasView.MetaModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MetaModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the MetaModelHasView link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasView GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(viewInstance, global::Tum.PDE.LanguageDSL.MetaModelHasView.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasView instance accessors
		
		/// <summary>
		/// Get any MetaModelHasView links between a given MetaModel and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasView> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.View target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasView> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasView>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(source, global::Tum.PDE.LanguageDSL.MetaModelHasView.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasView link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasView link between a given MetaModeland a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasView GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.View target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasView>(source, global::Tum.PDE.LanguageDSL.MetaModelHasView.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasView link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainTypeReferencesPropertyGridEditor
	/// Description for Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e1408dcb-7bc7-4a28-a311-3875b80adf63")]
	public partial class DomainTypeReferencesPropertyGridEditor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainTypeReferencesPropertyGridEditor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1408dcb, 0x7bc7, 0x4a28, 0xa3, 0x11, 0x38, 0x75, 0xb8, 0x0a, 0xdf, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainTypeReferencesPropertyGridEditor link in the same Partition as the given DomainType
		/// </summary>
		/// <param name="source">DomainType to use as the source of the relationship.</param>
		/// <param name="target">PropertyGridEditor to use as the target of the relationship.</param>
		public DomainTypeReferencesPropertyGridEditor(DomainType source, PropertyGridEditor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId, source), new DslModeling::RoleAssignment(DomainTypeReferencesPropertyGridEditor.PropertyGridEditorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainTypeReferencesPropertyGridEditor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainTypeReferencesPropertyGridEditor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainTypeReferencesPropertyGridEditor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainTypeReferencesPropertyGridEditor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainType domain role code
		
		/// <summary>
		/// DomainType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainTypeDomainRoleId = new global::System.Guid(0xb2028587, 0x5bee, 0x466f, 0xa7, 0xcb, 0x6e, 0xa9, 0x8b, 0x95, 0x30, 0xfd);
		
		/// <summary>
		/// DomainRole DomainType
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainType
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/DomainType.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/DomainType.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/DomainType.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PropertyGridEditor", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/DomainType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b2028587-5bee-466f-a7cb-6ea98b9530fd")]
		public virtual DomainType DomainType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainTypes of a PropertyGridEditor
		/// <summary>
		/// Gets a list of DomainTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainType> GetDomainTypes(PropertyGridEditor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainType>, DomainType>(element, PropertyGridEditorDomainRoleId);
		}
		#endregion
		#region PropertyGridEditor domain role code
		
		/// <summary>
		/// PropertyGridEditor domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyGridEditorDomainRoleId = new global::System.Guid(0xbba934f0, 0x372f, 0x4fad, 0xbb, 0xc8, 0xb2, 0x2e, 0xb1, 0x88, 0xaa, 0xf4);
		
		/// <summary>
		/// DomainRole PropertyGridEditor
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.PropertyGridEditor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/PropertyGridEditor.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/PropertyGridEditor.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainTypes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor/PropertyGridEditor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bba934f0-372f-4fad-bbc8-b22eb188aaf4")]
		public virtual PropertyGridEditor PropertyGridEditor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyGridEditor)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyGridEditorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyGridEditorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PropertyGridEditor of a DomainType
		/// <summary>
		/// Gets PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertyGridEditor GetPropertyGridEditor(DomainType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainTypeDomainRoleId) as PropertyGridEditor;
		}
		
		/// <summary>
		/// Sets PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPropertyGridEditor(DomainType element, PropertyGridEditor newPropertyGridEditor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainTypeDomainRoleId, newPropertyGridEditor);
		}
		#endregion
		#region DomainType link accessor
		/// <summary>
		/// Get the DomainTypeReferencesPropertyGridEditor link to a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor GetLinkToPropertyGridEditor (global::Tum.PDE.LanguageDSL.DomainType domainTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(domainTypeInstance, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertyGridEditor link accessor
		/// <summary>
		/// Get the list of DomainTypeReferencesPropertyGridEditor links to a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> GetLinksToDomainTypes ( global::Tum.PDE.LanguageDSL.PropertyGridEditor propertyGridEditorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(propertyGridEditorInstance, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.PropertyGridEditorDomainRoleId);
		}
		#endregion
		#region DomainTypeReferencesPropertyGridEditor instance accessors
		
		/// <summary>
		/// Get any DomainTypeReferencesPropertyGridEditor links between a given DomainType and a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> GetLinks( global::Tum.PDE.LanguageDSL.DomainType source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(source, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainTypeReferencesPropertyGridEditor link between a given DomainTypeand a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor GetLink( global::Tum.PDE.LanguageDSL.DomainType source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(source, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DomainRoleReferencesCustomPropertyGridEditor
	/// Description for Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("43b775db-68d1-4b58-8e5d-6a5c5bef451f")]
	public partial class DomainRoleReferencesCustomPropertyGridEditor : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainRoleReferencesCustomPropertyGridEditor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43b775db, 0x68d1, 0x4b58, 0x8e, 0x5d, 0x6a, 0x5c, 0x5b, 0xef, 0x45, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainRoleReferencesCustomPropertyGridEditor link in the same Partition as the given DomainRole
		/// </summary>
		/// <param name="source">DomainRole to use as the source of the relationship.</param>
		/// <param name="target">PropertyGridEditor to use as the target of the relationship.</param>
		public DomainRoleReferencesCustomPropertyGridEditor(DomainRole source, PropertyGridEditor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainRoleReferencesCustomPropertyGridEditor.DomainRoleDomainRoleId, source), new DslModeling::RoleAssignment(DomainRoleReferencesCustomPropertyGridEditor.PropertyGridEditorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesCustomPropertyGridEditor(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesCustomPropertyGridEditor(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainRoleReferencesCustomPropertyGridEditor(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainRoleReferencesCustomPropertyGridEditor(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainRole domain role code
		
		/// <summary>
		/// DomainRole domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRoleDomainRoleId = new global::System.Guid(0xafb8ced2, 0xf3cf, 0x4f71, 0x8f, 0x32, 0xdf, 0xf5, 0xa0, 0x9a, 0x4b, 0x6e);
		
		/// <summary>
		/// DomainRole DomainRole
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainRole
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/DomainRole.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/DomainRole.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/DomainRole.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CustomPropertyGridEditor", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/DomainRole.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("afb8ced2-f3cf-4f71-8f32-dff5a09a4b6e")]
		public virtual DomainRole DomainRole
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRole)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRoleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRoleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainRoles of a PropertyGridEditor
		/// <summary>
		/// Gets a list of DomainRoles.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainRole> GetDomainRoles(PropertyGridEditor element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainRole>, DomainRole>(element, PropertyGridEditorDomainRoleId);
		}
		#endregion
		#region PropertyGridEditor domain role code
		
		/// <summary>
		/// PropertyGridEditor domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyGridEditorDomainRoleId = new global::System.Guid(0x521f383a, 0x5e18, 0x4ec8, 0xa2, 0x63, 0x1e, 0xf9, 0xaa, 0x7b, 0x0a, 0xe8);
		
		/// <summary>
		/// DomainRole PropertyGridEditor
		/// Description for
		/// Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.PropertyGridEditor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/PropertyGridEditor.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/PropertyGridEditor.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainRoles", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor/PropertyGridEditor.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("521f383a-5e18-4ec8-a263-1ef9aa7b0ae8")]
		public virtual PropertyGridEditor PropertyGridEditor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyGridEditor)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyGridEditorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyGridEditorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CustomPropertyGridEditor of a DomainRole
		/// <summary>
		/// Gets CustomPropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertyGridEditor GetCustomPropertyGridEditor(DomainRole element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainRoleDomainRoleId) as PropertyGridEditor;
		}
		
		/// <summary>
		/// Sets CustomPropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCustomPropertyGridEditor(DomainRole element, PropertyGridEditor newPropertyGridEditor)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainRoleDomainRoleId, newPropertyGridEditor);
		}
		#endregion
		#region DomainRole link accessor
		/// <summary>
		/// Get the DomainRoleReferencesCustomPropertyGridEditor link to a DomainRole.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor GetLinkToCustomPropertyGridEditor (global::Tum.PDE.LanguageDSL.DomainRole domainRoleInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor>(domainRoleInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainRoleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainRole not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertyGridEditor link accessor
		/// <summary>
		/// Get the list of DomainRoleReferencesCustomPropertyGridEditor links to a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> GetLinksToDomainRoles ( global::Tum.PDE.LanguageDSL.PropertyGridEditor propertyGridEditorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor>(propertyGridEditorInstance, global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.PropertyGridEditorDomainRoleId);
		}
		#endregion
		#region DomainRoleReferencesCustomPropertyGridEditor instance accessors
		
		/// <summary>
		/// Get any DomainRoleReferencesCustomPropertyGridEditor links between a given DomainRole and a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> GetLinks( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainRoleReferencesCustomPropertyGridEditor link between a given DomainRoleand a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor GetLink( global::Tum.PDE.LanguageDSL.DomainRole source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor>(source, global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor.DomainRoleDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DomainRoleReferencesCustomPropertyGridEditor link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasModelContexts
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasModelContexts
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("14bafde8-b8ff-4c90-90a5-9ef7be6b18ee")]
	public partial class MetaModelHasModelContexts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasModelContexts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14bafde8, 0xb8ff, 0x4c90, 0x90, 0xa5, 0x9e, 0xf7, 0xbe, 0x6b, 0x18, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasModelContexts link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">BaseModelContext to use as the target of the relationship.</param>
		public MetaModelHasModelContexts(MetaModel source, BaseModelContext target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasModelContexts.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasModelContexts.BaseModelContextDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasModelContexts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasModelContexts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasModelContexts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasModelContexts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0x3516563e, 0x6b5c, 0x434e, 0x9b, 0x14, 0xed, 0x57, 0xce, 0x04, 0x9a, 0xee);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasModelContexts.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelContexts", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasModelContexts/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3516563e-6b5c-434e-9b14-ed57ce049aee")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a BaseModelContext
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(BaseModelContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseModelContextDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(BaseModelContext element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseModelContextDomainRoleId, newMetaModel);
		}
		#endregion
		#region BaseModelContext domain role code
		
		/// <summary>
		/// BaseModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseModelContextDomainRoleId = new global::System.Guid(0x9de0ada7, 0xbaac, 0x4086, 0xa5, 0xb6, 0xf1, 0x70, 0xf4, 0x26, 0x0c, 0xd2);
		
		/// <summary>
		/// DomainRole BaseModelContext
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasModelContexts.BaseModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts/BaseModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasModelContexts/BaseModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasModelContexts/BaseModelContext.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9de0ada7-baac-4086-a5b6-f170f4260cd2")]
		public virtual BaseModelContext BaseModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContexts of a MetaModel
		/// <summary>
		/// Gets a list of ModelContexts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseModelContext> GetModelContexts(MetaModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseModelContext>, BaseModelContext>(element, MetaModelDomainRoleId);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the list of MetaModelHasModelContexts links to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> GetLinksToModelContexts ( global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.MetaModelDomainRoleId);
		}
		#endregion
		#region BaseModelContext link accessor
		/// <summary>
		/// Get the MetaModelHasModelContexts link to a BaseModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.BaseModelContext baseModelContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(baseModelContextInstance, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.BaseModelContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BaseModelContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasModelContexts instance accessors
		
		/// <summary>
		/// Get any MetaModelHasModelContexts links between a given MetaModel and a BaseModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.BaseModelContext target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(source, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts link in links )
			{
				if ( target.Equals(link.BaseModelContext) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasModelContexts link between a given MetaModeland a BaseModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.BaseModelContext target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts>(source, global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasModelContexts link in links )
			{
				if ( target.Equals(link.BaseModelContext) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ViewHasViewContexts
	/// Description for Tum.PDE.LanguageDSL.ViewHasViewContexts
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasViewContexts.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasViewContexts.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("54a89a90-4d7e-42a6-94f1-916761910520")]
	public partial class ViewHasViewContexts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasViewContexts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54a89a90, 0x4d7e, 0x42a6, 0x94, 0xf1, 0x91, 0x67, 0x61, 0x91, 0x05, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasViewContexts link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">BaseViewContext to use as the target of the relationship.</param>
		public ViewHasViewContexts(View source, BaseViewContext target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasViewContexts.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasViewContexts.BaseViewContextDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasViewContexts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasViewContexts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasViewContexts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasViewContexts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x162677c8, 0x6a55, 0x4685, 0xa4, 0xde, 0xe8, 0xd1, 0xbc, 0xb6, 0x5c, 0xdd);
		
		/// <summary>
		/// DomainRole View
		/// Description for Tum.PDE.LanguageDSL.ViewHasViewContexts.View
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasViewContexts/View.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasViewContexts/View.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ViewContexts", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewHasViewContexts/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("162677c8-6a55-4685-a4de-e8d1bcb65cdd")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a BaseViewContext
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(BaseViewContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BaseViewContextDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(BaseViewContext element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BaseViewContextDomainRoleId, newView);
		}
		#endregion
		#region BaseViewContext domain role code
		
		/// <summary>
		/// BaseViewContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseViewContextDomainRoleId = new global::System.Guid(0x24af819a, 0xef09, 0x4807, 0xbc, 0x88, 0x49, 0xd4, 0x47, 0x1c, 0xd9, 0xe8);
		
		/// <summary>
		/// DomainRole BaseViewContext
		/// Description for Tum.PDE.LanguageDSL.ViewHasViewContexts.BaseViewContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasViewContexts/BaseViewContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasViewContexts/BaseViewContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewHasViewContexts/BaseViewContext.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("24af819a-ef09-4807-bc88-49d4471cd9e8")]
		public virtual BaseViewContext BaseViewContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseViewContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseViewContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseViewContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewContexts of a View
		/// <summary>
		/// Gets a list of ViewContexts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseViewContext> GetViewContexts(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseViewContext>, BaseViewContext>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasViewContexts links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> GetLinksToViewContexts ( global::Tum.PDE.LanguageDSL.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(viewInstance, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.ViewDomainRoleId);
		}
		#endregion
		#region BaseViewContext link accessor
		/// <summary>
		/// Get the ViewHasViewContexts link to a BaseViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewHasViewContexts GetLinkToView (global::Tum.PDE.LanguageDSL.BaseViewContext baseViewContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(baseViewContextInstance, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.BaseViewContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BaseViewContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasViewContexts instance accessors
		
		/// <summary>
		/// Get any ViewHasViewContexts links between a given View and a BaseViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> GetLinks( global::Tum.PDE.LanguageDSL.View source, global::Tum.PDE.LanguageDSL.BaseViewContext target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(source, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.ViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewHasViewContexts link in links )
			{
				if ( target.Equals(link.BaseViewContext) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasViewContexts link between a given Viewand a BaseViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewHasViewContexts GetLink( global::Tum.PDE.LanguageDSL.View source, global::Tum.PDE.LanguageDSL.BaseViewContext target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasViewContexts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasViewContexts>(source, global::Tum.PDE.LanguageDSL.ViewHasViewContexts.ViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewHasViewContexts link in links )
			{
				if ( target.Equals(link.BaseViewContext) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ExternViewContextReferencesExternModelContext
	/// Description for
	/// Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8d54dc55-b1cf-4056-a902-2b4b41e40882")]
	public partial class ExternViewContextReferencesExternModelContext : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternViewContextReferencesExternModelContext domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8d54dc55, 0xb1cf, 0x4056, 0xa9, 0x02, 0x2b, 0x4b, 0x41, 0xe4, 0x08, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternViewContextReferencesExternModelContext link in the same Partition as the given ExternViewContext
		/// </summary>
		/// <param name="source">ExternViewContext to use as the source of the relationship.</param>
		/// <param name="target">ExternModelContext to use as the target of the relationship.</param>
		public ExternViewContextReferencesExternModelContext(ExternViewContext source, ExternModelContext target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternViewContextReferencesExternModelContext.ExternViewContextDomainRoleId, source), new DslModeling::RoleAssignment(ExternViewContextReferencesExternModelContext.ExternModelContextDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternViewContextReferencesExternModelContext(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternViewContextReferencesExternModelContext(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternViewContextReferencesExternModelContext(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternViewContextReferencesExternModelContext(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExternViewContext domain role code
		
		/// <summary>
		/// ExternViewContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternViewContextDomainRoleId = new global::System.Guid(0xf2410fc8, 0xc7f3, 0x4dcb, 0xac, 0xc2, 0x2d, 0x08, 0xb2, 0xff, 0x03, 0xde);
		
		/// <summary>
		/// DomainRole ExternViewContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternViewContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternViewContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternViewContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExternModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternViewContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f2410fc8-c7f3-4dcb-acc2-2d08b2ff03de")]
		public virtual ExternViewContext ExternViewContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternViewContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternViewContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternViewContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternViewContext of a ExternModelContext
		/// <summary>
		/// Gets ExternViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternViewContext GetExternViewContext(ExternModelContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExternModelContextDomainRoleId) as ExternViewContext;
		}
		
		/// <summary>
		/// Sets ExternViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExternViewContext(ExternModelContext element, ExternViewContext newExternViewContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExternModelContextDomainRoleId, newExternViewContext);
		}
		#endregion
		#region ExternModelContext domain role code
		
		/// <summary>
		/// ExternModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternModelContextDomainRoleId = new global::System.Guid(0x708b5f77, 0x1789, 0x4436, 0x8d, 0x0f, 0xe3, 0x42, 0xf1, 0x7f, 0xf2, 0xe7);
		
		/// <summary>
		/// DomainRole ExternModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExternViewContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext/ExternModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("708b5f77-1789-4436-8d0f-e342f17ff2e7")]
		public virtual ExternModelContext ExternModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternModelContext of a ExternViewContext
		/// <summary>
		/// Gets ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternModelContext GetExternModelContext(ExternViewContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExternViewContextDomainRoleId) as ExternModelContext;
		}
		
		/// <summary>
		/// Sets ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExternModelContext(ExternViewContext element, ExternModelContext newExternModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExternViewContextDomainRoleId, newExternModelContext);
		}
		#endregion
		#region ExternViewContext link accessor
		/// <summary>
		/// Get the ExternViewContextReferencesExternModelContext link to a ExternViewContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext GetLinkToExternModelContext (global::Tum.PDE.LanguageDSL.ExternViewContext externViewContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext>(externViewContextInstance, global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternViewContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExternViewContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExternModelContext link accessor
		/// <summary>
		/// Get the ExternViewContextReferencesExternModelContext link to a ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext GetLinkToExternViewContext (global::Tum.PDE.LanguageDSL.ExternModelContext externModelContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext>(externModelContextInstance, global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternModelContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExternModelContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExternViewContextReferencesExternModelContext instance accessors
		
		/// <summary>
		/// Get any ExternViewContextReferencesExternModelContext links between a given ExternViewContext and a ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> GetLinks( global::Tum.PDE.LanguageDSL.ExternViewContext source, global::Tum.PDE.LanguageDSL.ExternModelContext target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext>(source, global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext link in links )
			{
				if ( target.Equals(link.ExternModelContext) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternViewContextReferencesExternModelContext link between a given ExternViewContextand a ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext GetLink( global::Tum.PDE.LanguageDSL.ExternViewContext source, global::Tum.PDE.LanguageDSL.ExternModelContext target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext>(source, global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext.ExternViewContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ExternViewContextReferencesExternModelContext link in links )
			{
				if ( target.Equals(link.ExternModelContext) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship LibraryModelContextHasSerializationModel
	/// Description for Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("36dd1517-3a1d-400d-860f-001f29eaefcd")]
	public partial class LibraryModelContextHasSerializationModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LibraryModelContextHasSerializationModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x36dd1517, 0x3a1d, 0x400d, 0x86, 0x0f, 0x00, 0x1f, 0x29, 0xea, 0xef, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LibraryModelContextHasSerializationModel link in the same Partition as the given LibraryModelContext
		/// </summary>
		/// <param name="source">LibraryModelContext to use as the source of the relationship.</param>
		/// <param name="target">SerializationModel to use as the target of the relationship.</param>
		public LibraryModelContextHasSerializationModel(LibraryModelContext source, SerializationModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LibraryModelContextHasSerializationModel.LibraryModelContextDomainRoleId, source), new DslModeling::RoleAssignment(LibraryModelContextHasSerializationModel.SerializationModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasSerializationModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasSerializationModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LibraryModelContextHasSerializationModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LibraryModelContextHasSerializationModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LibraryModelContext domain role code
		
		/// <summary>
		/// LibraryModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibraryModelContextDomainRoleId = new global::System.Guid(0x8e4274df, 0x2039, 0x4dcd, 0x86, 0xc1, 0x34, 0x37, 0x70, 0x73, 0xef, 0xab);
		
		/// <summary>
		/// DomainRole LibraryModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.LibraryModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/LibraryModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/LibraryModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SerializationModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/LibraryModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8e4274df-2039-4dcd-86c1-34377073efab")]
		public virtual LibraryModelContext LibraryModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LibraryModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibraryModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibraryModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LibraryModelContext of a SerializationModel
		/// <summary>
		/// Gets LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LibraryModelContext GetLibraryModelContext(SerializationModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SerializationModelDomainRoleId) as LibraryModelContext;
		}
		
		/// <summary>
		/// Sets LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLibraryModelContext(SerializationModel element, LibraryModelContext newLibraryModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SerializationModelDomainRoleId, newLibraryModelContext);
		}
		#endregion
		#region SerializationModel domain role code
		
		/// <summary>
		/// SerializationModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid SerializationModelDomainRoleId = new global::System.Guid(0xa99854cf, 0xf7f0, 0x487e, 0xaa, 0xc7, 0x5f, 0xae, 0xdd, 0x18, 0xaa, 0x74);
		
		/// <summary>
		/// DomainRole SerializationModel
		/// Description for
		/// Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.SerializationModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/SerializationModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/SerializationModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LibraryModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel/SerializationModel.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a99854cf-f7f0-487e-aac7-5faedd18aa74")]
		public virtual SerializationModel SerializationModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SerializationModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SerializationModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SerializationModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SerializationModel of a LibraryModelContext
		/// <summary>
		/// Gets SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SerializationModel GetSerializationModel(LibraryModelContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LibraryModelContextDomainRoleId) as SerializationModel;
		}
		
		/// <summary>
		/// Sets SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSerializationModel(LibraryModelContext element, SerializationModel newSerializationModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LibraryModelContextDomainRoleId, newSerializationModel);
		}
		#endregion
		#region LibraryModelContext link accessor
		/// <summary>
		/// Get the LibraryModelContextHasSerializationModel link to a LibraryModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel GetLinkToSerializationModel (global::Tum.PDE.LanguageDSL.LibraryModelContext libraryModelContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(libraryModelContextInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.LibraryModelContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LibraryModelContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SerializationModel link accessor
		/// <summary>
		/// Get the LibraryModelContextHasSerializationModel link to a SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel GetLinkToLibraryModelContext (global::Tum.PDE.LanguageDSL.SerializationModel serializationModelInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(serializationModelInstance, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.SerializationModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SerializationModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LibraryModelContextHasSerializationModel instance accessors
		
		/// <summary>
		/// Get any LibraryModelContextHasSerializationModel links between a given LibraryModelContext and a SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> GetLinks( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.SerializationModel target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel link in links )
			{
				if ( target.Equals(link.SerializationModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LibraryModelContextHasSerializationModel link between a given LibraryModelContextand a SerializationModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel GetLink( global::Tum.PDE.LanguageDSL.LibraryModelContext source, global::Tum.PDE.LanguageDSL.SerializationModel target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel>(source, global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel.LibraryModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.LibraryModelContextHasSerializationModel link in links )
			{
				if ( target.Equals(link.SerializationModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship MetaModelHasPropertyGridEditors
	/// Description for Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b2c08e43-3d44-4cb1-8595-90973c5df655")]
	public partial class MetaModelHasPropertyGridEditors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MetaModelHasPropertyGridEditors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb2c08e43, 0x3d44, 0x4cb1, 0x85, 0x95, 0x90, 0x97, 0x3c, 0x5d, 0xf6, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MetaModelHasPropertyGridEditors link in the same Partition as the given MetaModel
		/// </summary>
		/// <param name="source">MetaModel to use as the source of the relationship.</param>
		/// <param name="target">PropertyGridEditor to use as the target of the relationship.</param>
		public MetaModelHasPropertyGridEditors(MetaModel source, PropertyGridEditor target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MetaModelHasPropertyGridEditors.MetaModelDomainRoleId, source), new DslModeling::RoleAssignment(MetaModelHasPropertyGridEditors.PropertyGridEditorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasPropertyGridEditors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasPropertyGridEditors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MetaModelHasPropertyGridEditors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MetaModelHasPropertyGridEditors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MetaModel domain role code
		
		/// <summary>
		/// MetaModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaModelDomainRoleId = new global::System.Guid(0xbf1b2138, 0xf6e6, 0x4035, 0xac, 0x7a, 0x24, 0x7d, 0xf9, 0x92, 0xa7, 0x2c);
		
		/// <summary>
		/// DomainRole MetaModel
		/// Description for Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.MetaModel
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/MetaModel.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/MetaModel.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PropertyGridEditors", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/MetaModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf1b2138-f6e6-4035-ac7a-247df992a72c")]
		public virtual MetaModel MetaModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MetaModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MetaModel of a PropertyGridEditor
		/// <summary>
		/// Gets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MetaModel GetMetaModel(PropertyGridEditor element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyGridEditorDomainRoleId) as MetaModel;
		}
		
		/// <summary>
		/// Sets MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMetaModel(PropertyGridEditor element, MetaModel newMetaModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyGridEditorDomainRoleId, newMetaModel);
		}
		#endregion
		#region PropertyGridEditor domain role code
		
		/// <summary>
		/// PropertyGridEditor domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyGridEditorDomainRoleId = new global::System.Guid(0xb34e3af0, 0x9c30, 0x40d8, 0xa3, 0x4c, 0xc5, 0x85, 0xf9, 0x80, 0x8d, 0xf0);
		
		/// <summary>
		/// DomainRole PropertyGridEditor
		/// Description for
		/// Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.PropertyGridEditor
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/PropertyGridEditor.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/PropertyGridEditor.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MetaModel", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors/PropertyGridEditor.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b34e3af0-9c30-40d8-a34c-c585f9808df0")]
		public virtual PropertyGridEditor PropertyGridEditor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyGridEditor)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyGridEditorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyGridEditorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PropertyGridEditors of a MetaModel
		/// <summary>
		/// Gets a list of PropertyGridEditors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PropertyGridEditor> GetPropertyGridEditors(MetaModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertyGridEditor>, PropertyGridEditor>(element, MetaModelDomainRoleId);
		}
		#endregion
		#region MetaModel link accessor
		/// <summary>
		/// Get the list of MetaModelHasPropertyGridEditors links to a MetaModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> GetLinksToPropertyGridEditors ( global::Tum.PDE.LanguageDSL.MetaModel metaModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(metaModelInstance, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.MetaModelDomainRoleId);
		}
		#endregion
		#region PropertyGridEditor link accessor
		/// <summary>
		/// Get the MetaModelHasPropertyGridEditors link to a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors GetLinkToMetaModel (global::Tum.PDE.LanguageDSL.PropertyGridEditor propertyGridEditorInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(propertyGridEditorInstance, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.PropertyGridEditorDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertyGridEditor not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MetaModelHasPropertyGridEditors instance accessors
		
		/// <summary>
		/// Get any MetaModelHasPropertyGridEditors links between a given MetaModel and a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> GetLinks( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(source, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MetaModelHasPropertyGridEditors link between a given MetaModeland a PropertyGridEditor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors GetLink( global::Tum.PDE.LanguageDSL.MetaModel source, global::Tum.PDE.LanguageDSL.PropertyGridEditor target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors>(source, global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors.MetaModelDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.MetaModelHasPropertyGridEditors link in links )
			{
				if ( target.Equals(link.PropertyGridEditor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ViewHasModelTree
	/// Description for Tum.PDE.LanguageDSL.ViewHasModelTree
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasModelTree.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasModelTree.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7dd20091-a9d4-4224-a113-006f8fe92f54")]
	public partial class ViewHasModelTree : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasModelTree domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dd20091, 0xa9d4, 0x4224, 0xa1, 0x13, 0x00, 0x6f, 0x8f, 0xe9, 0x2f, 0x54);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasModelTree link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">ModelTree to use as the target of the relationship.</param>
		public ViewHasModelTree(View source, ModelTree target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasModelTree.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasModelTree.ModelTreeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasModelTree(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasModelTree(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasModelTree(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasModelTree(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x6ec00ac0, 0x50d5, 0x4ddc, 0xb5, 0xf4, 0x0e, 0xeb, 0x3c, 0xdf, 0x37, 0x0a);
		
		/// <summary>
		/// DomainRole View
		/// Description for Tum.PDE.LanguageDSL.ViewHasModelTree.View
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasModelTree/View.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasModelTree/View.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelTree", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewHasModelTree/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6ec00ac0-50d5-4ddc-b5f4-0eeb3cdf370a")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a ModelTree
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(ModelTree element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTreeDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(ModelTree element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTreeDomainRoleId, newView);
		}
		#endregion
		#region ModelTree domain role code
		
		/// <summary>
		/// ModelTree domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTreeDomainRoleId = new global::System.Guid(0x74075136, 0x1ed2, 0x4e0a, 0xb6, 0xbe, 0xba, 0x49, 0xa7, 0x79, 0x96, 0x78);
		
		/// <summary>
		/// DomainRole ModelTree
		/// Description for Tum.PDE.LanguageDSL.ViewHasModelTree.ModelTree
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ViewHasModelTree/ModelTree.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ViewHasModelTree/ModelTree.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ViewHasModelTree/ModelTree.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74075136-1ed2-4e0a-b6be-ba49a7799678")]
		public virtual ModelTree ModelTree
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelTree)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTreeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTreeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelTree of a View
		/// <summary>
		/// Gets ModelTree.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelTree GetModelTree(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as ModelTree;
		}
		
		/// <summary>
		/// Sets ModelTree.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelTree(View element, ModelTree newModelTree)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newModelTree);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the ViewHasModelTree link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewHasModelTree GetLinkToModelTree (global::Tum.PDE.LanguageDSL.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(viewInstance, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTree link accessor
		/// <summary>
		/// Get the ViewHasModelTree link to a ModelTree.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewHasModelTree GetLinkToView (global::Tum.PDE.LanguageDSL.ModelTree modelTreeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(modelTreeInstance, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ModelTreeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelTree not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasModelTree instance accessors
		
		/// <summary>
		/// Get any ViewHasModelTree links between a given View and a ModelTree.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ViewHasModelTree> GetLinks( global::Tum.PDE.LanguageDSL.View source, global::Tum.PDE.LanguageDSL.ModelTree target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewHasModelTree> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ViewHasModelTree>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(source, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewHasModelTree link in links )
			{
				if ( target.Equals(link.ModelTree) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasModelTree link between a given Viewand a ModelTree.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ViewHasModelTree GetLink( global::Tum.PDE.LanguageDSL.View source, global::Tum.PDE.LanguageDSL.ModelTree target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ViewHasModelTree> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ViewHasModelTree>(source, global::Tum.PDE.LanguageDSL.ViewHasModelTree.ViewDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ViewHasModelTree link in links )
			{
				if ( target.Equals(link.ModelTree) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ExternModelContextReferencesModelContext
	/// Description for Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4dd60ab1-1d48-4f77-9b9b-9b7d1e16637c")]
	public partial class ExternModelContextReferencesModelContext : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternModelContextReferencesModelContext domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4dd60ab1, 0x1d48, 0x4f77, 0x9b, 0x9b, 0x9b, 0x7d, 0x1e, 0x16, 0x63, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternModelContextReferencesModelContext link in the same Partition as the given ExternModelContext
		/// </summary>
		/// <param name="source">ExternModelContext to use as the source of the relationship.</param>
		/// <param name="target">ModelContext to use as the target of the relationship.</param>
		public ExternModelContextReferencesModelContext(ExternModelContext source, ModelContext target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId, source), new DslModeling::RoleAssignment(ExternModelContextReferencesModelContext.ModelContextDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternModelContextReferencesModelContext(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternModelContextReferencesModelContext(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternModelContextReferencesModelContext(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternModelContextReferencesModelContext(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExternModelContext domain role code
		
		/// <summary>
		/// ExternModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternModelContextDomainRoleId = new global::System.Guid(0x68d0a394, 0x9efd, 0x408c, 0xb0, 0x7f, 0x4a, 0xae, 0xb0, 0xa0, 0x5e, 0x29);
		
		/// <summary>
		/// DomainRole ExternModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ExternModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ExternModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelContext", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ExternModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("68d0a394-9efd-408c-b07f-4aaeb0a05e29")]
		public virtual ExternModelContext ExternModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternModelContexts of a ModelContext
		/// <summary>
		/// Gets a list of ExternModelContexts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExternModelContext> GetExternModelContexts(ModelContext element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExternModelContext>, ExternModelContext>(element, ModelContextDomainRoleId);
		}
		#endregion
		#region ModelContext domain role code
		
		/// <summary>
		/// ModelContext domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelContextDomainRoleId = new global::System.Guid(0x4af7d02a, 0xcdca, 0x4949, 0xa8, 0xcb, 0x89, 0xfb, 0x18, 0x0b, 0xd7, 0x83);
		
		/// <summary>
		/// DomainRole ModelContext
		/// Description for
		/// Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ModelContext
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ModelContext.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ModelContext.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExternModelContexts", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext/ModelContext.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4af7d02a-cdca-4949-a8cb-89fb180bd783")]
		public virtual ModelContext ModelContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelContext)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelContextDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelContextDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelContext of a ExternModelContext
		/// <summary>
		/// Gets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelContext GetModelContext(ExternModelContext element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExternModelContextDomainRoleId) as ModelContext;
		}
		
		/// <summary>
		/// Sets ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelContext(ExternModelContext element, ModelContext newModelContext)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExternModelContextDomainRoleId, newModelContext);
		}
		#endregion
		#region ExternModelContext link accessor
		/// <summary>
		/// Get the ExternModelContextReferencesModelContext link to a ExternModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext GetLinkToModelContext (global::Tum.PDE.LanguageDSL.ExternModelContext externModelContextInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(externModelContextInstance, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExternModelContext not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelContext link accessor
		/// <summary>
		/// Get the list of ExternModelContextReferencesModelContext links to a ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> GetLinksToExternModelContexts ( global::Tum.PDE.LanguageDSL.ModelContext modelContextInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(modelContextInstance, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ModelContextDomainRoleId);
		}
		#endregion
		#region ExternModelContextReferencesModelContext instance accessors
		
		/// <summary>
		/// Get any ExternModelContextReferencesModelContext links between a given ExternModelContext and a ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> GetLinks( global::Tum.PDE.LanguageDSL.ExternModelContext source, global::Tum.PDE.LanguageDSL.ModelContext target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(source, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext link in links )
			{
				if ( target.Equals(link.ModelContext) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternModelContextReferencesModelContext link between a given ExternModelContextand a ModelContext.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext GetLink( global::Tum.PDE.LanguageDSL.ExternModelContext source, global::Tum.PDE.LanguageDSL.ModelContext target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(source, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext link in links )
			{
				if ( target.Equals(link.ModelContext) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DesignerDiagramClassReferencesImportedDiagramClasses
	/// Description for
	/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("62c2e1f2-e1b4-476d-9b03-bfc5fac65b1b")]
	public partial class DesignerDiagramClassReferencesImportedDiagramClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignerDiagramClassReferencesImportedDiagramClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62c2e1f2, 0xe1b4, 0x476d, 0x9b, 0x03, 0xbf, 0xc5, 0xfa, 0xc6, 0x5b, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignerDiagramClassReferencesImportedDiagramClasses link in the same Partition as the given DesignerDiagramClass
		/// </summary>
		/// <param name="source">DesignerDiagramClass to use as the source of the relationship.</param>
		/// <param name="target">DiagramClass to use as the target of the relationship.</param>
		public DesignerDiagramClassReferencesImportedDiagramClasses(DesignerDiagramClass source, DiagramClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignerDiagramClassReferencesImportedDiagramClasses.DesignerDiagramClassDomainRoleId, source), new DslModeling::RoleAssignment(DesignerDiagramClassReferencesImportedDiagramClasses.DiagramClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignerDiagramClassReferencesImportedDiagramClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignerDiagramClassReferencesImportedDiagramClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignerDiagramClassReferencesImportedDiagramClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignerDiagramClassReferencesImportedDiagramClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DesignerDiagramClass domain role code
		
		/// <summary>
		/// DesignerDiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignerDiagramClassDomainRoleId = new global::System.Guid(0x3b69df8a, 0x9162, 0x4f3c, 0xb2, 0xb8, 0xcd, 0xdf, 0xfa, 0x5c, 0xf8, 0x4d);
		
		/// <summary>
		/// DomainRole DesignerDiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DesignerDiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DesignerDiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DesignerDiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ImportedDiagramClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DesignerDiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b69df8a-9162-4f3c-b2b8-cddffa5cf84d")]
		public virtual DesignerDiagramClass DesignerDiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DesignerDiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignerDiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignerDiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedDiagramClasses of a DiagramClass
		/// <summary>
		/// Gets a list of IncludedDiagramClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DesignerDiagramClass> GetIncludedDiagramClasses(DiagramClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DesignerDiagramClass>, DesignerDiagramClass>(element, DiagramClassDomainRoleId);
		}
		#endregion
		#region DiagramClass domain role code
		
		/// <summary>
		/// DiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassDomainRoleId = new global::System.Guid(0xb8e5cd87, 0x7ba8, 0x462e, 0xbc, 0xf5, 0xb9, 0xfc, 0x59, 0x32, 0x89, 0xec);
		
		/// <summary>
		/// DomainRole DiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IncludedDiagramClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses/DiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b8e5cd87-7ba8-462e-bcf5-b9fc593289ec")]
		public virtual DiagramClass DiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ImportedDiagramClasses of a DesignerDiagramClass
		/// <summary>
		/// Gets a list of ImportedDiagramClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DiagramClass> GetImportedDiagramClasses(DesignerDiagramClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DiagramClass>, DiagramClass>(element, DesignerDiagramClassDomainRoleId);
		}
		#endregion
		#region DesignerDiagramClass link accessor
		/// <summary>
		/// Get the list of DesignerDiagramClassReferencesImportedDiagramClasses links to a DesignerDiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> GetLinksToImportedDiagramClasses ( global::Tum.PDE.LanguageDSL.DesignerDiagramClass designerDiagramClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses>(designerDiagramClassInstance, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DesignerDiagramClassDomainRoleId);
		}
		#endregion
		#region DiagramClass link accessor
		/// <summary>
		/// Get the list of DesignerDiagramClassReferencesImportedDiagramClasses links to a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> GetLinksToIncludedDiagramClasses ( global::Tum.PDE.LanguageDSL.DiagramClass diagramClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses>(diagramClassInstance, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DiagramClassDomainRoleId);
		}
		#endregion
		#region DesignerDiagramClassReferencesImportedDiagramClasses instance accessors
		
		/// <summary>
		/// Get any DesignerDiagramClassReferencesImportedDiagramClasses links between a given DesignerDiagramClass and a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> GetLinks( global::Tum.PDE.LanguageDSL.DesignerDiagramClass source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses>(source, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DesignerDiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignerDiagramClassReferencesImportedDiagramClasses link between a given DesignerDiagramClassand a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses GetLink( global::Tum.PDE.LanguageDSL.DesignerDiagramClass source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses>(source, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses.DesignerDiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesImportedDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ShapeClassReferencesBaseShape
	/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("592b2aae-3563-4d9d-ad2b-4fb24a538ca5")]
	public partial class ShapeClassReferencesBaseShape : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShapeClassReferencesBaseShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x592b2aae, 0x3563, 0x4d9d, 0xad, 0x2b, 0x4f, 0xb2, 0x4a, 0x53, 0x8c, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShapeClassReferencesBaseShape link in the same Partition as the given ShapeClass
		/// </summary>
		/// <param name="source">ShapeClass to use as the source of the relationship.</param>
		/// <param name="target">ShapeClass to use as the target of the relationship.</param>
		public ShapeClassReferencesBaseShape(ShapeClass source, ShapeClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShapeClassReferencesBaseShape.DerivedShapeDomainRoleId, source), new DslModeling::RoleAssignment(ShapeClassReferencesBaseShape.BaseShapeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesBaseShape(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesBaseShape(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShapeClassReferencesBaseShape(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShapeClassReferencesBaseShape(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DerivedShape domain role code
		
		/// <summary>
		/// DerivedShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid DerivedShapeDomainRoleId = new global::System.Guid(0x154c3e0d, 0xe89e, 0x4771, 0x9e, 0xc2, 0x0b, 0xdc, 0xf3, 0xd4, 0x5a, 0x11);
		
		/// <summary>
		/// DomainRole DerivedShape
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DerivedShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/DerivedShape.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/DerivedShape.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/DerivedShape.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BaseShape", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/DerivedShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("154c3e0d-e89e-4771-9ec2-0bdcf3d45a11")]
		public virtual ShapeClass DerivedShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DerivedShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DerivedShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DerivedShapes of a ShapeClass
		/// <summary>
		/// Gets a list of DerivedShapes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShapeClass> GetDerivedShapes(ShapeClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShapeClass>, ShapeClass>(element, BaseShapeDomainRoleId);
		}
		#endregion
		#region BaseShape domain role code
		
		/// <summary>
		/// BaseShape domain role Id.
		/// </summary>
		public static readonly global::System.Guid BaseShapeDomainRoleId = new global::System.Guid(0x56b4849e, 0xb7a9, 0x46e9, 0x91, 0x7b, 0x2c, 0x4c, 0x0d, 0x98, 0x70, 0xb1);
		
		/// <summary>
		/// DomainRole BaseShape
		/// Description for Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.BaseShape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/BaseShape.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/BaseShape.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DerivedShapes", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape/BaseShape.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("56b4849e-b7a9-46e9-917b-2c4c0d9870b1")]
		public virtual ShapeClass BaseShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BaseShapeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BaseShapeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseShape of a ShapeClass
		/// <summary>
		/// Gets BaseShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShapeClass GetBaseShape(ShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DerivedShapeDomainRoleId) as ShapeClass;
		}
		
		/// <summary>
		/// Sets BaseShape.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseShape(ShapeClass element, ShapeClass newBaseShape)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DerivedShapeDomainRoleId, newBaseShape);
		}
		#endregion
		#region DerivedShape link accessor
		/// <summary>
		/// Get the ShapeClassReferencesBaseShape link to a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape GetLinkToBaseShape (global::Tum.PDE.LanguageDSL.ShapeClass derivedShapeInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape>(derivedShapeInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DerivedShapeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DerivedShape not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BaseShape link accessor
		/// <summary>
		/// Get the list of ShapeClassReferencesBaseShape links to a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> GetLinksToDerivedShapes ( global::Tum.PDE.LanguageDSL.ShapeClass baseShapeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape>(baseShapeInstance, global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.BaseShapeDomainRoleId);
		}
		#endregion
		#region ShapeClassReferencesBaseShape instance accessors
		
		/// <summary>
		/// Get any ShapeClassReferencesBaseShape links between a given ShapeClass and a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> GetLinks( global::Tum.PDE.LanguageDSL.ShapeClass source, global::Tum.PDE.LanguageDSL.ShapeClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DerivedShapeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape link in links )
			{
				if ( target.Equals(link.BaseShape) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShapeClassReferencesBaseShape link between a given ShapeClassand a ShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape GetLink( global::Tum.PDE.LanguageDSL.ShapeClass source, global::Tum.PDE.LanguageDSL.ShapeClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape>(source, global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape.DerivedShapeDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ShapeClassReferencesBaseShape link in links )
			{
				if ( target.Equals(link.BaseShape) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship DesignerDiagramClassReferencesIncludedDiagramClasses
	/// Description for
	/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e041e861-868e-4bdb-9c72-82782f0bc3a7")]
	public partial class DesignerDiagramClassReferencesIncludedDiagramClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignerDiagramClassReferencesIncludedDiagramClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe041e861, 0x868e, 0x4bdb, 0x9c, 0x72, 0x82, 0x78, 0x2f, 0x0b, 0xc3, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignerDiagramClassReferencesIncludedDiagramClasses link in the same Partition as the given DesignerDiagramClass
		/// </summary>
		/// <param name="source">DesignerDiagramClass to use as the source of the relationship.</param>
		/// <param name="target">DiagramClass to use as the target of the relationship.</param>
		public DesignerDiagramClassReferencesIncludedDiagramClasses(DesignerDiagramClass source, DiagramClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignerDiagramClassReferencesIncludedDiagramClasses.DesignerDiagramClassDomainRoleId, source), new DslModeling::RoleAssignment(DesignerDiagramClassReferencesIncludedDiagramClasses.DiagramClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignerDiagramClassReferencesIncludedDiagramClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignerDiagramClassReferencesIncludedDiagramClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignerDiagramClassReferencesIncludedDiagramClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignerDiagramClassReferencesIncludedDiagramClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DesignerDiagramClass domain role code
		
		/// <summary>
		/// DesignerDiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignerDiagramClassDomainRoleId = new global::System.Guid(0xa35c4d2f, 0x91d2, 0x4c2c, 0xb1, 0x73, 0xad, 0x95, 0xac, 0x61, 0xa9, 0x32);
		
		/// <summary>
		/// DomainRole DesignerDiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DesignerDiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DesignerDiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DesignerDiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IncludedDiagramClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DesignerDiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a35c4d2f-91d2-4c2c-b173-ad95ac61a932")]
		public virtual DesignerDiagramClass DesignerDiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DesignerDiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignerDiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignerDiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DesignerDiagramClasses of a DiagramClass
		/// <summary>
		/// Gets a list of DesignerDiagramClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DesignerDiagramClass> GetDesignerDiagramClasses(DiagramClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DesignerDiagramClass>, DesignerDiagramClass>(element, DiagramClassDomainRoleId);
		}
		#endregion
		#region DiagramClass domain role code
		
		/// <summary>
		/// DiagramClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DiagramClassDomainRoleId = new global::System.Guid(0xff54c4fb, 0x3d26, 0x4795, 0x99, 0xfa, 0xb3, 0xb8, 0x62, 0x6c, 0x1f, 0x1b);
		
		/// <summary>
		/// DomainRole DiagramClass
		/// Description for
		/// Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DiagramClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DiagramClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DiagramClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DesignerDiagramClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses/DiagramClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ff54c4fb-3d26-4795-99fa-b3b8626c1f1b")]
		public virtual DiagramClass DiagramClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DiagramClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DiagramClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DiagramClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IncludedDiagramClasses of a DesignerDiagramClass
		/// <summary>
		/// Gets a list of IncludedDiagramClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DiagramClass> GetIncludedDiagramClasses(DesignerDiagramClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DiagramClass>, DiagramClass>(element, DesignerDiagramClassDomainRoleId);
		}
		#endregion
		#region DesignerDiagramClass link accessor
		/// <summary>
		/// Get the list of DesignerDiagramClassReferencesIncludedDiagramClasses links to a DesignerDiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> GetLinksToIncludedDiagramClasses ( global::Tum.PDE.LanguageDSL.DesignerDiagramClass designerDiagramClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses>(designerDiagramClassInstance, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DesignerDiagramClassDomainRoleId);
		}
		#endregion
		#region DiagramClass link accessor
		/// <summary>
		/// Get the list of DesignerDiagramClassReferencesIncludedDiagramClasses links to a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> GetLinksToDesignerDiagramClasses ( global::Tum.PDE.LanguageDSL.DiagramClass diagramClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses>(diagramClassInstance, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DiagramClassDomainRoleId);
		}
		#endregion
		#region DesignerDiagramClassReferencesIncludedDiagramClasses instance accessors
		
		/// <summary>
		/// Get any DesignerDiagramClassReferencesIncludedDiagramClasses links between a given DesignerDiagramClass and a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> GetLinks( global::Tum.PDE.LanguageDSL.DesignerDiagramClass source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses>(source, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DesignerDiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignerDiagramClassReferencesIncludedDiagramClasses link between a given DesignerDiagramClassand a DiagramClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses GetLink( global::Tum.PDE.LanguageDSL.DesignerDiagramClass source, global::Tum.PDE.LanguageDSL.DiagramClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses>(source, global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses.DesignerDiagramClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.DesignerDiagramClassReferencesIncludedDiagramClasses link in links )
			{
				if ( target.Equals(link.DiagramClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SpecificDependencyDiagramReferencesDomainClass
	/// Description for
	/// Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c22261c3-e92b-408c-a93e-9afa7a61424d")]
	public partial class SpecificDependencyDiagramReferencesDomainClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SpecificDependencyDiagramReferencesDomainClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc22261c3, 0xe92b, 0x408c, 0xa9, 0x3e, 0x9a, 0xfa, 0x7a, 0x61, 0x42, 0x4d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SpecificDependencyDiagramReferencesDomainClass link in the same Partition as the given SpecificDependencyDiagram
		/// </summary>
		/// <param name="source">SpecificDependencyDiagram to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public SpecificDependencyDiagramReferencesDomainClass(SpecificDependencyDiagram source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SpecificDependencyDiagramReferencesDomainClass.SpecificDependencyDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SpecificDependencyDiagramReferencesDomainClass.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SpecificDependencyDiagramReferencesDomainClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SpecificDependencyDiagramReferencesDomainClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SpecificDependencyDiagramReferencesDomainClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SpecificDependencyDiagramReferencesDomainClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SpecificDependencyDiagram domain role code
		
		/// <summary>
		/// SpecificDependencyDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SpecificDependencyDiagramDomainRoleId = new global::System.Guid(0x0aab4e6a, 0x0086, 0x41c8, 0xa7, 0x10, 0xe9, 0x0e, 0x3f, 0x7d, 0x6f, 0xa7);
		
		/// <summary>
		/// DomainRole SpecificDependencyDiagram
		/// Description for
		/// Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.SpecificDependencyDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/SpecificDependencyDiagram.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/SpecificDependencyDiagram.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/SpecificDependencyDiagram.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/SpecificDependencyDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0aab4e6a-0086-41c8-a710-e90e3f7d6fa7")]
		public virtual SpecificDependencyDiagram SpecificDependencyDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SpecificDependencyDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SpecificDependencyDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SpecificDependencyDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SpecificDependencyDiagrams of a DomainClass
		/// <summary>
		/// Gets a list of SpecificDependencyDiagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SpecificDependencyDiagram> GetSpecificDependencyDiagrams(DomainClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SpecificDependencyDiagram>, SpecificDependencyDiagram>(element, DomainClassDomainRoleId);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0xe35150ac, 0xe548, 0x43ff, 0xb4, 0x0e, 0x14, 0x64, 0x02, 0x4c, 0x20, 0x31);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/DomainClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SpecificDependencyDiagrams", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass/DomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e35150ac-e548-43ff-b40e-1464024c2031")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainClass of a SpecificDependencyDiagram
		/// <summary>
		/// Gets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainClass GetDomainClass(SpecificDependencyDiagram element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SpecificDependencyDiagramDomainRoleId) as DomainClass;
		}
		
		/// <summary>
		/// Sets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainClass(SpecificDependencyDiagram element, DomainClass newDomainClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SpecificDependencyDiagramDomainRoleId, newDomainClass);
		}
		#endregion
		#region SpecificDependencyDiagram link accessor
		/// <summary>
		/// Get the SpecificDependencyDiagramReferencesDomainClass link to a SpecificDependencyDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass GetLinkToDomainClass (global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram specificDependencyDiagramInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass>(specificDependencyDiagramInstance, global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.SpecificDependencyDiagramDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SpecificDependencyDiagram not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the list of SpecificDependencyDiagramReferencesDomainClass links to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> GetLinksToSpecificDependencyDiagrams ( global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass>(domainClassInstance, global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.DomainClassDomainRoleId);
		}
		#endregion
		#region SpecificDependencyDiagramReferencesDomainClass instance accessors
		
		/// <summary>
		/// Get any SpecificDependencyDiagramReferencesDomainClass links between a given SpecificDependencyDiagram and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> GetLinks( global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.SpecificDependencyDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SpecificDependencyDiagramReferencesDomainClass link between a given SpecificDependencyDiagramand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass GetLink( global::Tum.PDE.LanguageDSL.SpecificDependencyDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass.SpecificDependencyDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SpecificDependencyDiagramReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship ModalDiagramReferencesDomainClass
	/// Description for Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b1281de8-e7ae-43be-aa39-42c5f6dfa0de")]
	public partial class ModalDiagramReferencesDomainClass : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModalDiagramReferencesDomainClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb1281de8, 0xe7ae, 0x43be, 0xaa, 0x39, 0x42, 0xc5, 0xf6, 0xdf, 0xa0, 0xde);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModalDiagramReferencesDomainClass link in the same Partition as the given ModalDiagram
		/// </summary>
		/// <param name="source">ModalDiagram to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public ModalDiagramReferencesDomainClass(ModalDiagram source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModalDiagramReferencesDomainClass.ModalDiagramDomainRoleId, source), new DslModeling::RoleAssignment(ModalDiagramReferencesDomainClass.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModalDiagramReferencesDomainClass(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModalDiagramReferencesDomainClass(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModalDiagramReferencesDomainClass(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModalDiagramReferencesDomainClass(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModalDiagram domain role code
		
		/// <summary>
		/// ModalDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModalDiagramDomainRoleId = new global::System.Guid(0x24eab214, 0x27f3, 0x49a4, 0x8f, 0x73, 0xf0, 0x2e, 0xa1, 0x8a, 0x69, 0x2b);
		
		/// <summary>
		/// DomainRole ModalDiagram
		/// Description for
		/// Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.ModalDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/ModalDiagram.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/ModalDiagram.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/ModalDiagram.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainClass", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/ModalDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("24eab214-27f3-49a4-8f73-f02ea18a692b")]
		public virtual ModalDiagram ModalDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModalDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModalDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModalDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModalDiagrams of a DomainClass
		/// <summary>
		/// Gets a list of ModalDiagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModalDiagram> GetModalDiagrams(DomainClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModalDiagram>, ModalDiagram>(element, DomainClassDomainRoleId);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0xee827ab3, 0xebff, 0x4338, 0x94, 0x25, 0x77, 0xeb, 0xa5, 0xc5, 0x28, 0x5b);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for
		/// Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/DomainClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModalDiagrams", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass/DomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ee827ab3-ebff-4338-9425-77eba5c5285b")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainClass of a ModalDiagram
		/// <summary>
		/// Gets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainClass GetDomainClass(ModalDiagram element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModalDiagramDomainRoleId) as DomainClass;
		}
		
		/// <summary>
		/// Sets DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainClass(ModalDiagram element, DomainClass newDomainClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModalDiagramDomainRoleId, newDomainClass);
		}
		#endregion
		#region ModalDiagram link accessor
		/// <summary>
		/// Get the ModalDiagramReferencesDomainClass link to a ModalDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass GetLinkToDomainClass (global::Tum.PDE.LanguageDSL.ModalDiagram modalDiagramInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass>(modalDiagramInstance, global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.ModalDiagramDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModalDiagram not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the list of ModalDiagramReferencesDomainClass links to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> GetLinksToModalDiagrams ( global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass>(domainClassInstance, global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.DomainClassDomainRoleId);
		}
		#endregion
		#region ModalDiagramReferencesDomainClass instance accessors
		
		/// <summary>
		/// Get any ModalDiagramReferencesDomainClass links between a given ModalDiagram and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> GetLinks( global::Tum.PDE.LanguageDSL.ModalDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.ModalDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModalDiagramReferencesDomainClass link between a given ModalDiagramand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass GetLink( global::Tum.PDE.LanguageDSL.ModalDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass>(source, global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass.ModalDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.ModalDiagramReferencesDomainClass link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship SpecificElementsDiagramReferencesDomainClasses
	/// Description for
	/// Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3b6a0554-30d5-4d4d-bd18-a39e603750c4")]
	public partial class SpecificElementsDiagramReferencesDomainClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SpecificElementsDiagramReferencesDomainClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3b6a0554, 0x30d5, 0x4d4d, 0xbd, 0x18, 0xa3, 0x9e, 0x60, 0x37, 0x50, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SpecificElementsDiagramReferencesDomainClasses link in the same Partition as the given SpecificElementsDiagram
		/// </summary>
		/// <param name="source">SpecificElementsDiagram to use as the source of the relationship.</param>
		/// <param name="target">DomainClass to use as the target of the relationship.</param>
		public SpecificElementsDiagramReferencesDomainClasses(SpecificElementsDiagram source, DomainClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SpecificElementsDiagramReferencesDomainClasses.SpecificElementsDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SpecificElementsDiagramReferencesDomainClasses.DomainClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SpecificElementsDiagramReferencesDomainClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SpecificElementsDiagramReferencesDomainClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SpecificElementsDiagramReferencesDomainClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SpecificElementsDiagramReferencesDomainClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SpecificElementsDiagram domain role code
		
		/// <summary>
		/// SpecificElementsDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SpecificElementsDiagramDomainRoleId = new global::System.Guid(0x37426f0b, 0xb298, 0x4feb, 0x83, 0x53, 0x99, 0xb2, 0x10, 0xdd, 0x6c, 0x31);
		
		/// <summary>
		/// DomainRole SpecificElementsDiagram
		/// Description for
		/// Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.SpecificElementsDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/SpecificElementsDiagram.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/SpecificElementsDiagram.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/SpecificElementsDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("37426f0b-b298-4feb-8353-99b210dd6c31")]
		public virtual SpecificElementsDiagram SpecificElementsDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SpecificElementsDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SpecificElementsDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SpecificElementsDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SpecificElementsDiagrams of a DomainClass
		/// <summary>
		/// Gets a list of SpecificElementsDiagrams.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SpecificElementsDiagram> GetSpecificElementsDiagrams(DomainClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SpecificElementsDiagram>, SpecificElementsDiagram>(element, DomainClassDomainRoleId);
		}
		#endregion
		#region DomainClass domain role code
		
		/// <summary>
		/// DomainClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainClassDomainRoleId = new global::System.Guid(0xcc1c7016, 0x1e20, 0x467a, 0x80, 0x91, 0x6a, 0xdc, 0x6d, 0xc2, 0xd7, 0x89);
		
		/// <summary>
		/// DomainRole DomainClass
		/// Description for
		/// Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/DomainClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/DomainClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SpecificElementsDiagrams", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses/DomainClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc1c7016-1e20-467a-8091-6adc6dc2d789")]
		public virtual DomainClass DomainClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainClasses of a SpecificElementsDiagram
		/// <summary>
		/// Gets a list of DomainClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainClass> GetDomainClasses(SpecificElementsDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainClass>, DomainClass>(element, SpecificElementsDiagramDomainRoleId);
		}
		#endregion
		#region SpecificElementsDiagram link accessor
		/// <summary>
		/// Get the list of SpecificElementsDiagramReferencesDomainClasses links to a SpecificElementsDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> GetLinksToDomainClasses ( global::Tum.PDE.LanguageDSL.SpecificElementsDiagram specificElementsDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses>(specificElementsDiagramInstance, global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.SpecificElementsDiagramDomainRoleId);
		}
		#endregion
		#region DomainClass link accessor
		/// <summary>
		/// Get the list of SpecificElementsDiagramReferencesDomainClasses links to a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> GetLinksToSpecificElementsDiagrams ( global::Tum.PDE.LanguageDSL.DomainClass domainClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses>(domainClassInstance, global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.DomainClassDomainRoleId);
		}
		#endregion
		#region SpecificElementsDiagramReferencesDomainClasses instance accessors
		
		/// <summary>
		/// Get any SpecificElementsDiagramReferencesDomainClasses links between a given SpecificElementsDiagram and a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> GetLinks( global::Tum.PDE.LanguageDSL.SpecificElementsDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses>(source, global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.SpecificElementsDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SpecificElementsDiagramReferencesDomainClasses link between a given SpecificElementsDiagramand a DomainClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses GetLink( global::Tum.PDE.LanguageDSL.SpecificElementsDiagram source, global::Tum.PDE.LanguageDSL.DomainClass target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses>(source, global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses.SpecificElementsDiagramDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.SpecificElementsDiagramReferencesDomainClasses link in links )
			{
				if ( target.Equals(link.DomainClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Tum.PDE.LanguageDSL
{
	/// <summary>
	/// DomainRelationship RelationshipShapeClassReferencesReferenceRelationship
	/// Description for
	/// Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("51e50240-c095-4136-9b76-2954739dbcf9")]
	public partial class RelationshipShapeClassReferencesReferenceRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipShapeClassReferencesReferenceRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x51e50240, 0xc095, 0x4136, 0x9b, 0x76, 0x29, 0x54, 0x73, 0x9d, 0xbc, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipShapeClassReferencesReferenceRelationship link in the same Partition as the given RelationshipShapeClass
		/// </summary>
		/// <param name="source">RelationshipShapeClass to use as the source of the relationship.</param>
		/// <param name="target">DomainRelationship to use as the target of the relationship.</param>
		public RelationshipShapeClassReferencesReferenceRelationship(RelationshipShapeClass source, DomainRelationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipShapeClassReferencesReferenceRelationship.RelationshipShapeClassDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipShapeClassReferencesReferenceRelationship.DomainRelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipShapeClassReferencesReferenceRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipShapeClassReferencesReferenceRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipShapeClassReferencesReferenceRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipShapeClassReferencesReferenceRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RelationshipShapeClass domain role code
		
		/// <summary>
		/// RelationshipShapeClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipShapeClassDomainRoleId = new global::System.Guid(0xf827d79f, 0x8268, 0x469a, 0x96, 0x03, 0x60, 0x11, 0x44, 0xb3, 0x0c, 0x52);
		
		/// <summary>
		/// DomainRole RelationshipShapeClass
		/// Description for
		/// Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.RelationshipShapeClass
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/RelationshipShapeClass.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/RelationshipShapeClass.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/RelationshipShapeClass.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferenceRelationship", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/RelationshipShapeClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f827d79f-8268-469a-9603-601144b30c52")]
		public virtual RelationshipShapeClass RelationshipShapeClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RelationshipShapeClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipShapeClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipShapeClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RelationshipShapeClasses of a DomainRelationship
		/// <summary>
		/// Gets a list of RelationshipShapeClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RelationshipShapeClass> GetRelationshipShapeClasses(DomainRelationship element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RelationshipShapeClass>, RelationshipShapeClass>(element, DomainRelationshipDomainRoleId);
		}
		#endregion
		#region DomainRelationship domain role code
		
		/// <summary>
		/// DomainRelationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainRelationshipDomainRoleId = new global::System.Guid(0x996850a1, 0x8320, 0x4910, 0x87, 0x29, 0x58, 0xc2, 0x84, 0x6a, 0xd4, 0x4c);
		
		/// <summary>
		/// DomainRole DomainRelationship
		/// Description for
		/// Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainRelationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/DomainRelationship.DisplayName", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/DomainRelationship.Category", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/DomainRelationship.Description", typeof(global::Tum.PDE.LanguageDSL.LanguageDSLDomainModel), "Tum.PDE.LanguageDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RelationshipShapeClasses", PropertyDisplayNameKey="Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship/DomainRelationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("996850a1-8320-4910-8729-58c2846ad44c")]
		public virtual DomainRelationship DomainRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainRelationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainRelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainRelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferenceRelationship of a RelationshipShapeClass
		/// <summary>
		/// Gets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainRelationship GetReferenceRelationship(RelationshipShapeClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipShapeClassDomainRoleId) as DomainRelationship;
		}
		
		/// <summary>
		/// Sets ReferenceRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetReferenceRelationship(RelationshipShapeClass element, DomainRelationship newDomainRelationship)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipShapeClassDomainRoleId, newDomainRelationship);
		}
		#endregion
		#region RelationshipShapeClass link accessor
		/// <summary>
		/// Get the RelationshipShapeClassReferencesReferenceRelationship link to a RelationshipShapeClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship GetLinkToReferenceRelationship (global::Tum.PDE.LanguageDSL.RelationshipShapeClass relationshipShapeClassInstance)
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship>(relationshipShapeClassInstance, global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.RelationshipShapeClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of RelationshipShapeClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainRelationship link accessor
		/// <summary>
		/// Get the list of RelationshipShapeClassReferencesReferenceRelationship links to a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> GetLinksToRelationshipShapeClasses ( global::Tum.PDE.LanguageDSL.DomainRelationship domainRelationshipInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship>(domainRelationshipInstance, global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.DomainRelationshipDomainRoleId);
		}
		#endregion
		#region RelationshipShapeClassReferencesReferenceRelationship instance accessors
		
		/// <summary>
		/// Get any RelationshipShapeClassReferencesReferenceRelationship links between a given RelationshipShapeClass and a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> GetLinks( global::Tum.PDE.LanguageDSL.RelationshipShapeClass source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> outLinks = new global::System.Collections.Generic.List<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship>();
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.RelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipShapeClassReferencesReferenceRelationship link between a given RelationshipShapeClassand a DomainRelationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship GetLink( global::Tum.PDE.LanguageDSL.RelationshipShapeClass source, global::Tum.PDE.LanguageDSL.DomainRelationship target )
		{
			global::System.Collections.Generic.IList<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship>(source, global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship.RelationshipShapeClassDomainRoleId);
			foreach ( global::Tum.PDE.LanguageDSL.RelationshipShapeClassReferencesReferenceRelationship link in links )
			{
				if ( target.Equals(link.DomainRelationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
