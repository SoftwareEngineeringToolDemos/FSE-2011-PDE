//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;

#region Custom property definitions for DomainProperty
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for DomainProperty type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class DomainPropertyTypeDescriptionProvider : DomainPropertyTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainPropertyTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for DomainProperty type descriptors.
	/// </summary>
	abstract internal class DomainPropertyTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new DomainPropertyTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for DomainProperty elements.
	/// </summary>
	public partial class DomainPropertyTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainPropertyTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of DomainProperty.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    DomainProperty source = this.ModelElement as DomainProperty;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for DomainRelationship
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for DomainRelationshipBase type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class DomainRelationshipBaseTypeDescriptionProvider : DomainRelationshipBaseTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainRelationshipBaseTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for DomainRelationshipBase type descriptors.
	/// </summary>
	abstract internal class DomainRelationshipBaseTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new DomainRelationshipBaseTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for DomainRelationshipBase elements.
	/// </summary>
	public partial class DomainRelationshipBaseTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainRelationshipBaseTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of DomainRelationshipBase.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    DomainRelationshipBase source = this.ModelElement as DomainRelationshipBase;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for DomainClass
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for DomainClassBase type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class DomainClassBaseTypeDescriptionProvider : DomainClassBaseTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainClassBaseTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for DomainClassBase type descriptors.
	/// </summary>
	abstract internal class DomainClassBaseTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new DomainClassBaseTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for DomainClassBase elements.
	/// </summary>
	public partial class DomainClassBaseTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainClassBaseTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of DomainClassBase.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    DomainClassBase source = this.ModelElement as DomainClassBase;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for DomainRole
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for DomainRole type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class DomainRoleTypeDescriptionProvider : DomainRoleTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainRoleTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for DomainRole type descriptors.
	/// </summary>
	abstract internal class DomainRoleTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new DomainRoleTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for DomainRole elements.
	/// </summary>
	public partial class DomainRoleTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainRoleTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of DomainRole.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    DomainRole source = this.ModelElement as DomainRole;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for DomainType
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for DomainTypeBase type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class DomainTypeBaseTypeDescriptionProvider : DomainTypeBaseTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainTypeBaseTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for DomainTypeBase type descriptors.
	/// </summary>
	abstract internal class DomainTypeBaseTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new DomainTypeBaseTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for DomainTypeBase elements.
	/// </summary>
	public partial class DomainTypeBaseTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DomainTypeBaseTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of DomainTypeBase.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    DomainTypeBase source = this.ModelElement as DomainTypeBase;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for BaseModelContext
namespace Tum.PDE.LanguageDSL
{
	
	/// <summary>
	/// Factory class for BaseModelContext type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class BaseModelContextTypeDescriptionProvider : BaseModelContextTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public BaseModelContextTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for BaseModelContext type descriptors.
	/// </summary>
	abstract internal class BaseModelContextTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new BaseModelContextTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for BaseModelContext elements.
	/// </summary>
	public partial class BaseModelContextTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public BaseModelContextTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of BaseModelContext.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    BaseModelContext source = this.ModelElement as BaseModelContext;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
