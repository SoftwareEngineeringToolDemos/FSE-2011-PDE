<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Dsl processor="DslDirectiveProcessor" requires="fileName='..\..\DslDefinition.dsl'" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<# 
	Dsl dm = this.Dsl;
	List<DomainClass> collection = new List<DomainClass>();
	
    // "DomainTypeReferencesPropertyGridEditor":
	// "DomainRoleReferencesRolePlayer":
	// "DomainPropertyReferencesType":
	// "ExternModelContextReferencesModelContext":	
	foreach(DomainClass d in dm.Classes )
	{
		switch(d.Name )
		{
			case "DomainType":
			case "PropertyGridEditor":
			case "DomainRole":
			case "DomainProperty":
			case "ExternModelContext":
				collection.Add(d);
				break;
		}
	}
	IEnumerable<DomainClass> sortedByInheritanceClasses = CodeGenerationUtilities.SortDomainClassesByInheritance(collection);

	List<DomainClass> elements = new List<DomainClass>();
	elements.AddRange(sortedByInheritanceClasses);

#>
using DslModeling = global::Microsoft.VisualStudio.Modeling;

namespace <#= dm.Namespace #>
{
	/// <summary>
	/// This class represents the dependencies provider for the domain model.
	/// 
	/// Double-derived class to allow easier code customization.
	/// </summary>
	public partial class <#= dm.Name #>DependenciesItemsProvider : <#= dm.Name #>DependenciesItemsProviderBase
	{
		#region Singleton Instance
		private static <#= dm.Name #>DependenciesItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= dm.Name #>DependenciesItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new <#= dm.Name #>DependenciesItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }
		
		private <#= dm.Name #>DependenciesItemsProvider()
		{
		}
        #endregion
	}

	/// <summary>
	/// This class represents the dependencies provider for the domain model.
	/// 
	/// This is the abstract base class.
	/// </summary>
	public abstract class <#= dm.Name #>DependenciesItemsProviderBase
	{	
		#region Methods
        private static DependencyItemCategory[] AllCategories = null;
		
        /// <summary>
        /// Returns all dependency item categories as an array.
        /// </summary>
        /// <returns>Array of dependency item categories.</returns>
        public static DependencyItemCategory[] GetAllCategories()
        {
            if (AllCategories == null)
                AllCategories = new DependencyItemCategory[]{
                    DependencyItemCategory.Embedding, DependencyItemCategory.Embedded, 
                    DependencyItemCategory.Referencing, DependencyItemCategory.Referenced};

            return AllCategories;
        }
		
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
        /// <param name="modelElements">List of model elements to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        /// <returns>List of dependencies.</returns>
        public virtual DependenciesData GetDependencies(System.Collections.Generic.List<DslModeling::ModelElement> modelElements, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{
			DependenciesData dependenciesData = new DependenciesData();

			foreach(DslModeling::ModelElement modelElement in modelElements)
			{
<#
			bool bFirstIf = true;
			foreach(DomainClass domainElement in elements)
			{
				if( domainElement.InheritanceModifier == InheritanceModifier.Abstract )
					continue;
				
				if( bFirstIf )
				{
					bFirstIf = false;
#>
				if<#
				}
				else
				{
#>
				else if<#
				}
#>(modelElement is <#= domainElement.GetFullName(true) #>)
				{
					<#= domainElement.Name #>DependencyItemsProvider.Instance.GetDependencies(dependenciesData, modelElement, excludedDomainModels, categories);
				}
<#
			}
#>
			}
			
			return dependenciesData;
		}
		#endregion
	}
}

<# 

	foreach(DomainClass domainElement in elements)
	{
		string instanceKeyword = "";
		string className = domainElement.Name + "DependencyItemsProvider";
		string modifier = "partial";
		
		if( domainElement.GeneratesDoubleDerived )
		{
			className += "Base";	
			modifier = "abstract";
		}
#>
namespace <#= dm.Namespace #>
{
	/// <summary>
    /// This class provides methods to retrieve dependency items for <#= domainElement.Name #> instance.
    /// </summary>
	public <#= modifier #> class <#= className #>
	{
<#
		if( !domainElement.GeneratesDoubleDerived && domainElement.InheritanceModifier != InheritanceModifier.Abstract)
		{
#>
		#region Singleton Instance
		private static <#= domainElement.Name #>DependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= instanceKeyword #><#= domainElement.Name #>DependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new <#= domainElement.Name #>DependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }

		/// <summary>
        /// Constructor.
        /// </summary>
		public <#= domainElement.Name #>DependencyItemsProvider() <# if( domainElement.BaseClass != null ){ #>: base() <# } #> 
		{
		}

        #endregion
		
<#
		}
#>
		#region Methods
		/// <summary>
        /// Gets the dependencies for a specific model elements.
        /// </summary>
		/// <param name="dependenciesData">Dependencies data to add new dependency and origin items to.</param>
        /// <param name="modelElement">Model element to get the dependencies for.</param>
        /// <param name="excludedDomainModels">Exclude dependencies that belong to a domain model that is provied in this list.</param>
        /// <param name="categories">List of categories to include in the search.</param>
        public virtual void GetDependencies(DependenciesData dependenciesData, DslModeling::ModelElement modelElement, System.Collections.Generic.List<DslModeling::ModelElement> excludedDomainModels, params DependencyItemCategory[] categories)
		{		
			#region Check Parameter
			if( dependenciesData == null )
				throw new System.ArgumentNullException("dependenciesData");
			if( modelElement == null )
				throw new System.ArgumentNullException("modelElement");
			if( excludedDomainModels == null )
				throw new System.ArgumentNullException("excludedDomainModels");
			if( categories == null )
				throw new System.ArgumentNullException("categories");				
			#endregion
			
<#
		List<DomainRole> embeddingRoles = new List<DomainRole>();
		List<DomainRole> embeddedRoles = new List<DomainRole>();
		List<DomainRole> referencingRoles = new List<DomainRole>();
		List<DomainRole> referencedRoles = new List<DomainRole>();
		foreach(DomainRole role in domainElement.RolesPlayed)
		{
			if( role.Relationship.InheritanceModifier == InheritanceModifier.Abstract )
				continue;

			switch(role.Relationship.Name)
			{
				case "DomainTypeReferencesPropertyGridEditor":
					if( role.Relationship.Source.RolePlayer != domainElement )
						continue;
#>
			#region DomainTypeReferencesPropertyGridEditor
		    // get all instances of DomainTypeReferencesPropertyGridEditor				
		    System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor> DomainTypeReferencesPropertyGridEditorLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor>(modelElement, global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor.DomainTypeDomainRoleId);
		    if( DomainTypeReferencesPropertyGridEditorLinks.Count > 0 )
		    {
		    	foreach(global::Tum.PDE.LanguageDSL.DomainTypeReferencesPropertyGridEditor link in DomainTypeReferencesPropertyGridEditorLinks)
		    	{
		    		bool bExclude = false;
		    		if( excludedDomainModels.Count > 0 )
		    		{	
		    			DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.PropertyGridEditor);
		    			if( excludedDomainModels.Contains(domainModel) )
		    				bExclude = true;
		    		}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.DomainType, link.PropertyGridEditor);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}
		    	}
		    }			
			#endregion
<#
					break;
					
				case "DomainRoleReferencesRolePlayer":
#>
			#region DomainRoleReferencesRolePlayer
				// get all instances of DomainRoleReferencesRolePlayer				
			System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer> DomainRoleReferencesRolePlayerLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer>(modelElement, global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer.DomainRoleDomainRoleId);
			if( DomainRoleReferencesRolePlayerLinks.Count > 0 )
			{
				foreach(global::Tum.PDE.LanguageDSL.DomainRoleReferencesRolePlayer link in DomainRoleReferencesRolePlayerLinks)
				{
					bool bExclude = false;
					if( excludedDomainModels.Count > 0 )
					{	
						DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.AttributedDomainElement);
						if( excludedDomainModels.Contains(domainModel) )
						bExclude = true;
					}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{						
							if( category == DependencyItemCategory.Embedding )
							{
								if( link.DomainRole.Relationship is EmbeddingRelationship && link.DomainRole.Relationship.Source == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("EmbeddingRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);
								}
							}
							
							if( category == DependencyItemCategory.Embedded )
							{
								if( link.DomainRole.Relationship is EmbeddingRelationship && link.DomainRole.Relationship.Target == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("EmbeddingRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);								
								}
							}				

							if( category == DependencyItemCategory.Referencing )
							{
								if( link.DomainRole.Relationship is ReferenceRelationship && link.DomainRole.Relationship.Source == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("ReferenceRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);
								}																
							}				
							
							if( category == DependencyItemCategory.Referenced )
							{
								if( link.DomainRole.Relationship is ReferenceRelationship && link.DomainRole.Relationship.Target == link.DomainRole)
								{
									DependencyItem item = new DependencyItem("ReferenceRelationship", category,
										link.DomainRole.Relationship.Source.RolePlayer,
										link.DomainRole.Relationship.Target.RolePlayer);
									dependenciesData.ActiveDependencies.Add(item);								
								}								
							}
						}	
					}
				}
			
				
			}
			#endregion
<#
					break;
					
				case "DomainPropertyReferencesType":
					if( role.Relationship.Source.RolePlayer != domainElement )
						continue;					
#>
			#region DomainPropertyReferencesType
			System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType> DomainPropertyReferencesTypeLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType>(modelElement, global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType.DomainPropertyDomainRoleId);
			if( DomainPropertyReferencesTypeLinks.Count > 0 )
			{
				foreach(global::Tum.PDE.LanguageDSL.DomainPropertyReferencesType link in DomainPropertyReferencesTypeLinks)
				{
					bool bExclude = false;
					if( excludedDomainModels.Count > 0 )
					{	
						DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.DomainType);
						if( excludedDomainModels.Contains(domainModel) )
							bExclude = true;
					}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.DomainProperty, link.DomainType);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}	
				}
			}
			#endregion
<#
					break;
					
				case "ExternModelContextReferencesModelContext":
					if( role.Relationship.Source.RolePlayer != domainElement )
						continue;	
#>
			#region ExternModelContextReferencesModelContext
            // get all instances of ExternModelContextReferencesModelContext				
            System.Collections.ObjectModel.ReadOnlyCollection<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext> ExternModelContextReferencesModelContextLinks = DslModeling::DomainRoleInfo.GetElementLinks<global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext>(modelElement, global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext.ExternModelContextDomainRoleId);
            if( ExternModelContextReferencesModelContextLinks.Count > 0 )
            {
            	foreach(global::Tum.PDE.LanguageDSL.ExternModelContextReferencesModelContext link in ExternModelContextReferencesModelContextLinks)
            	{
            		bool bExclude = false;
            		if( excludedDomainModels.Count > 0 )
            		{	
            			DslModeling::ModelElement domainModel = LanguageDSLElementParentProvider.Instance.GetEmbeddingDomainModel(link.ModelContext);
            			if( excludedDomainModels.Contains(domainModel) )
            				bExclude = true;
            		}				
					if( !bExclude )
					{
						foreach(DependencyItemCategory category in categories)
						{
							if( category == DependencyItemCategory.Referencing )
							{
								DependencyItem item = new DependencyItem(link, category,
									link.ExternModelContext, link.ModelContext);
								dependenciesData.ActiveDependencies.Add(item);
							}								
						}
					}	
				}
			}
			#endregion
<#
					break;
					
				default:
					continue;
			}
			continue;
		}
#>
		}
		#endregion
	}
<#
		if( domainElement.GeneratesDoubleDerived )
		{
#>
	
	/// <summary>
    /// This class provides methods to retrieve dependency items for <#= domainElement.Name #> instance.
    /// </summary>
	public partial class <#= domainElement.Name #>DependencyItemsProvider : <#= className #>
	{
<#
		if( domainElement.InheritanceModifier != InheritanceModifier.Abstract)
		{
#>
		#region Singleton Instance
		private static <#= domainElement.Name #>DependencyItemsProvider dependenciesProvider = null;
		
        /// <summary>
        /// Singleton instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)] // Will trigger creation otherwise.
        public static <#= domainElement.Name #>DependencyItemsProvider Instance
        {
            [global::System.Diagnostics.DebuggerStepThrough]
            get
            {
                if( dependenciesProvider == null )
				{
					dependenciesProvider = new <#= domainElement.Name #>DependencyItemsProvider();
				}
				
				return dependenciesProvider;
            }
        }
		
		/// <summary>
        /// Constructor.
        /// </summary>
		protected <#= domainElement.Name #>DependencyItemsProvider() : base()
		{
		}
        #endregion
<#
		}
#>	
	}
<#
		}
#>
}

<#
	}
#>

<#+ 
private void AddDependencyItem(Dsl dm, DomainRole role)
{
#>

// add origin dependency
DslModeling::DomainRelationshipInfo relationshipInfo<#= role.Relationship.Name #> = modelElement.Store.DomainDataDirectory.GetDomainRelationship(<#= role.Relationship.GetFullName(true) #>.DomainClassId);
DslModeling::DomainRoleInfo roleInfo<#= role.Relationship.Name #> = modelElement.Store.DomainDataDirectory.GetDomainRole(<#= role.Relationship.GetFullName(true) #>.<#= role.Name #>DomainRoleId);
dependenciesData.OriginDependencies.Add(new DslEditorModeling::DependencyOriginItem(
	relationshipInfo<#= role.Relationship.Name #>, roleInfo<#= role.Relationship.Name #>));

// get all instances of <#= role.Relationship.Name #>				
System.Collections.ObjectModel.ReadOnlyCollection<<#= role.Relationship.GetFullName(true) #>> <#= role.Relationship.Name #>Links = DslModeling::DomainRoleInfo.GetElementLinks<<#= role.Relationship.GetFullName(true) #>>(modelElement, <#= role.Relationship.GetFullName(true) #>.<#= role.Name #>DomainRoleId);
if( <#= role.Relationship.Name #>Links.Count > 0 )
{
	foreach(<#= role.Relationship.GetFullName(true) #> link in <#= role.Relationship.Name #>Links)
	{
		bExclude = false;
		if( excludedDomainModels.Count > 0 )
		{	
			DslModeling::ModelElement domainModel = <#= dm.Name #>ElementParentProvider.Instance.GetEmbeddingDomainModel(link.<#= role.Opposite.Name #>);
			if( excludedDomainModels.Contains(domainModel) )
				bExclude = true;
		}				
		if( !bExclude )
		{
			DslEditorModeling::DependencyItem item = new DslEditorModeling::DependencyItem(link, category, 
				relationshipInfo<#= role.Relationship.Name #>, 
				roleInfo<#= role.Relationship.Name #>);
			dependenciesData.ActiveDependencies.Add(item);
		}	
	}
}

<#+
}	
#>


