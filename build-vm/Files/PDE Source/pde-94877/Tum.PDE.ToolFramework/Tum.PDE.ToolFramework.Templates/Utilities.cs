// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tum.PDE.ToolFramework.Templates
{
    using Tum.PDE.LanguageDSL;
    using Microsoft.VisualStudio.Modeling;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System;
    
    
    #line 1 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class Utilities : UtilitiesBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write(" \r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 9 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

public string GenerateSummary(string domainClassType, GeneratedDomainElement domainClass, bool generatedClass)
{
	this.GenerationEnvironment = null;
	this.GenerateSummaryInternal(domainClassType, domainClass, generatedClass);
	return this.GenerationEnvironment.ToString();
}

// Generate the Summary XML comment for a DomainClass-derived type.
// generatedClass specifies whether this is the main generated code carrying class in a double-derived pair.
private void GenerateSummaryInternal(string domainClassType, GeneratedDomainElement domainClass, bool generatedClass)
{

        
        #line default
        #line hidden
        
        #line 21 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// <summary>\r\n");

        
        #line default
        #line hidden
        
        #line 22 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	if ( generatedClass )
	{
		if ( !domainClass.GeneratesDoubleDerived )
		{

        
        #line default
        #line hidden
        
        #line 27 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// ");

        
        #line default
        #line hidden
        
        #line 28 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClassType));

        
        #line default
        #line hidden
        
        #line 28 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 28 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClass.Name));

        
        #line default
        #line hidden
        
        #line 28 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 29 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

		GenerateCommentsInternal(domainClass.Description);
		}
		else // Double-derived base class - no comments to avoid repetition
		{

        
        #line default
        #line hidden
        
        #line 34 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// Double-derived base class for ");

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClassType));

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClass.Name));

        
        #line default
        #line hidden
        
        #line 35 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 36 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

		}
	}
	else // Derived class in double-derived pair.
	{

        
        #line default
        #line hidden
        
        #line 41 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// ");

        
        #line default
        #line hidden
        
        #line 42 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClassType));

        
        #line default
        #line hidden
        
        #line 42 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 42 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainClass.Name));

        
        #line default
        #line hidden
        
        #line 42 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 43 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

		GenerateCommentsInternal(domainClass.Description);
	}

        
        #line default
        #line hidden
        
        #line 46 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// </summary>\r\n");

        
        #line default
        #line hidden
        
        #line 48 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

}

public string GenerateComments(string comment)
{
	this.GenerationEnvironment = null;
	this.GenerateCommentsInternal(comment);
	return this.GenerationEnvironment.ToString();
}

private void GenerateCommentsInternal(string comment)
{
	if(string.IsNullOrEmpty(comment))
	{
		return;
	}
	for(int i=0; i<comment.Length;)
	{
		int subStringLength = Math.Min(80, comment.Length - i);
		int pos = comment.LastIndexOf(" ", i + subStringLength, subStringLength, StringComparison.Ordinal);
		if (i + subStringLength >= comment.Length)
		{
			pos=-1; // Don't split a short comment at all
		}
		string subString;
		if (pos != -1)
		{
			subString = comment.Substring(i, pos - i);
			i = pos + 1; // Skip space
		}
		else
		{
			subString = comment.Substring(i);
			i = comment.Length;
		}

        
        #line default
        #line hidden
        
        #line 83 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("/// ");

        
        #line default
        #line hidden
        
        #line 84 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(subString));

        
        #line default
        #line hidden
        
        #line 84 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 85 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	}
}

public string GenerateResourceAttributes(ModelElement domainObj, string genResourceName)
{
	this.GenerationEnvironment = null;
	this.GenerateResourceAttributesInternal(domainObj, genResourceName);
	return this.GenerationEnvironment.ToString();
}

public string GenerateResourceAttributes(ModelElement domainObj)
{
	this.GenerationEnvironment = null;
	this.GenerateResourceAttributesInternal(domainObj, "");
	return this.GenerationEnvironment.ToString();
}

private void GenerateResourceAttributesInternal(ModelElement domainObj, string genResourceName)
{
	if( domainObj == null )
		return;
	
	string resourceKey = "";
	string domainModelType = "";
	string className = "";
	bool generateCategory = false;
	bool generateDisplayName = false;

	MetaModel dm = null;	
	if(domainObj is DomainClass)
	{
		generateDisplayName = true;
		DomainClass c = (DomainClass)domainObj;
		resourceKey = c.GetFullName(false);
		dm = c.GetMetaModel();
		className = CodeGenerationUtilities.GetGenerationClassName(c);
	}
	else if(domainObj is DomainRelationship)
	{
		generateDisplayName = true;
		DomainRelationship c = (DomainRelationship)domainObj;
		resourceKey = c.GetFullName(false);
		dm = c.GetMetaModel();
		className = CodeGenerationUtilities.GetGenerationClassName(c);
	}
	else if(domainObj is DomainProperty)
	{
		generateDisplayName = true;
		DomainProperty p = (DomainProperty)domainObj;
		AttributedDomainElement c = p.Element;
		resourceKey = c.GetFullName(false)+"/"+p.Name;
		generateCategory = !String.IsNullOrEmpty(p.Category);
		
		dm = c.GetMetaModel();
		
		//if( c is DomainClass )
		//	dm = (c as DomainClass).GetMetaModel();
		//else
		//	dm = (c as DomainRelationship).GetMetaModel();
	}
	else if(domainObj is DomainRole)
	{
		generateDisplayName = true;
		DomainRole r = (DomainRole)domainObj;
		generateCategory = !String.IsNullOrEmpty(r.Category);
		DomainRelationship rel = r.Relationship;
		resourceKey = rel.GetFullName(false)+"/"+r.Name;		
		dm = rel.GetMetaModel();
	}
	else if(domainObj is EnumerationLiteral)
	{
		//generateDisplayName = true;
		EnumerationLiteral literal = (EnumerationLiteral)domainObj;
		DomainEnumeration domainEnum = literal.DomainEnumeration;
		dm = domainEnum.MetaModel;
		resourceKey = domainEnum.GetFullName(false)+"/"+literal.Name;
	}
	else if(domainObj is MetaModel)
	{
		generateDisplayName = true;
		dm = (MetaModel)domainObj;
		resourceKey = dm.GetFullName(false)+"DomainModel";
	}
	domainModelType = dm.GetFullName(true)+"DomainModel";
	
	// If no resource name specified for DslLibrary, don't generate any resource attributes.
	if(String.IsNullOrEmpty(dm.GeneratedResourceName))
	{
		return;
	}
	
	if(generateDisplayName)
	{

        
        #line default
        #line hidden
        
        #line 179 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[DslDesign::DisplayNameResource(\"");

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(resourceKey));

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(".DisplayName\", typeof(");

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainModelType));

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("), \"");

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(genResourceName));

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\")]\r\n");

        
        #line default
        #line hidden
        
        #line 181 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	}
	if(generateCategory)
	{

        
        #line default
        #line hidden
        
        #line 185 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[DslDesign::CategoryResource(\"");

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(resourceKey));

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(".Category\", typeof(");

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainModelType));

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("), \"");

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(genResourceName));

        
        #line default
        #line hidden
        
        #line 186 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\")]\r\n");

        
        #line default
        #line hidden
        
        #line 187 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	}

        
        #line default
        #line hidden
        
        #line 189 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[DslDesign::DescriptionResource(\"");

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(resourceKey));

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(".Description\", typeof(");

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainModelType));

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("), \"");

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(genResourceName));

        
        #line default
        #line hidden
        
        #line 190 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("\")]\r\n");

        
        #line default
        #line hidden
        
        #line 191 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	if(domainObj is DomainClass)
	{

        
        #line default
        #line hidden
        
        #line 194 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[DslModeling::DomainModelOwner(typeof(");

        
        #line default
        #line hidden
        
        #line 195 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainModelType));

        
        #line default
        #line hidden
        
        #line 195 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("))]\r\n");

        
        #line default
        #line hidden
        
        #line 196 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	}
}

/*
private void GenerateClsCompliantAttribute(AccessModifier modifier)
{
	if(modifier==AccessModifier.Public)
	{

        
        #line default
        #line hidden
        
        #line 205 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[global::System.CLSCompliant(true)]\r\n");

        
        #line default
        #line hidden
        
        #line 207 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

	}	
}
*/

public System.Collections.Generic.IEnumerable<string> GetRequiredModelsList(MetaModel library)
{
	System.Collections.Generic.List<string> modelNames = new System.Collections.Generic.List<string>();
	
	// Every model uses "Core"
	modelNames.Add("global::Microsoft.VisualStudio.Modeling.CoreDomainModel");
	
	List<MetaModel> models = CodeGenerationUtilities.GetAllLibraries(library);
	foreach(MetaModel importedModel in models)
	{
		modelNames.Add(importedModel.GetFullName(true) + "DomainModel");
	}
	
	/*
	if (CodeGenerationUtilities.DefinesDiagramElements(library))
	{
		modelNames.Add("global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel");
	}
	
	
	foreach(DslLibrary importedLib in library.AllLibraries)
	{
		modelNames.Add(importedLib.GetFullName(true) + "DomainModel");
	}*/
	
	return modelNames.Distinct();
}

public string GenerateExtendsAttributes(MetaModel library)
{
	this.GenerationEnvironment = null;
	this.GenerateExtendsAttributesInternal(library);
	return this.GenerationEnvironment.ToString();
}

///<summary>
/// Emit [DependsOnDomainModel] attributes for each model this library uses.
///</summary>
private void GenerateExtendsAttributesInternal(MetaModel library)
{
	foreach (string extendedModel in GetRequiredModelsList(library))
	{
		if (string.CompareOrdinal(library.GetFullName(true) + "DomainModel", extendedModel) != 0)
		{

        
        #line default
        #line hidden
        
        #line 256 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[DslModeling::DependsOnDomainModel(typeof(");

        
        #line default
        #line hidden
        
        #line 257 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(extendedModel));

        
        #line default
        #line hidden
        
        #line 257 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("))]\r\n");

        
        #line default
        #line hidden
        
        #line 258 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

		}
	}  
}

public string GenerateDebuggerDisplayAttribute(AttributedDomainElement domainClass)
{
	this.GenerationEnvironment = null;
	this.GenerateDebuggerDisplayAttributeInternal(domainClass);

	return this.GenerationEnvironment.ToString();
}

private void GenerateDebuggerDisplayAttributeInternal(AttributedDomainElement domainClass)
{
	foreach (DomainProperty domainProperty in domainClass.Properties)
	{
		if (domainProperty.IsElementName)
		{

        
        #line default
        #line hidden
        
        #line 277 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("[global::System.Diagnostics.DebuggerDisplay(\"{GetType().Name,nq} (");

        
        #line default
        #line hidden
        
        #line 278 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domainProperty.Name));

        
        #line default
        #line hidden
        
        #line 278 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(" = {");

        
        #line default
        #line hidden
        
        #line 278 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CodeGenerationUtilities.GetCamelCase(domainProperty.Name)));

        
        #line default
        #line hidden
        
        #line 278 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"
this.Write("PropertyStorage})\")]\r\n");

        
        #line default
        #line hidden
        
        #line 279 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\Utilities.tt"

			break;
		}
	}
}

public string GetDomainRoleResourceKey(DomainRole r)
{
	string resourceKey = r.Relationship.GetFullName(false)+"/"+r.Name;
	return resourceKey;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class UtilitiesBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
