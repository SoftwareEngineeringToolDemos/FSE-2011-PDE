<#@ template language="C#" inherits="BaseTemplate"#> 
<#@ import namespace="Tum.PDE.LanguageDSL"#>
<#@ import namespace="Microsoft.VisualStudio.Modeling" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#
	string dslName = this.MetaModel.Name;
	string directiveName = this.MetaModel.Name;
	string dslFullName = this.MetaModel.GetFullName(true);
	
	MetaModel dm = this.MetaModel;
#>
using DslEditorShell = global::Tum.PDE.ToolFramework.Modeling.Shell;
using DslEditorViewShell = global::Tum.PDE.ToolFramework.Modeling.Visualization.Shell;

namespace <#= this.MetaModel.Namespace #>
{
	/// <summary>
	/// This class represents the shell package main view model of the <#= dm.ApplicationName #>.
	/// 
	/// Double-derived class to allow easier code customization.
	/// </summary>
	public partial class <#= dm.Name #>ShellPackageController : <#= dm.Name #>ShellPackageControllerBase
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
		/// <param name="package">Package.</param>
        public <#= dm.Name #>ShellPackageController(DslEditorShell::ModelPackage package)
            : base(package)
        {
        }
		#endregion
	}
	
	/// <summary>
	/// This class represents the shell package controller of the <#= dm.ApplicationName #>.
	/// 
	/// This is the abstract base class.
	/// </summary>
	public abstract class <#= dm.Name #>ShellPackageControllerBase : DslEditorViewShell::ShellPackageController
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
		/// <param name="package">Package.</param>
        protected <#= dm.Name #>ShellPackageControllerBase(DslEditorShell::ModelPackage package)
            : base(package)
        {

        }
		#endregion
		
		#region Initialization
        /// <summary>
        /// This method is used to initialize the view model and can be overriden for customization.
        /// </summary>
        protected override void Initialize()
        {
			base.Initialize();

			this.LayoutManager = new <#= this.MetaModel.Namespace #>.ViewModel.<#= dm.Name #>DockingLayoutManager(this.ModelPackage, this);
		}			
		#endregion
	}
}

