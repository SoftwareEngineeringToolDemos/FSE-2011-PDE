// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tum.PDE.ToolFramework.Templates.ViewModel
{
    using Tum.PDE.LanguageDSL;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System;
    
    
    #line 1 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DiagramItemViewModelGenerator : BaseTemplate
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public override string TransformText()
        {
            this.GenerationEnvironment = null;
            this.Write(" \r\n");
            this.Write(@"using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslEditorViewDiagrams = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface;
using DslEditorMenuModel = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu;
using DslEditorCommands = global::Tum.PDE.ToolFramework.Modeling.Visualization.Commands;
using DslEditorEvents = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events;
using DslEditorViewModelData = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data;
using DslEditorDiagrams = global::Tum.PDE.ToolFramework.Modeling.Diagrams;

");
            
            #line 16 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

foreach(DiagramClass diagramClass in this.MetaModel.AllDiagramClasses)
{
	GenerateDiagramItemViewModel(this.MetaModel, diagramClass);
}

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 22 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
 
public void GenerateDiagramItemViewModel(MetaModel dm, DiagramClass diagramClass)
{

        
        #line default
        #line hidden
        
        #line 25 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("namespace ");

        
        #line default
        #line hidden
        
        #line 26 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dm.Namespace));

        
        #line default
        #line hidden
        
        #line 26 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(".ViewModel\r\n{\r\n");

        
        #line default
        #line hidden
        
        #line 28 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

	foreach(PresentationElementClass presentationElement in diagramClass.PresentationElements)
	{
		string baseClass = "DslEditorViewDiagrams::DiagramItemElementViewModel";
		bool hasBaseClass = false;
		if( !(presentationElement is ShapeClass) )
			continue;
		else if( presentationElement is ShapeClass )
		{
			if( (presentationElement as ShapeClass).BaseShape != null )
			{
				baseClass = (presentationElement as ShapeClass).BaseShape.GetMetaModel().Namespace + ".ViewModel." + (presentationElement as ShapeClass).BaseShape.Name + "DiagramItemViewModel";
				hasBaseClass = true;
			}
		}
		
		ShapeClass shapeClassElement = presentationElement as ShapeClass;
				
		bool canHaveNestedChildren = false;
		bool canHaveRelativeChildren = false;
		foreach (PresentationElementClass element in diagramClass.PresentationElements)
		{
            if (element is ShapeClass)
            {
				ShapeClass shapeClass = element as ShapeClass;
				DomainClass domainClass = shapeClass.DomainClass;
		
				if( domainClass == null )
					continue;

				
				if( shapeClass.Parent == presentationElement )
				{
					if( shapeClass.IsRelativeChild )
						canHaveRelativeChildren = true;
					else
						canHaveNestedChildren = true;
				}
			}
		}
		
		

        
        #line default
        #line hidden
        
        #line 70 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t/// <summary>\r\n    /// View model for ");

        
        #line default
        #line hidden
        
        #line 72 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 72 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(".\r\n\t///\r\n\t/// Double-derived class to allow easier code customization.\r\n    /// <" +
        "/summary>\r\n\tpublic partial class ");

        
        #line default
        #line hidden
        
        #line 76 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 76 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("DiagramItemViewModel : ");

        
        #line default
        #line hidden
        
        #line 76 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 76 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(@"DiagramItemViewModelBase
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name=""viewModelStore"">The store this view model belongs to.</param>
        /// <param name=""diagram"">The Diagram this item belongs to.</param>
        /// <param name=""shapeElement"">Model element, that is hosted by this view model.</param>
        public ");

        
        #line default
        #line hidden
        
        #line 85 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 85 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(@"DiagramItemViewModel(DslEditorViewModelData::ViewModelStore viewModelStore, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::NodeShape shapeElement)
            : base(viewModelStore, diagram, shapeElement)
        {
        }
		#endregion
	}

	/// <summary>
    /// View model for ");

        
        #line default
        #line hidden
        
        #line 93 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 93 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(".\r\n\t///\r\n\t/// This is the abstract base class.\r\n    /// </summary>\r\n\tpublic parti" +
        "al class ");

        
        #line default
        #line hidden
        
        #line 97 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 97 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("DiagramItemViewModelBase : ");

        
        #line default
        #line hidden
        
        #line 97 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(baseClass));

        
        #line default
        #line hidden
        
        #line 97 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(@"
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name=""viewModelStore"">The store this view model belongs to.</param>
        /// <param name=""diagram"">The Diagram this item belongs to.</param>
        /// <param name=""shapeElement"">Model element, that is hosted by this view model.</param>
        protected ");

        
        #line default
        #line hidden
        
        #line 106 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(presentationElement.Name));

        
        #line default
        #line hidden
        
        #line 106 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(@"DiagramItemViewModelBase(DslEditorViewModelData::ViewModelStore viewModelStore, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::NodeShape shapeElement)
            : base(viewModelStore, diagram, shapeElement)
        {
        }
		#endregion
		
		#region Methods
        /// <summary>
        /// Gets whether this view model can have nested children or not.
        /// </summary>
        public override bool CanHaveNestedChildren 
		{ 
			get
			{
");

        
        #line default
        #line hidden
        
        #line 120 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

		if( hasBaseClass )
		{

        
        #line default
        #line hidden
        
        #line 123 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t\t\tif( base.CanHaveNestedChildren )\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n");

        
        #line default
        #line hidden
        
        #line 127 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

		}

        
        #line default
        #line hidden
        
        #line 129 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t\t\t\treturn ");

        
        #line default
        #line hidden
        
        #line 130 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(canHaveNestedChildren.ToString().ToLower()));

        
        #line default
        #line hidden
        
        #line 130 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\r\n        /// <summary>\r\n        /// Gets whether this view model c" +
        "an have relative children or not.\r\n        /// </summary>\r\n        public overri" +
        "de bool CanHaveRelativeChildren\r\n\t\t{ \r\n\t\t\tget\r\n\t\t\t{\r\n");

        
        #line default
        #line hidden
        
        #line 141 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

		if( hasBaseClass )
		{

        
        #line default
        #line hidden
        
        #line 144 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t\t\tif( base.CanHaveRelativeChildren )\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n");

        
        #line default
        #line hidden
        
        #line 148 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

		}

        
        #line default
        #line hidden
        
        #line 150 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t\t\t\r\n\t\t\t\treturn ");

        
        #line default
        #line hidden
        
        #line 151 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(canHaveRelativeChildren.ToString().ToLower()));

        
        #line default
        #line hidden
        
        #line 151 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        #endregion\t\t\t\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 157 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

			if( shapeClassElement.Parent == null )
			{

        
        #line default
        #line hidden
        
        #line 160 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write(@"		#region Properties
        /// <summary>
        /// False if this item view model is directly hosted on the diagram surface and its shape can be deleted
        /// whithout the hosted model element beeing required to be deleted as well. True otherwise.
        /// </summary>
        /// <remarks>
		/// Items need to delete their hosted element if they are themselves not directly hosted
		/// on the diagram's surface.
		/// </remarks>
        public override bool AutomaticallyDeletesHostedElement 
        {
            get
            {

				return false;
            }
        }		
		#endregion
		
");

        
        #line default
        #line hidden
        
        #line 180 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

			}

			if(shapeClassElement.GeneratePropertiesVM)
			{
				this.PushIndent("\t\t");
				this.Write(DiagramGeneratorHelper.Instance.CreatePropertyHandlers(presentationElement, (presentationElement as PresentationDomainClassElement).DomainClass, hasBaseClass));
				this.PopIndent();
			}

        
        #line default
        #line hidden
        
        #line 189 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("\t}\r\n\t\r\n");

        
        #line default
        #line hidden
        
        #line 192 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

	}

        
        #line default
        #line hidden
        
        #line 194 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 196 "J:\Uni\CC Processes\Werkzeuge\PDE 2\Tum.PDE.ToolFramework\Tum.PDE.ToolFramework.Templates\ViewModel\DiagramItemViewModelGenerator.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
