<#@ template language="C#" inherits="BaseTemplate"#> 
<#@ import namespace="Tum.PDE.LanguageDSL"#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslEditorViewDiagrams = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.DiagramSurface;
using DslEditorMenuModel = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Menu;
using DslEditorCommands = global::Tum.PDE.ToolFramework.Modeling.Visualization.Commands;
using DslEditorEvents = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Messaging.Events;
using DslEditorViewModelData = global::Tum.PDE.ToolFramework.Modeling.Visualization.ViewModel.Data;
using DslEditorDiagrams = global::Tum.PDE.ToolFramework.Modeling.Diagrams;

<#
foreach(DiagramClass diagramClass in this.MetaModel.AllDiagramClasses)
{
	GenerateDiagramItemViewModel(this.MetaModel, diagramClass);
}
#>
<#+ 
public void GenerateDiagramItemViewModel(MetaModel dm, DiagramClass diagramClass)
{
#>
namespace <#= dm.Namespace #>.ViewModel
{
<#+
	foreach(PresentationElementClass presentationElement in diagramClass.PresentationElements)
	{
		string baseClass = "DslEditorViewDiagrams::DiagramItemElementViewModel";
		bool hasBaseClass = false;
		if( !(presentationElement is ShapeClass) )
			continue;
		else if( presentationElement is ShapeClass )
		{
			if( (presentationElement as ShapeClass).BaseShape != null )
			{
				baseClass = (presentationElement as ShapeClass).BaseShape.GetMetaModel().Namespace + ".ViewModel." + (presentationElement as ShapeClass).BaseShape.Name + "DiagramItemViewModel";
				hasBaseClass = true;
			}
		}
		
		ShapeClass shapeClassElement = presentationElement as ShapeClass;
				
		bool canHaveNestedChildren = false;
		bool canHaveRelativeChildren = false;
		foreach (PresentationElementClass element in diagramClass.PresentationElements)
		{
            if (element is ShapeClass)
            {
				ShapeClass shapeClass = element as ShapeClass;
				DomainClass domainClass = shapeClass.DomainClass;
		
				if( domainClass == null )
					continue;

				
				if( shapeClass.Parent == presentationElement )
				{
					if( shapeClass.IsRelativeChild )
						canHaveRelativeChildren = true;
					else
						canHaveNestedChildren = true;
				}
			}
		}
		
		
#>
	/// <summary>
    /// View model for <#= presentationElement.Name #>.
	///
	/// Double-derived class to allow easier code customization.
    /// </summary>
	public partial class <#= presentationElement.Name #>DiagramItemViewModel : <#= presentationElement.Name #>DiagramItemViewModelBase
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="viewModelStore">The store this view model belongs to.</param>
        /// <param name="diagram">The Diagram this item belongs to.</param>
        /// <param name="shapeElement">Model element, that is hosted by this view model.</param>
        public <#= presentationElement.Name #>DiagramItemViewModel(DslEditorViewModelData::ViewModelStore viewModelStore, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::NodeShape shapeElement)
            : base(viewModelStore, diagram, shapeElement)
        {
        }
		#endregion
	}

	/// <summary>
    /// View model for <#= presentationElement.Name #>.
	///
	/// This is the abstract base class.
    /// </summary>
	public partial class <#= presentationElement.Name #>DiagramItemViewModelBase : <#= baseClass #>
	{
		#region Constructor
		/// <summary>
        /// Constuctor.
        /// </summary>
        /// <param name="viewModelStore">The store this view model belongs to.</param>
        /// <param name="diagram">The Diagram this item belongs to.</param>
        /// <param name="shapeElement">Model element, that is hosted by this view model.</param>
        protected <#= presentationElement.Name #>DiagramItemViewModelBase(DslEditorViewModelData::ViewModelStore viewModelStore, DslEditorViewDiagrams::DiagramSurfaceViewModel diagram, DslEditorDiagrams::NodeShape shapeElement)
            : base(viewModelStore, diagram, shapeElement)
        {
        }
		#endregion
		
		#region Methods
        /// <summary>
        /// Gets whether this view model can have nested children or not.
        /// </summary>
        public override bool CanHaveNestedChildren 
		{ 
			get
			{
<#+
		if( hasBaseClass )
		{
#>
			if( base.CanHaveNestedChildren )
				return true;
			
<#+
		}
#>
				return <#= canHaveNestedChildren.ToString().ToLower() #>;
			}
		}

        /// <summary>
        /// Gets whether this view model can have relative children or not.
        /// </summary>
        public override bool CanHaveRelativeChildren
		{ 
			get
			{
<#+
		if( hasBaseClass )
		{
#>
			if( base.CanHaveRelativeChildren )
				return true;
			
<#+
		}
#>			
				return <#= canHaveRelativeChildren.ToString().ToLower() #>;
			}
		}
		
        #endregion			

<#+
			if( shapeClassElement.Parent == null )
			{
#>
		#region Properties
        /// <summary>
        /// False if this item view model is directly hosted on the diagram surface and its shape can be deleted
        /// whithout the hosted model element beeing required to be deleted as well. True otherwise.
        /// </summary>
        /// <remarks>
		/// Items need to delete their hosted element if they are themselves not directly hosted
		/// on the diagram's surface.
		/// </remarks>
        public override bool AutomaticallyDeletesHostedElement 
        {
            get
            {

				return false;
            }
        }		
		#endregion
		
<#+
			}

			if(shapeClassElement.GeneratePropertiesVM)
			{
				this.PushIndent("\t\t");
				this.Write(DiagramGeneratorHelper.Instance.CreatePropertyHandlers(presentationElement, (presentationElement as PresentationDomainClassElement).DomainClass, hasBaseClass));
				this.PopIndent();
			}
#>
	}
	
<#+
	}
#>
}
<#+
}
#>


