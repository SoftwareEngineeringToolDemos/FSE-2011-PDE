//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainModel DiagramsDSLDomainModel
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSL
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("41ca7a90-0d23-4e0c-b4c4-60e7c76d2c60")]
	public partial class DiagramsDSLDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// DiagramsDSLDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x41ca7a90, 0x0d23, 0x4e0c, 0xb4, 0xc4, 0x60, 0xe7, 0xc7, 0x6d, 0x2c, 0x60);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public DiagramsDSLDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(DiagramsModel),
				typeof(NodeShape),
				typeof(Diagram),
				typeof(LinkShape),
				typeof(ShapeElement),
				typeof(LayoutInfo),
				typeof(SourceAnchor),
				typeof(TargetAnchor),
				typeof(Anchor),
				typeof(NodeShapeInfo),
				typeof(LinkShapeInfo),
				typeof(GraphicalDependenciesDiagram),
				typeof(GraphicalDependencyLinkShape),
				typeof(GraphicalDependencyMainShape),
				typeof(GraphicalDependencyShape),
				typeof(ShapeElementContainsChildShapes),
				typeof(DiagramsModelHasDiagrams),
				typeof(DiagramHasChildren),
				typeof(DiagramHasLinkShapes),
				typeof(NodeShapeReferencesNestedChildren),
				typeof(NodeShapeReferencesRelativeChildren),
				typeof(LinkShapeHasSourceAnchor),
				typeof(LinkShapeHasTargetAnchor),
				typeof(SourceAnchorReferencesFromShape),
				typeof(TargetAnchorReferencesToShape),
				typeof(DiagramHasIncludedDiagrams),
				typeof(LayoutInfoHasChildrenInfos),
				typeof(LayoutInfoHasLinkShapeInfos),
				typeof(DiagramsModelHasLayoutInfos),
				typeof(NodeShapeInfoHasChildrenInfos),
				typeof(GraphicalDependenciesDiagramReferencesSourceDependencyShapes),
				typeof(GraphicalDependenciesDiagramReferencesTargetDependencyShapes),
				typeof(GraphicalDependencyLinkShapeReferencesMainShape),
				typeof(GraphicalDependenciesDiagramReferencesMainElementShape),
				typeof(GraphicalDependencyLinkShapeReferencesDependencyShape),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(NodeShape), "ResizingBehaviour", NodeShape.ResizingBehaviourDomainPropertyId, typeof(NodeShape.ResizingBehaviourPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "MovementBehaviour", NodeShape.MovementBehaviourDomainPropertyId, typeof(NodeShape.MovementBehaviourPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "IsRelativeChildShape", NodeShape.IsRelativeChildShapeDomainPropertyId, typeof(NodeShape.IsRelativeChildShapePropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "TakesPartInRelationship", NodeShape.TakesPartInRelationshipDomainPropertyId, typeof(NodeShape.TakesPartInRelationshipPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "Location", NodeShape.LocationDomainPropertyId, typeof(NodeShape.LocationPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "Size", NodeShape.SizeDomainPropertyId, typeof(NodeShape.SizePropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "AbsoluteLocation", NodeShape.AbsoluteLocationDomainPropertyId, typeof(NodeShape.AbsoluteLocationPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShape), "PlacementSide", NodeShape.PlacementSideDomainPropertyId, typeof(NodeShape.PlacementSidePropertyHandler)),
				new DomainMemberInfo(typeof(Diagram), "Name", Diagram.NameDomainPropertyId, typeof(Diagram.NamePropertyHandler)),
				new DomainMemberInfo(typeof(LinkShape), "EdgePoints", LinkShape.EdgePointsDomainPropertyId, typeof(LinkShape.EdgePointsPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShape), "DummyProperty", LinkShape.DummyPropertyDomainPropertyId, typeof(LinkShape.DummyPropertyPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShape), "RoutingMode", LinkShape.RoutingModeDomainPropertyId, typeof(LinkShape.RoutingModePropertyHandler)),
				new DomainMemberInfo(typeof(ShapeElement), "InternalElementId", ShapeElement.InternalElementIdDomainPropertyId, typeof(ShapeElement.InternalElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LayoutInfo), "HostElementId", LayoutInfo.HostElementIdDomainPropertyId, typeof(LayoutInfo.HostElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LayoutInfo), "Size", LayoutInfo.SizeDomainPropertyId, typeof(LayoutInfo.SizePropertyHandler)),
				new DomainMemberInfo(typeof(Anchor), "AbsoluteLocation", Anchor.AbsoluteLocationDomainPropertyId, typeof(Anchor.AbsoluteLocationPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShapeInfo), "Size", NodeShapeInfo.SizeDomainPropertyId, typeof(NodeShapeInfo.SizePropertyHandler)),
				new DomainMemberInfo(typeof(NodeShapeInfo), "RelativeLocation", NodeShapeInfo.RelativeLocationDomainPropertyId, typeof(NodeShapeInfo.RelativeLocationPropertyHandler)),
				new DomainMemberInfo(typeof(NodeShapeInfo), "ElementId", NodeShapeInfo.ElementIdDomainPropertyId, typeof(NodeShapeInfo.ElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "SourceLocation", LinkShapeInfo.SourceLocationDomainPropertyId, typeof(LinkShapeInfo.SourceLocationPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "TargetLocation", LinkShapeInfo.TargetLocationDomainPropertyId, typeof(LinkShapeInfo.TargetLocationPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "ElementId", LinkShapeInfo.ElementIdDomainPropertyId, typeof(LinkShapeInfo.ElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "SourceElementId", LinkShapeInfo.SourceElementIdDomainPropertyId, typeof(LinkShapeInfo.SourceElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "TargetElementId", LinkShapeInfo.TargetElementIdDomainPropertyId, typeof(LinkShapeInfo.TargetElementIdPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "LinkDomainClassId", LinkShapeInfo.LinkDomainClassIdDomainPropertyId, typeof(LinkShapeInfo.LinkDomainClassIdPropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "RoutingMode", LinkShapeInfo.RoutingModeDomainPropertyId, typeof(LinkShapeInfo.RoutingModePropertyHandler)),
				new DomainMemberInfo(typeof(LinkShapeInfo), "EdgePoints", LinkShapeInfo.EdgePointsDomainPropertyId, typeof(LinkShapeInfo.EdgePointsPropertyHandler)),
				new DomainMemberInfo(typeof(GraphicalDependencyShape), "RelationshipName", GraphicalDependencyShape.RelationshipNameDomainPropertyId, typeof(GraphicalDependencyShape.RelationshipNamePropertyHandler)),
				new DomainMemberInfo(typeof(GraphicalDependencyShape), "RelationshipTypeId", GraphicalDependencyShape.RelationshipTypeIdDomainPropertyId, typeof(GraphicalDependencyShape.RelationshipTypeIdPropertyHandler)),
				new DomainMemberInfo(typeof(GraphicalDependencyShape), "CustomInfo", GraphicalDependencyShape.CustomInfoDomainPropertyId, typeof(GraphicalDependencyShape.CustomInfoPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ShapeElementContainsChildShapes), "ParentShape", ShapeElementContainsChildShapes.ParentShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ShapeElementContainsChildShapes), "ChildShape", ShapeElementContainsChildShapes.ChildShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramsModelHasDiagrams), "DiagramsModel", DiagramsModelHasDiagrams.DiagramsModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramsModelHasDiagrams), "Diagram", DiagramsModelHasDiagrams.DiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasChildren), "Diagram", DiagramHasChildren.DiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasChildren), "ChildShape", DiagramHasChildren.ChildShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasLinkShapes), "Diagram", DiagramHasLinkShapes.DiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasLinkShapes), "LinkShape", DiagramHasLinkShapes.LinkShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeReferencesNestedChildren), "ParentShape", NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeReferencesNestedChildren), "ChildShape", NodeShapeReferencesNestedChildren.ChildShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeReferencesRelativeChildren), "ParentShape", NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeReferencesRelativeChildren), "ChildShape", NodeShapeReferencesRelativeChildren.ChildShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(LinkShapeHasSourceAnchor), "LinkShape", LinkShapeHasSourceAnchor.LinkShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(LinkShapeHasSourceAnchor), "SourceAnchor", LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId),
				new DomainRolePlayerInfo(typeof(LinkShapeHasTargetAnchor), "LinkShape", LinkShapeHasTargetAnchor.LinkShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(LinkShapeHasTargetAnchor), "TargetAnchor", LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SourceAnchorReferencesFromShape), "SourceAnchor", SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId),
				new DomainRolePlayerInfo(typeof(SourceAnchorReferencesFromShape), "NodeShape", SourceAnchorReferencesFromShape.NodeShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(TargetAnchorReferencesToShape), "TargetAnchor", TargetAnchorReferencesToShape.TargetAnchorDomainRoleId),
				new DomainRolePlayerInfo(typeof(TargetAnchorReferencesToShape), "NodeShape", TargetAnchorReferencesToShape.NodeShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasIncludedDiagrams), "SourceDiagram", DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramHasIncludedDiagrams), "TargetDiagram", DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayoutInfoHasChildrenInfos), "LayoutInfo", LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayoutInfoHasChildrenInfos), "NodeShapeInfo", LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayoutInfoHasLinkShapeInfos), "LayoutInfo", LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayoutInfoHasLinkShapeInfos), "LinkShapeInfo", LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramsModelHasLayoutInfos), "DiagramsModel", DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(DiagramsModelHasLayoutInfos), "LayoutInfo", DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeInfoHasChildrenInfos), "SourceNodeShapeInfo", NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(NodeShapeInfoHasChildrenInfos), "TargetNodeShapeInfo", NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesSourceDependencyShapes), "GraphicalDependenciesDiagram", GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesSourceDependencyShapes), "GraphicalDependencyShape", GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependencyShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesTargetDependencyShapes), "GraphicalDependenciesDiagram", GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesTargetDependencyShapes), "GraphicalDependencyShape", GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependencyShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependencyLinkShapeReferencesMainShape), "GraphicalDependencyLinkShape", GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependencyLinkShapeReferencesMainShape), "NodeShape", GraphicalDependencyLinkShapeReferencesMainShape.NodeShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesMainElementShape), "GraphicalDependenciesDiagram", GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependenciesDiagramReferencesMainElementShape), "NodeShape", GraphicalDependenciesDiagramReferencesMainElementShape.NodeShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependencyLinkShapeReferencesDependencyShape), "GraphicalDependencyLinkShape", GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId),
				new DomainRolePlayerInfo(typeof(GraphicalDependencyLinkShapeReferencesDependencyShape), "GraphicalDependencyShape", GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShapeDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(15);
				createElementMap.Add(typeof(DiagramsModel), 0);
				createElementMap.Add(typeof(NodeShape), 1);
				createElementMap.Add(typeof(Diagram), 2);
				createElementMap.Add(typeof(LinkShape), 3);
				createElementMap.Add(typeof(LayoutInfo), 4);
				createElementMap.Add(typeof(SourceAnchor), 5);
				createElementMap.Add(typeof(TargetAnchor), 6);
				createElementMap.Add(typeof(Anchor), 7);
				createElementMap.Add(typeof(NodeShapeInfo), 8);
				createElementMap.Add(typeof(LinkShapeInfo), 9);
				createElementMap.Add(typeof(GraphicalDependenciesDiagram), 10);
				createElementMap.Add(typeof(GraphicalDependencyLinkShape), 11);
				createElementMap.Add(typeof(GraphicalDependencyMainShape), 12);
				createElementMap.Add(typeof(GraphicalDependencyShape), 13);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				// A constructor was not generated for DiagramsModel because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 0: return new DiagramsModel(partition, propertyAssignments);
				// A constructor was not generated for NodeShape because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 1: return new NodeShape(partition, propertyAssignments);
				// A constructor was not generated for Diagram because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 2: return new Diagram(partition, propertyAssignments);
				// A constructor was not generated for LinkShape because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 3: return new LinkShape(partition, propertyAssignments);
				case 4: return new LayoutInfo(partition, propertyAssignments);
				case 5: return new SourceAnchor(partition, propertyAssignments);
				case 6: return new TargetAnchor(partition, propertyAssignments);
				case 7: return new Anchor(partition, propertyAssignments);
				case 8: return new NodeShapeInfo(partition, propertyAssignments);
				case 9: return new LinkShapeInfo(partition, propertyAssignments);
				// A constructor was not generated for GraphicalDependenciesDiagram because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 10: return new GraphicalDependenciesDiagram(partition, propertyAssignments);
				case 11: return new GraphicalDependencyLinkShape(partition, propertyAssignments);
				case 12: return new GraphicalDependencyMainShape(partition, propertyAssignments);
				case 13: return new GraphicalDependencyShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(20);
				createElementLinkMap.Add(typeof(ShapeElementContainsChildShapes), 0);
				createElementLinkMap.Add(typeof(DiagramsModelHasDiagrams), 1);
				createElementLinkMap.Add(typeof(DiagramHasChildren), 2);
				createElementLinkMap.Add(typeof(DiagramHasLinkShapes), 3);
				createElementLinkMap.Add(typeof(NodeShapeReferencesNestedChildren), 4);
				createElementLinkMap.Add(typeof(NodeShapeReferencesRelativeChildren), 5);
				createElementLinkMap.Add(typeof(LinkShapeHasSourceAnchor), 6);
				createElementLinkMap.Add(typeof(LinkShapeHasTargetAnchor), 7);
				createElementLinkMap.Add(typeof(SourceAnchorReferencesFromShape), 8);
				createElementLinkMap.Add(typeof(TargetAnchorReferencesToShape), 9);
				createElementLinkMap.Add(typeof(DiagramHasIncludedDiagrams), 10);
				createElementLinkMap.Add(typeof(LayoutInfoHasChildrenInfos), 11);
				createElementLinkMap.Add(typeof(LayoutInfoHasLinkShapeInfos), 12);
				createElementLinkMap.Add(typeof(DiagramsModelHasLayoutInfos), 13);
				createElementLinkMap.Add(typeof(NodeShapeInfoHasChildrenInfos), 14);
				createElementLinkMap.Add(typeof(GraphicalDependenciesDiagramReferencesSourceDependencyShapes), 15);
				createElementLinkMap.Add(typeof(GraphicalDependenciesDiagramReferencesTargetDependencyShapes), 16);
				createElementLinkMap.Add(typeof(GraphicalDependencyLinkShapeReferencesMainShape), 17);
				createElementLinkMap.Add(typeof(GraphicalDependenciesDiagramReferencesMainElementShape), 18);
				createElementLinkMap.Add(typeof(GraphicalDependencyLinkShapeReferencesDependencyShape), 19);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ShapeElementContainsChildShapes(partition, roleAssignments, propertyAssignments);
				case 1: return new DiagramsModelHasDiagrams(partition, roleAssignments, propertyAssignments);
				case 2: return new DiagramHasChildren(partition, roleAssignments, propertyAssignments);
				case 3: return new DiagramHasLinkShapes(partition, roleAssignments, propertyAssignments);
				case 4: return new NodeShapeReferencesNestedChildren(partition, roleAssignments, propertyAssignments);
				case 5: return new NodeShapeReferencesRelativeChildren(partition, roleAssignments, propertyAssignments);
				case 6: return new LinkShapeHasSourceAnchor(partition, roleAssignments, propertyAssignments);
				case 7: return new LinkShapeHasTargetAnchor(partition, roleAssignments, propertyAssignments);
				case 8: return new SourceAnchorReferencesFromShape(partition, roleAssignments, propertyAssignments);
				case 9: return new TargetAnchorReferencesToShape(partition, roleAssignments, propertyAssignments);
				case 10: return new DiagramHasIncludedDiagrams(partition, roleAssignments, propertyAssignments);
				case 11: return new LayoutInfoHasChildrenInfos(partition, roleAssignments, propertyAssignments);
				case 12: return new LayoutInfoHasLinkShapeInfos(partition, roleAssignments, propertyAssignments);
				case 13: return new DiagramsModelHasLayoutInfos(partition, roleAssignments, propertyAssignments);
				case 14: return new NodeShapeInfoHasChildrenInfos(partition, roleAssignments, propertyAssignments);
				case 15: return new GraphicalDependenciesDiagramReferencesSourceDependencyShapes(partition, roleAssignments, propertyAssignments);
				case 16: return new GraphicalDependenciesDiagramReferencesTargetDependencyShapes(partition, roleAssignments, propertyAssignments);
				case 17: return new GraphicalDependencyLinkShapeReferencesMainShape(partition, roleAssignments, propertyAssignments);
				case 18: return new GraphicalDependenciesDiagramReferencesMainElementShape(partition, roleAssignments, propertyAssignments);
				case 19: return new GraphicalDependencyLinkShapeReferencesDependencyShape(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DiagramsDSLDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (DiagramsDSLDomainModel.resourceManager == null)
				{
					DiagramsDSLDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(DiagramsDSLDomainModel).Assembly);
				}
				return DiagramsDSLDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return DiagramsDSLDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return DiagramsDSLDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DiagramsDSLDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new DiagramsDSLCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					
					DiagramsDSLDomainModel.copyClosure = copyFilter;
				}
				return DiagramsDSLDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DiagramsDSLDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new DiagramsDSLDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
		
					DiagramsDSLDomainModel.removeClosure = removeFilter;
				}
				return DiagramsDSLDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramsDSLDeleteClosure : DiagramsDSLDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DiagramsDSLDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramsDSLDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public DiagramsDSLDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShapeDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShapeDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShapeDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId, true);
			DomainRoles.Add(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramsDSLCopyClosure : DiagramsDSLCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DiagramsDSLCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DiagramsDSLCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DiagramsDSLCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: ShapeMovementBehaviour
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ShapeMovementBehaviour
	{
		/// <summary>
		/// Normal
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour.Normal
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour/Normal.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Normal,
		/// <summary>
		/// PositionRelativeToParent
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour.PositionRelativeToParent
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour/PositionRelativeToParent.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		PositionRelativeToParent,
		/// <summary>
		/// PositionOnEdgeOfParent
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour.PositionOnEdgeOfParent
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeMovementBehaviour/PositionOnEdgeOfParent.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		PositionOnEdgeOfParent,
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: ShapeResizingBehaviour
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ShapeResizingBehaviour
	{
		/// <summary>
		/// FixedHeight
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour.FixedHeight
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour/FixedHeight.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		FixedHeight,
		/// <summary>
		/// FixedWidth
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour.FixedWidth
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour/FixedWidth.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		FixedWidth,
		/// <summary>
		/// Fixed
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour.Fixed
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour/Fixed.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Fixed,
		/// <summary>
		/// Normal
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour.Normal
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeResizingBehaviour/Normal.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Normal,
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: PortPlacement
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PortPlacement
	{
		/// <summary>
		/// Left
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement.Left
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement/Left.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Left,
		/// <summary>
		/// Right
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement.Right
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement/Right.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Right,
		/// <summary>
		/// Top
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement.Top
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement/Top.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Top,
		/// <summary>
		/// Bottom
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement.Bottom
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.PortPlacement/Bottom.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Bottom,
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: LinkPlacement
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum LinkPlacement
	{
		/// <summary>
		/// Left
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement.Left
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement/Left.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Left,
		/// <summary>
		/// Top
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement.Top
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement/Top.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Top,
		/// <summary>
		/// Right
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement.Right
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement/Right.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Right,
		/// <summary>
		/// Bottom
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement.Bottom
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkPlacement/Bottom.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Bottom,
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: FixedGeometryPoints
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum FixedGeometryPoints
	{
		/// <summary>
		/// Source
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints.Source
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints/Source.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Source,
		/// <summary>
		/// Target
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints.Target
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints/Target.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Target,
		/// <summary>
		/// SourceAndTarget
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints.SourceAndTarget
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints/SourceAndTarget.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		SourceAndTarget,
		/// <summary>
		/// None
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints.None
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.FixedGeometryPoints/None.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		None,
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainEnumeration: RoutingMode
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum RoutingMode
	{
		/// <summary>
		/// Orthogonal
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode.Orthogonal
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode/Orthogonal.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Orthogonal,
		/// <summary>
		/// Straight
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode.Straight
		/// </summary>
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.RoutingMode/Straight.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		Straight,
	}
}
