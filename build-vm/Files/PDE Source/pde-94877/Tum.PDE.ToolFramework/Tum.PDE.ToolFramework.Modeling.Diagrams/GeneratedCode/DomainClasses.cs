//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass DiagramsModel
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("65f6d301-e0b5-434e-a9cb-29e43eb66be7")]
	public partial class DiagramsModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DiagramsModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x65f6d301, 0xe0b5, 0x434e, 0xa9, 0xcb, 0x29, 0xe4, 0x3e, 0xb6, 0x6b, 0xe7);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public DiagramsModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public DiagramsModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Diagrams opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Diagrams.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Diagram> Diagrams
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Diagram>, Diagram>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModelDomainRoleId);
			}
		}
		#endregion
		#region LayoutInfos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of LayoutInfos.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LayoutInfo> LayoutInfos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LayoutInfo>, LayoutInfo>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram sourceDiagram1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram;
			if (sourceDiagram1 != null)
			{
				// Create link for path DiagramsModelHasDiagrams.Diagrams
				this.Diagrams.Add(sourceDiagram1);

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo sourceLayoutInfo2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo;
			if (sourceLayoutInfo2 != null)
			{
				// Create link for path DiagramsModelHasLayoutInfos.LayoutInfos
				this.LayoutInfos.Add(sourceLayoutInfo2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram sourceDiagram1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram;
			if (sourceDiagram1 != null)
			{
				// Delete link for path DiagramsModelHasDiagrams.Diagrams
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel)this, sourceDiagram1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramsModelDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramDomainRoleId);
				}

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo sourceLayoutInfo2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo;
			if (sourceLayoutInfo2 != null)
			{
				// Delete link for path DiagramsModelHasLayoutInfos.LayoutInfos
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModel)this, sourceLayoutInfo2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.DiagramsModelDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainClass NodeShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8cfc7fb9-03d2-4dde-b2c6-3d49c13cd9bb")]
	public abstract partial class NodeShapeBase : ShapeElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NodeShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8cfc7fb9, 0x03d2, 0x4dde, 0xb2, 0xc6, 0x3d, 0x49, 0xc1, 0x3c, 0xd9, 0xbb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NodeShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ResizingBehaviour domain property code
		
		/// <summary>
		/// ResizingBehaviour domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResizingBehaviourDomainPropertyId = new global::System.Guid(0x0c94b389, 0x55f1, 0x4bd6, 0xab, 0x67, 0x2a, 0x30, 0x7d, 0x7a, 0x56, 0xad);
		
		/// <summary>
		/// Gets or sets the value of ResizingBehaviour domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Resizing
		/// Behaviour
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/ResizingBehaviour.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/ResizingBehaviour.Category", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/ResizingBehaviour.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ShapeResizingBehaviour.Normal)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("0c94b389-55f1-4bd6-ab67-2a307d7a56ad")]
		public ShapeResizingBehaviour ResizingBehaviour
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ResizingBehaviourPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.ResizingBehaviour domain property.
		/// </summary>
		internal sealed partial class ResizingBehaviourPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NodeShapeBase, ShapeResizingBehaviour>
		{
			private ResizingBehaviourPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.ResizingBehaviour domain property value handler.
			/// </summary>
			public static readonly ResizingBehaviourPropertyHandler Instance = new ResizingBehaviourPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.ResizingBehaviour domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResizingBehaviourDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ShapeResizingBehaviour GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ResizingBehaviour because its Kind is
				// set to Calculated. Please provide the GetResizingBehaviourValue()
				// method on the domain class.
				return element.GetResizingBehaviourValue();
			}
		
		}
		
		#endregion
		#region MovementBehaviour domain property code
		
		/// <summary>
		/// MovementBehaviour domain property Id.
		/// </summary>
		public static readonly global::System.Guid MovementBehaviourDomainPropertyId = new global::System.Guid(0xdac91424, 0x5ef2, 0x4356, 0x9a, 0xd1, 0x5d, 0x64, 0xec, 0xfd, 0x37, 0x5a);
		
		/// <summary>
		/// Gets or sets the value of MovementBehaviour domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Movement
		/// Behaviour
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/MovementBehaviour.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/MovementBehaviour.Category", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/MovementBehaviour.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ShapeMovementBehaviour.Normal)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("dac91424-5ef2-4356-9ad1-5d64ecfd375a")]
		public ShapeMovementBehaviour MovementBehaviour
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MovementBehaviourPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.MovementBehaviour domain property.
		/// </summary>
		internal sealed partial class MovementBehaviourPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NodeShapeBase, ShapeMovementBehaviour>
		{
			private MovementBehaviourPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.MovementBehaviour domain property value handler.
			/// </summary>
			public static readonly MovementBehaviourPropertyHandler Instance = new MovementBehaviourPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.MovementBehaviour domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MovementBehaviourDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ShapeMovementBehaviour GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for MovementBehaviour because its Kind is
				// set to Calculated. Please provide the GetMovementBehaviourValue()
				// method on the domain class.
				return element.GetMovementBehaviourValue();
			}
		
		}
		
		#endregion
		#region IsRelativeChildShape domain property code
		
		/// <summary>
		/// IsRelativeChildShape domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsRelativeChildShapeDomainPropertyId = new global::System.Guid(0x521f8ebb, 0x174e, 0x401c, 0xa1, 0xda, 0xc9, 0xfb, 0x17, 0x62, 0xdf, 0x1b);
		
		/// <summary>
		/// Gets or sets the value of IsRelativeChildShape domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Is Relative
		/// Child Shape
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/IsRelativeChildShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/IsRelativeChildShape.Category", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/IsRelativeChildShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("521f8ebb-174e-401c-a1da-c9fb1762df1b")]
		public global::System.Boolean IsRelativeChildShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsRelativeChildShapePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.IsRelativeChildShape domain property.
		/// </summary>
		internal sealed partial class IsRelativeChildShapePropertyHandler : DslModeling::CalculatedPropertyValueHandler<NodeShapeBase, global::System.Boolean>
		{
			private IsRelativeChildShapePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.IsRelativeChildShape domain property value handler.
			/// </summary>
			public static readonly IsRelativeChildShapePropertyHandler Instance = new IsRelativeChildShapePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.IsRelativeChildShape domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsRelativeChildShapeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsRelativeChildShape because its Kind is
				// set to Calculated. Please provide the GetIsRelativeChildShapeValue()
				// method on the domain class.
				return element.GetIsRelativeChildShapeValue();
			}
		
		}
		
		#endregion
		#region TakesPartInRelationship domain property code
		
		/// <summary>
		/// TakesPartInRelationship domain property Id.
		/// </summary>
		public static readonly global::System.Guid TakesPartInRelationshipDomainPropertyId = new global::System.Guid(0x76ef146c, 0x5948, 0x44c0, 0xbb, 0xfe, 0x0d, 0x36, 0x0f, 0xd0, 0xe3, 0x67);
		
		/// <summary>
		/// Gets or sets the value of TakesPartInRelationship domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Takes Part In
		/// Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/TakesPartInRelationship.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/TakesPartInRelationship.Category", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/TakesPartInRelationship.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("76ef146c-5948-44c0-bbfe-0d360fd0e367")]
		public global::System.Boolean TakesPartInRelationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TakesPartInRelationshipPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.TakesPartInRelationship domain property.
		/// </summary>
		internal sealed partial class TakesPartInRelationshipPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NodeShapeBase, global::System.Boolean>
		{
			private TakesPartInRelationshipPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.TakesPartInRelationship domain property value handler.
			/// </summary>
			public static readonly TakesPartInRelationshipPropertyHandler Instance = new TakesPartInRelationshipPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.TakesPartInRelationship domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TakesPartInRelationshipDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TakesPartInRelationship because its Kind is
				// set to Calculated. Please provide the GetTakesPartInRelationshipValue()
				// method on the domain class.
				return element.GetTakesPartInRelationshipValue();
			}
		
		}
		
		#endregion
		#region Location domain property code
		
		/// <summary>
		/// Location domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationDomainPropertyId = new global::System.Guid(0xb04df7b8, 0x1fcb, 0x4d96, 0xbf, 0x42, 0xcb, 0x64, 0x23, 0x9f, 0xf2, 0x52);
		
		/// <summary>
		/// Storage for Location
		/// </summary>
		private PointD locationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Location domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/Location.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/Location.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b04df7b8-1fcb-4d96-bf42-cb64239ff252")]
		public PointD Location
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				LocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.Location domain property.
		/// </summary>
		internal sealed partial class LocationPropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeBase, PointD>
		{
			private LocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.Location domain property value handler.
			/// </summary>
			public static readonly LocationPropertyHandler Instance = new LocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.Location domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeBase element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Size domain property code
		
		/// <summary>
		/// Size domain property Id.
		/// </summary>
		public static readonly global::System.Guid SizeDomainPropertyId = new global::System.Guid(0xcf2bf0b3, 0x0648, 0x4fa7, 0xad, 0x45, 0x0d, 0x34, 0x04, 0xf0, 0xc8, 0xc2);
		
		/// <summary>
		/// Storage for Size
		/// </summary>
		private SizeD sizePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Size domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Size
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/Size.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/Size.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("cf2bf0b3-0648-4fa7-ad45-0d3404f0c8c2")]
		public SizeD Size
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sizePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				SizePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.Size domain property.
		/// </summary>
		internal sealed partial class SizePropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeBase, SizeD>
		{
			private SizePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.Size domain property value handler.
			/// </summary>
			public static readonly SizePropertyHandler Instance = new SizePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.Size domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SizeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SizeD GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sizePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeBase element, SizeD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SizeD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sizePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AbsoluteLocation domain property code
		
		/// <summary>
		/// AbsoluteLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid AbsoluteLocationDomainPropertyId = new global::System.Guid(0x9a9808d2, 0xc322, 0x4626, 0x95, 0x47, 0xa6, 0x0d, 0x94, 0x69, 0x77, 0x01);
		
		/// <summary>
		/// Storage for AbsoluteLocation
		/// </summary>
		private PointD absoluteLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of AbsoluteLocation domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Absolute
		/// Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/AbsoluteLocation.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/AbsoluteLocation.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("9a9808d2-c322-4626-9547-a60d94697701")]
		public PointD AbsoluteLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return absoluteLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				AbsoluteLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.AbsoluteLocation domain property.
		/// </summary>
		internal sealed partial class AbsoluteLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeBase, PointD>
		{
			private AbsoluteLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.AbsoluteLocation domain property value handler.
			/// </summary>
			public static readonly AbsoluteLocationPropertyHandler Instance = new AbsoluteLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.AbsoluteLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AbsoluteLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.absoluteLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeBase element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.absoluteLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PlacementSide domain property code
		
		/// <summary>
		/// PlacementSide domain property Id.
		/// </summary>
		public static readonly global::System.Guid PlacementSideDomainPropertyId = new global::System.Guid(0x380b4fd4, 0x15c5, 0x4ffc, 0x8a, 0x56, 0x65, 0x17, 0x9d, 0x32, 0x73, 0xbc);
		
		/// <summary>
		/// Storage for PlacementSide
		/// </summary>
		private PortPlacement placementSidePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PlacementSide domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.Placement Side
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/PlacementSide.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape/PlacementSide.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("380b4fd4-15c5-4ffc-8a56-65179d3273bc")]
		public PortPlacement PlacementSide
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return placementSidePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PlacementSidePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShape.PlacementSide domain property.
		/// </summary>
		internal sealed partial class PlacementSidePropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeBase, PortPlacement>
		{
			private PlacementSidePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShape.PlacementSide domain property value handler.
			/// </summary>
			public static readonly PlacementSidePropertyHandler Instance = new PlacementSidePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShape.PlacementSide domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PlacementSideDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PortPlacement GetValue(NodeShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.placementSidePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeBase element, PortPlacement newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PortPlacement oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.placementSidePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InternalChildren opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InternalChildren.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShape
		/// </summary>
		internal virtual DslModeling::LinkedElementCollection<NodeShape> InternalChildren
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShapeDomainRoleId);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShape
		/// </summary>
		public virtual NodeShape Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShapeDomainRoleId) as NodeShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShapeDomainRoleId, value);
			}
		}
		#endregion
		#region InternalDiagram opposite domain role accessor
		/// <summary>
		/// Gets or sets InternalDiagram.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShape
		/// </summary>
		internal virtual Diagram InternalDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShapeDomainRoleId) as Diagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShapeDomainRoleId, value);
			}
		}
		#endregion
		#region NestedChildren opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NestedChildren.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShape
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NodeShape> NestedChildren
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesNestedChildren.ParentShapeDomainRoleId);
			}
		}
		#endregion
		#region RelativeChildren opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RelativeChildren.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShape
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NodeShape> RelativeChildren
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeReferencesRelativeChildren.ParentShapeDomainRoleId);
			}
		}
		#endregion
		#region SourceAnchors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceAnchors.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.NodeShape
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SourceAnchor> SourceAnchors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SourceAnchor>, SourceAnchor>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.NodeShapeDomainRoleId);
			}
		}
		#endregion
		#region TargetAnchors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetAnchors.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.NodeShape
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TargetAnchor> TargetAnchors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TargetAnchor>, TargetAnchor>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.NodeShapeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape sourceNodeShape1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape;
			if (sourceNodeShape1 != null)
			{
				// Create link for path ShapeElementContainsChildShapes.InternalChildren
				this.InternalChildren.Add(sourceNodeShape1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape sourceNodeShape1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape;
			if (sourceNodeShape1 != null)
			{
				// Delete link for path ShapeElementContainsChildShapes.InternalChildren
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape)this, sourceNodeShape1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ParentShapeDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElementContainsChildShapes.ChildShapeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass NodeShape
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class NodeShape : NodeShapeBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public NodeShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public NodeShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainClass Diagram
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0fef1f12-2fe2-4587-9385-bcd7922588f3")]
	public abstract partial class DiagramBase : ShapeElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Diagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0fef1f12, 0x2fe2, 0x4587, 0x93, 0x85, 0xbc, 0xd7, 0x92, 0x25, 0x88, 0xf3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x40aa6458, 0x158d, 0x40e6, 0xa6, 0x16, 0x65, 0x54, 0x00, 0x3e, 0x04, 0xb1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram/Name.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram/Name.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("40aa6458-158d-40e6-a616-6554003e04b1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Diagram.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DiagramBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Diagram.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Diagram.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DiagramBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DiagramsModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DiagramsModel.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.Diagram
		/// </summary>
		public virtual DiagramsModel DiagramsModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramDomainRoleId) as DiagramsModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasDiagrams.DiagramDomainRoleId, value);
			}
		}
		#endregion
		#region Children opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Children.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.Diagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NodeShape> Children
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShape>, NodeShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DiagramDomainRoleId);
			}
		}
		#endregion
		#region LinkShapes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of LinkShapes.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.Diagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LinkShape> LinkShapes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LinkShape>, LinkShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DiagramDomainRoleId);
			}
		}
		#endregion
		#region IncludedDiagrams opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IncludedDiagrams.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Diagram> IncludedDiagrams
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Diagram>, Diagram>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId);
			}
		}
		#endregion
		#region ParentDiagram opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentDiagram.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagram
		/// </summary>
		internal virtual Diagram ParentDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId) as Diagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram sourceDiagram1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram;
			if (sourceDiagram1 != null)
			{
				// Create link for path DiagramHasIncludedDiagrams.IncludedDiagrams
				this.IncludedDiagrams.Add(sourceDiagram1);

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape sourceLinkShape2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape;
			if (sourceLinkShape2 != null)
			{
				// Create link for path DiagramHasLinkShapes.LinkShapes
				this.LinkShapes.Add(sourceLinkShape2);

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape sourceNodeShape3 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape;
			if (sourceNodeShape3 != null)
			{
				// Create link for path DiagramHasChildren.Children
				this.Children.Add(sourceNodeShape3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram sourceDiagram1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram;
			if (sourceDiagram1 != null)
			{
				// Delete link for path DiagramHasIncludedDiagrams.IncludedDiagrams
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram)this, sourceDiagram1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.SourceDiagramDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasIncludedDiagrams.TargetDiagramDomainRoleId);
				}

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape sourceLinkShape2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape;
			if (sourceLinkShape2 != null)
			{
				// Delete link for path DiagramHasLinkShapes.LinkShapes
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram)this, sourceLinkShape2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.DiagramDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShapeDomainRoleId);
				}

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape sourceNodeShape3 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShape;
			if (sourceNodeShape3 != null)
			{
				// Delete link for path DiagramHasChildren.Children
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram)this, sourceNodeShape3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.DiagramDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasChildren.ChildShapeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Diagram
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.Diagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Diagram : DiagramBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Diagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Diagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainClass LinkShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3e757998-961c-42e5-880f-0e73264d076d")]
	public abstract partial class LinkShapeBase : ShapeElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LinkShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3e757998, 0x961c, 0x42e5, 0x88, 0x0f, 0x0e, 0x73, 0x26, 0x4d, 0x07, 0x6d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected LinkShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EdgePoints domain property code
		
		/// <summary>
		/// EdgePoints domain property Id.
		/// </summary>
		public static readonly global::System.Guid EdgePointsDomainPropertyId = new global::System.Guid(0xbc0e8612, 0x29b6, 0x4568, 0x8c, 0xc6, 0x5d, 0x17, 0x76, 0xe5, 0x06, 0xb6);
		
		/// <summary>
		/// Storage for EdgePoints
		/// </summary>
		private EdgePointCollection edgePointsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of EdgePoints domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.Edge Points
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/EdgePoints.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/EdgePoints.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc0e8612-29b6-4568-8cc6-5d1776e506b6")]
		public EdgePointCollection EdgePoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return edgePointsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EdgePointsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShape.EdgePoints domain property.
		/// </summary>
		internal sealed partial class EdgePointsPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeBase, EdgePointCollection>
		{
			private EdgePointsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShape.EdgePoints domain property value handler.
			/// </summary>
			public static readonly EdgePointsPropertyHandler Instance = new EdgePointsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShape.EdgePoints domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EdgePointsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EdgePointCollection GetValue(LinkShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.edgePointsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeBase element, EdgePointCollection newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EdgePointCollection oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.edgePointsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DummyProperty domain property code
		
		/// <summary>
		/// DummyProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid DummyPropertyDomainPropertyId = new global::System.Guid(0x18b063f4, 0xa36f, 0x4c1b, 0x96, 0x0e, 0xe2, 0xf7, 0x4a, 0x2c, 0xf0, 0xd4);
		
		/// <summary>
		/// Storage for DummyProperty
		/// </summary>
		private global::System.String dummyPropertyPropertyStorage = "Dummy property";
		
		/// <summary>
		/// Gets or sets the value of DummyProperty domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.Dummy Property
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/DummyProperty.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/DummyProperty.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Dummy property")]
		[DslModeling::DomainObjectId("18b063f4-a36f-4c1b-960e-e2f74a2cf0d4")]
		public global::System.String DummyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dummyPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DummyPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShape.DummyProperty domain property.
		/// </summary>
		internal sealed partial class DummyPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeBase, global::System.String>
		{
			private DummyPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShape.DummyProperty domain property value handler.
			/// </summary>
			public static readonly DummyPropertyPropertyHandler Instance = new DummyPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShape.DummyProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DummyPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LinkShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dummyPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dummyPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoutingMode domain property code
		
		/// <summary>
		/// RoutingMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoutingModeDomainPropertyId = new global::System.Guid(0x5a6c9d6e, 0x1597, 0x4529, 0x9b, 0x5a, 0x8f, 0xb9, 0x0e, 0x6e, 0x6c, 0xd2);
		
		/// <summary>
		/// Storage for RoutingMode
		/// </summary>
		private RoutingMode routingModePropertyStorage = RoutingMode.Orthogonal;
		
		/// <summary>
		/// Gets or sets the value of RoutingMode domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape.Routing Mode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/RoutingMode.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape/RoutingMode.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(RoutingMode.Orthogonal)]
		[DslModeling::DomainObjectId("5a6c9d6e-1597-4529-9b5a-8fb90e6e6cd2")]
		public RoutingMode RoutingMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return routingModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoutingModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShape.RoutingMode domain property.
		/// </summary>
		internal sealed partial class RoutingModePropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeBase, RoutingMode>
		{
			private RoutingModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShape.RoutingMode domain property value handler.
			/// </summary>
			public static readonly RoutingModePropertyHandler Instance = new RoutingModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShape.RoutingMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoutingModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RoutingMode GetValue(LinkShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.routingModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeBase element, RoutingMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RoutingMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.routingModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Diagram opposite domain role accessor
		/// <summary>
		/// Gets or sets Diagram.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShape
		/// </summary>
		public virtual Diagram Diagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShapeDomainRoleId) as Diagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramHasLinkShapes.LinkShapeDomainRoleId, value);
			}
		}
		#endregion
		#region SourceAnchor opposite domain role accessor
		/// <summary>
		/// Gets or sets SourceAnchor.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShape
		/// </summary>
		public virtual SourceAnchor SourceAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId) as SourceAnchor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId, value);
			}
		}
		#endregion
		#region TargetAnchor opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetAnchor.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShape
		/// </summary>
		public virtual TargetAnchor TargetAnchor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId) as TargetAnchor;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: LinkShapeHasTargetAnchor.TargetAnchor
					if (this.TargetAnchor != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: LinkShapeHasSourceAnchor.SourceAnchor
					if (this.SourceAnchor != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor sourceTargetAnchor1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor;
			if (sourceTargetAnchor1 != null)
			{
				// Create link for path LinkShapeHasTargetAnchor.TargetAnchor
				this.TargetAnchor = sourceTargetAnchor1;

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor sourceSourceAnchor2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor;
			if (sourceSourceAnchor2 != null)
			{
				// Create link for path LinkShapeHasSourceAnchor.SourceAnchor
				this.SourceAnchor = sourceSourceAnchor2;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor sourceTargetAnchor1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor;
			if (sourceTargetAnchor1 != null)
			{
				// Delete link for path LinkShapeHasTargetAnchor.TargetAnchor
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape)this, sourceTargetAnchor1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.LinkShapeDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId);
				}

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor sourceSourceAnchor2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor;
			if (sourceSourceAnchor2 != null)
			{
				// Delete link for path LinkShapeHasSourceAnchor.SourceAnchor
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape)this, sourceSourceAnchor2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.LinkShapeDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass LinkShape
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class LinkShape : LinkShapeBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public LinkShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public LinkShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainClass ShapeElement
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a7670c9f-e755-460f-9333-370c60268cd7")]
	public abstract partial class ShapeElementBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ShapeElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7670c9f, 0xe755, 0x460f, 0x93, 0x33, 0x37, 0x0c, 0x60, 0x26, 0x8c, 0xd7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ShapeElementBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InternalElementId domain property code
		
		/// <summary>
		/// InternalElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid InternalElementIdDomainPropertyId = new global::System.Guid(0xc01901de, 0x38ff, 0x42b3, 0xad, 0x42, 0x08, 0x87, 0x96, 0x55, 0x48, 0x98);
		
		/// <summary>
		/// Storage for InternalElementId
		/// </summary>
		private global::System.Guid internalElementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of InternalElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement.Internal
		/// Element Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement/InternalElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement/InternalElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c01901de-38ff-42b3-ad42-088796554898")]
		protected internal global::System.Guid InternalElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return internalElementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InternalElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ShapeElement.InternalElementId domain property.
		/// </summary>
		internal sealed partial class InternalElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ShapeElementBase, global::System.Guid>
		{
			private InternalElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ShapeElement.InternalElementId domain property value handler.
			/// </summary>
			public static readonly InternalElementIdPropertyHandler Instance = new InternalElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ShapeElement.InternalElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InternalElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ShapeElementBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.internalElementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ShapeElementBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.internalElementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ShapeElement
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.ShapeElement
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public abstract partial class ShapeElement : ShapeElementBase
	{
		#region Constructors
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ShapeElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass LayoutInfo
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92ae8c5c-86ef-41fb-8024-6d590872e2b7")]
	public partial class LayoutInfo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LayoutInfo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92ae8c5c, 0x86ef, 0x41fb, 0x80, 0x24, 0x6d, 0x59, 0x08, 0x72, 0xe2, 0xb7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LayoutInfo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LayoutInfo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region HostElementId domain property code
		
		/// <summary>
		/// HostElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid HostElementIdDomainPropertyId = new global::System.Guid(0x6d3395ec, 0x0b6a, 0x4e27, 0x96, 0x3a, 0x35, 0x17, 0x0c, 0x8e, 0x19, 0x9e);
		
		/// <summary>
		/// Storage for HostElementId
		/// </summary>
		private global::System.Guid hostElementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HostElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo.Host Element
		/// Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo/HostElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo/HostElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6d3395ec-0b6a-4e27-963a-35170c8e199e")]
		public global::System.Guid HostElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hostElementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HostElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LayoutInfo.HostElementId domain property.
		/// </summary>
		internal sealed partial class HostElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<LayoutInfo, global::System.Guid>
		{
			private HostElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LayoutInfo.HostElementId domain property value handler.
			/// </summary>
			public static readonly HostElementIdPropertyHandler Instance = new HostElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LayoutInfo.HostElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HostElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(LayoutInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hostElementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LayoutInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hostElementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Size domain property code
		
		/// <summary>
		/// Size domain property Id.
		/// </summary>
		public static readonly global::System.Guid SizeDomainPropertyId = new global::System.Guid(0x61f86fda, 0x1438, 0x4ce0, 0xa5, 0x75, 0x1f, 0xb7, 0x26, 0xed, 0xfc, 0x6e);
		
		/// <summary>
		/// Storage for Size
		/// </summary>
		private SizeD sizePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Size domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo.Size
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo/Size.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo/Size.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("61f86fda-1438-4ce0-a575-1fb726edfc6e")]
		public SizeD Size
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sizePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SizePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LayoutInfo.Size domain property.
		/// </summary>
		internal sealed partial class SizePropertyHandler : DslModeling::DomainPropertyValueHandler<LayoutInfo, SizeD>
		{
			private SizePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LayoutInfo.Size domain property value handler.
			/// </summary>
			public static readonly SizePropertyHandler Instance = new SizePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LayoutInfo.Size domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SizeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SizeD GetValue(LayoutInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sizePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LayoutInfo element, SizeD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SizeD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sizePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ChildrenInfos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildrenInfos.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NodeShapeInfo> ChildrenInfos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShapeInfo>, NodeShapeInfo>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId);
			}
		}
		#endregion
		#region LinkShapeInfos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of LinkShapeInfos.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LinkShapeInfo> LinkShapeInfos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<LinkShapeInfo>, LinkShapeInfo>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId);
			}
		}
		#endregion
		#region DiagramsModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DiagramsModel.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfo
		/// </summary>
		public virtual DiagramsModel DiagramsModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId) as DiagramsModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsModelHasLayoutInfos.LayoutInfoDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo sourceLinkShapeInfo1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo;
			if (sourceLinkShapeInfo1 != null)
			{
				// Create link for path LayoutInfoHasLinkShapeInfos.LinkShapeInfos
				this.LinkShapeInfos.Add(sourceLinkShapeInfo1);

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo sourceNodeShapeInfo2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo;
			if (sourceNodeShapeInfo2 != null)
			{
				// Create link for path LayoutInfoHasChildrenInfos.ChildrenInfos
				this.ChildrenInfos.Add(sourceNodeShapeInfo2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo sourceLinkShapeInfo1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo;
			if (sourceLinkShapeInfo1 != null)
			{
				// Delete link for path LayoutInfoHasLinkShapeInfos.LinkShapeInfos
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo)this, sourceLinkShapeInfo1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LayoutInfoDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId);
				}

				return;
			}
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo sourceNodeShapeInfo2 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo;
			if (sourceNodeShapeInfo2 != null)
			{
				// Delete link for path LayoutInfoHasChildrenInfos.ChildrenInfos
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfo)this, sourceNodeShapeInfo2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.LayoutInfoDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass SourceAnchor
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("876eb302-5ad9-492d-b825-0a9e8ffcf7a1")]
	public partial class SourceAnchor : Anchor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SourceAnchor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x876eb302, 0x5ad9, 0x492d, 0xb8, 0x25, 0x0a, 0x9e, 0x8f, 0xfc, 0xf7, 0xa1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SourceAnchor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SourceAnchor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LinkShape opposite domain role accessor
		/// <summary>
		/// Gets or sets LinkShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchor
		/// </summary>
		public virtual LinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId) as LinkShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasSourceAnchor.SourceAnchorDomainRoleId, value);
			}
		}
		#endregion
		#region FromShape opposite domain role accessor
		/// <summary>
		/// Gets or sets FromShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchor
		/// </summary>
		public virtual NodeShape FromShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId) as NodeShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.SourceAnchorReferencesFromShape.SourceAnchorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass TargetAnchor
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cfa90485-01cd-431a-a9f1-35188946607b")]
	public partial class TargetAnchor : Anchor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TargetAnchor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcfa90485, 0x01cd, 0x431a, 0xa9, 0xf1, 0x35, 0x18, 0x89, 0x46, 0x60, 0x7b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TargetAnchor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TargetAnchor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LinkShape opposite domain role accessor
		/// <summary>
		/// Gets or sets LinkShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchor
		/// </summary>
		public virtual LinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId) as LinkShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeHasTargetAnchor.TargetAnchorDomainRoleId, value);
			}
		}
		#endregion
		#region ToShape opposite domain role accessor
		/// <summary>
		/// Gets or sets ToShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchor
		/// </summary>
		public virtual NodeShape ToShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchorDomainRoleId) as NodeShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.TargetAnchorReferencesToShape.TargetAnchorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass Anchor
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("21d8aaf9-9abf-49fb-9e63-769132a1ec2e")]
	public partial class Anchor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Anchor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x21d8aaf9, 0x9abf, 0x49fb, 0x9e, 0x63, 0x76, 0x91, 0x32, 0xa1, 0xec, 0x2e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Anchor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Anchor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AbsoluteLocation domain property code
		
		/// <summary>
		/// AbsoluteLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid AbsoluteLocationDomainPropertyId = new global::System.Guid(0x2a93ff48, 0xaf72, 0x48be, 0xa9, 0xeb, 0xac, 0xcc, 0xc9, 0xe9, 0xca, 0x64);
		
		/// <summary>
		/// Storage for AbsoluteLocation
		/// </summary>
		private PointD absoluteLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of AbsoluteLocation domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor.Absolute Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor/AbsoluteLocation.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.Anchor/AbsoluteLocation.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2a93ff48-af72-48be-a9eb-acccc9e9ca64")]
		public PointD AbsoluteLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return absoluteLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AbsoluteLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Anchor.AbsoluteLocation domain property.
		/// </summary>
		internal sealed partial class AbsoluteLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<Anchor, PointD>
		{
			private AbsoluteLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Anchor.AbsoluteLocation domain property value handler.
			/// </summary>
			public static readonly AbsoluteLocationPropertyHandler Instance = new AbsoluteLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Anchor.AbsoluteLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AbsoluteLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(Anchor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.absoluteLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Anchor element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.absoluteLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass NodeShapeInfo
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fbb19920-a0cf-4ec4-bdcb-4e86cc60b0d0")]
	public partial class NodeShapeInfo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NodeShapeInfo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfbb19920, 0xa0cf, 0x4ec4, 0xbd, 0xcb, 0x4e, 0x86, 0xcc, 0x60, 0xb0, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NodeShapeInfo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NodeShapeInfo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Size domain property code
		
		/// <summary>
		/// Size domain property Id.
		/// </summary>
		public static readonly global::System.Guid SizeDomainPropertyId = new global::System.Guid(0x057892d6, 0xfd54, 0x4abf, 0xa5, 0x76, 0xda, 0x42, 0xb4, 0x66, 0x3e, 0x2a);
		
		/// <summary>
		/// Storage for Size
		/// </summary>
		private SizeD sizePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Size domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.Size
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/Size.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/Size.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("057892d6-fd54-4abf-a576-da42b4663e2a")]
		public SizeD Size
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sizePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SizePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShapeInfo.Size domain property.
		/// </summary>
		internal sealed partial class SizePropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeInfo, SizeD>
		{
			private SizePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShapeInfo.Size domain property value handler.
			/// </summary>
			public static readonly SizePropertyHandler Instance = new SizePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShapeInfo.Size domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SizeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SizeD GetValue(NodeShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sizePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeInfo element, SizeD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SizeD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sizePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RelativeLocation domain property code
		
		/// <summary>
		/// RelativeLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelativeLocationDomainPropertyId = new global::System.Guid(0xfee92e0a, 0x2a0e, 0x4458, 0xbb, 0xbc, 0x55, 0x18, 0x46, 0xe4, 0xe3, 0xa5);
		
		/// <summary>
		/// Storage for RelativeLocation
		/// </summary>
		private PointD relativeLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RelativeLocation domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.Relative
		/// Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/RelativeLocation.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/RelativeLocation.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fee92e0a-2a0e-4458-bbbc-551846e4e3a5")]
		public PointD RelativeLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relativeLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelativeLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShapeInfo.RelativeLocation domain property.
		/// </summary>
		internal sealed partial class RelativeLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeInfo, PointD>
		{
			private RelativeLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShapeInfo.RelativeLocation domain property value handler.
			/// </summary>
			public static readonly RelativeLocationPropertyHandler Instance = new RelativeLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShapeInfo.RelativeLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelativeLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(NodeShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.relativeLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeInfo element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relativeLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ElementId domain property code
		
		/// <summary>
		/// ElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElementIdDomainPropertyId = new global::System.Guid(0x8eab5e4e, 0x2f14, 0x47d3, 0x9c, 0xd3, 0x23, 0xa8, 0x32, 0xad, 0x4c, 0xaf);
		
		/// <summary>
		/// Storage for ElementId
		/// </summary>
		private global::System.Guid elementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.Element Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/ElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo/ElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8eab5e4e-2f14-47d3-9cd3-23a832ad4caf")]
		public global::System.Guid ElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NodeShapeInfo.ElementId domain property.
		/// </summary>
		internal sealed partial class ElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<NodeShapeInfo, global::System.Guid>
		{
			private ElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NodeShapeInfo.ElementId domain property value handler.
			/// </summary>
			public static readonly ElementIdPropertyHandler Instance = new ElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NodeShapeInfo.ElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(NodeShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NodeShapeInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LayoutInfo opposite domain role accessor
		/// <summary>
		/// Gets or sets LayoutInfo.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfo
		/// </summary>
		public virtual LayoutInfo LayoutInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId) as LayoutInfo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasChildrenInfos.NodeShapeInfoDomainRoleId, value);
			}
		}
		#endregion
		#region ChildrenInfos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildrenInfos.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NodeShapeInfo> ChildrenInfos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NodeShapeInfo>, NodeShapeInfo>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId);
			}
		}
		#endregion
		#region ParentInfo opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentInfo.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfo
		/// </summary>
		public virtual NodeShapeInfo ParentInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId) as NodeShapeInfo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo sourceNodeShapeInfo1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo;
			if (sourceNodeShapeInfo1 != null)
			{
				// Create link for path NodeShapeInfoHasChildrenInfos.ChildrenInfos
				this.ChildrenInfos.Add(sourceNodeShapeInfo1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo sourceNodeShapeInfo1 = sourceElement as global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo;
			if (sourceNodeShapeInfo1 != null)
			{
				// Delete link for path NodeShapeInfoHasChildrenInfos.ChildrenInfos
				
				foreach (DslModeling::ElementLink link in global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.GetLinks((global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfo)this, sourceNodeShapeInfo1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.SourceNodeShapeInfoDomainRoleId, global::Tum.PDE.ToolFramework.Modeling.Diagrams.NodeShapeInfoHasChildrenInfos.TargetNodeShapeInfoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass LinkShapeInfo
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1eb4dc07-6078-4528-a0a6-5e82ba1baae5")]
	public partial class LinkShapeInfo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LinkShapeInfo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1eb4dc07, 0x6078, 0x4528, 0xa0, 0xa6, 0x5e, 0x82, 0xba, 0x1b, 0xaa, 0xe5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LinkShapeInfo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LinkShapeInfo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceLocation domain property code
		
		/// <summary>
		/// SourceLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceLocationDomainPropertyId = new global::System.Guid(0x7ed37ead, 0x5b39, 0x4570, 0xbc, 0xf8, 0xe3, 0x28, 0xae, 0xb1, 0xf2, 0xf1);
		
		/// <summary>
		/// Storage for SourceLocation
		/// </summary>
		private PointD sourceLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SourceLocation domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Source
		/// Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/SourceLocation.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/SourceLocation.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7ed37ead-5b39-4570-bcf8-e328aeb1f2f1")]
		public PointD SourceLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.SourceLocation domain property.
		/// </summary>
		internal sealed partial class SourceLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, PointD>
		{
			private SourceLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.SourceLocation domain property value handler.
			/// </summary>
			public static readonly SourceLocationPropertyHandler Instance = new SourceLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.SourceLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetLocation domain property code
		
		/// <summary>
		/// TargetLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetLocationDomainPropertyId = new global::System.Guid(0x68470f3a, 0xb314, 0x4bb9, 0x8f, 0x1d, 0x3f, 0x04, 0x05, 0xaf, 0xa6, 0x86);
		
		/// <summary>
		/// Storage for TargetLocation
		/// </summary>
		private PointD targetLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TargetLocation domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Target
		/// Location
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/TargetLocation.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/TargetLocation.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("68470f3a-b314-4bb9-8f1d-3f0405afa686")]
		public PointD TargetLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.TargetLocation domain property.
		/// </summary>
		internal sealed partial class TargetLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, PointD>
		{
			private TargetLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.TargetLocation domain property value handler.
			/// </summary>
			public static readonly TargetLocationPropertyHandler Instance = new TargetLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.TargetLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PointD GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, PointD newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PointD oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ElementId domain property code
		
		/// <summary>
		/// ElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElementIdDomainPropertyId = new global::System.Guid(0xec4a9b3a, 0x8f63, 0x41f7, 0xbe, 0x53, 0x03, 0x0b, 0xda, 0xb3, 0x9a, 0x48);
		
		/// <summary>
		/// Storage for ElementId
		/// </summary>
		private global::System.Guid elementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Element Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/ElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/ElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ec4a9b3a-8f63-41f7-be53-030bdab39a48")]
		public global::System.Guid ElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.ElementId domain property.
		/// </summary>
		internal sealed partial class ElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, global::System.Guid>
		{
			private ElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.ElementId domain property value handler.
			/// </summary>
			public static readonly ElementIdPropertyHandler Instance = new ElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.ElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceElementId domain property code
		
		/// <summary>
		/// SourceElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceElementIdDomainPropertyId = new global::System.Guid(0x89a01e24, 0xddb1, 0x48b3, 0xa3, 0x49, 0x9c, 0x6b, 0xd3, 0x27, 0xa9, 0x2c);
		
		/// <summary>
		/// Storage for SourceElementId
		/// </summary>
		private global::System.Guid sourceElementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SourceElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Source
		/// Element Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/SourceElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/SourceElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89a01e24-ddb1-48b3-a349-9c6bd327a92c")]
		public global::System.Guid SourceElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceElementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.SourceElementId domain property.
		/// </summary>
		internal sealed partial class SourceElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, global::System.Guid>
		{
			private SourceElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.SourceElementId domain property value handler.
			/// </summary>
			public static readonly SourceElementIdPropertyHandler Instance = new SourceElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.SourceElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceElementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceElementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetElementId domain property code
		
		/// <summary>
		/// TargetElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetElementIdDomainPropertyId = new global::System.Guid(0x1eb373a1, 0x90d7, 0x44be, 0x8c, 0xdb, 0xff, 0xd6, 0x40, 0x93, 0x92, 0xf8);
		
		/// <summary>
		/// Storage for TargetElementId
		/// </summary>
		private global::System.Guid targetElementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TargetElementId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Target
		/// Element Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/TargetElementId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/TargetElementId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1eb373a1-90d7-44be-8cdb-ffd6409392f8")]
		public global::System.Guid TargetElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetElementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.TargetElementId domain property.
		/// </summary>
		internal sealed partial class TargetElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, global::System.Guid>
		{
			private TargetElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.TargetElementId domain property value handler.
			/// </summary>
			public static readonly TargetElementIdPropertyHandler Instance = new TargetElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.TargetElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetElementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetElementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LinkDomainClassId domain property code
		
		/// <summary>
		/// LinkDomainClassId domain property Id.
		/// </summary>
		public static readonly global::System.Guid LinkDomainClassIdDomainPropertyId = new global::System.Guid(0x5d93b55e, 0xed38, 0x4690, 0xbb, 0x45, 0x72, 0x0f, 0xf5, 0x47, 0x72, 0x88);
		
		/// <summary>
		/// Storage for LinkDomainClassId
		/// </summary>
		private global::System.Guid linkDomainClassIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of LinkDomainClassId domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Link
		/// Domain Class Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/LinkDomainClassId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/LinkDomainClassId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5d93b55e-ed38-4690-bb45-720ff5477288")]
		public global::System.Guid LinkDomainClassId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return linkDomainClassIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LinkDomainClassIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.LinkDomainClassId domain property.
		/// </summary>
		internal sealed partial class LinkDomainClassIdPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, global::System.Guid>
		{
			private LinkDomainClassIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.LinkDomainClassId domain property value handler.
			/// </summary>
			public static readonly LinkDomainClassIdPropertyHandler Instance = new LinkDomainClassIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.LinkDomainClassId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LinkDomainClassIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.linkDomainClassIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.linkDomainClassIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoutingMode domain property code
		
		/// <summary>
		/// RoutingMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoutingModeDomainPropertyId = new global::System.Guid(0x0572b9bd, 0x8dff, 0x4ba0, 0xab, 0x6c, 0x30, 0xa8, 0xf2, 0xef, 0x5c, 0xd7);
		
		/// <summary>
		/// Storage for RoutingMode
		/// </summary>
		private RoutingMode routingModePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RoutingMode domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Routing
		/// Mode
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/RoutingMode.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/RoutingMode.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0572b9bd-8dff-4ba0-ab6c-30a8f2ef5cd7")]
		public RoutingMode RoutingMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return routingModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoutingModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.RoutingMode domain property.
		/// </summary>
		internal sealed partial class RoutingModePropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, RoutingMode>
		{
			private RoutingModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.RoutingMode domain property value handler.
			/// </summary>
			public static readonly RoutingModePropertyHandler Instance = new RoutingModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.RoutingMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoutingModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed RoutingMode GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.routingModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, RoutingMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				RoutingMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.routingModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EdgePoints domain property code
		
		/// <summary>
		/// EdgePoints domain property Id.
		/// </summary>
		public static readonly global::System.Guid EdgePointsDomainPropertyId = new global::System.Guid(0x7f72c213, 0x9822, 0x4a99, 0x9f, 0x4e, 0xbc, 0xce, 0xb9, 0x86, 0x76, 0x61);
		
		/// <summary>
		/// Storage for EdgePoints
		/// </summary>
		private EdgePointCollection edgePointsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of EdgePoints domain property.
		/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo.Edge
		/// Points
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/EdgePoints.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.LinkShapeInfo/EdgePoints.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7f72c213-9822-4a99-9f4e-bcceb9867661")]
		public EdgePointCollection EdgePoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return edgePointsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EdgePointsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LinkShapeInfo.EdgePoints domain property.
		/// </summary>
		internal sealed partial class EdgePointsPropertyHandler : DslModeling::DomainPropertyValueHandler<LinkShapeInfo, EdgePointCollection>
		{
			private EdgePointsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LinkShapeInfo.EdgePoints domain property value handler.
			/// </summary>
			public static readonly EdgePointsPropertyHandler Instance = new EdgePointsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LinkShapeInfo.EdgePoints domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EdgePointsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EdgePointCollection GetValue(LinkShapeInfo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.edgePointsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LinkShapeInfo element, EdgePointCollection newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EdgePointCollection oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.edgePointsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LayoutInfo opposite domain role accessor
		/// <summary>
		/// Gets or sets LayoutInfo.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfo
		/// </summary>
		public virtual LayoutInfo LayoutInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId) as LayoutInfo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.LayoutInfoHasLinkShapeInfos.LinkShapeInfoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// Double-derived base class for DomainClass GraphicalDependenciesDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("05507902-864b-41c9-93a9-12ac6056578f")]
	public abstract partial class GraphicalDependenciesDiagramBase : Diagram
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GraphicalDependenciesDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05507902, 0x864b, 0x41c9, 0x93, 0xa9, 0x12, 0xac, 0x60, 0x56, 0x57, 0x8f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected GraphicalDependenciesDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceDependencyShapes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceDependencyShapes.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<GraphicalDependencyShape> SourceDependencyShapes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicalDependencyShape>, GraphicalDependencyShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesSourceDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			}
		}
		#endregion
		#region TargetDependencyShapes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetDependencyShapes.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<GraphicalDependencyShape> TargetDependencyShapes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicalDependencyShape>, GraphicalDependencyShape>(global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesTargetDependencyShapes.GraphicalDependenciesDiagramDomainRoleId);
			}
		}
		#endregion
		#region MainElementShape opposite domain role accessor
		/// <summary>
		/// Gets or sets MainElementShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagram
		/// </summary>
		public virtual NodeShape MainElementShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId) as NodeShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagramReferencesMainElementShape.GraphicalDependenciesDiagramDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass GraphicalDependenciesDiagram
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependenciesDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
			
	public partial class GraphicalDependenciesDiagram : GraphicalDependenciesDiagramBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public GraphicalDependenciesDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public GraphicalDependenciesDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass GraphicalDependencyLinkShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eb44e89b-62cc-486b-9105-a9d85924768b")]
	public partial class GraphicalDependencyLinkShape : LinkShape
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GraphicalDependencyLinkShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeb44e89b, 0x62cc, 0x486b, 0x91, 0x05, 0xa9, 0xd8, 0x59, 0x24, 0x76, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyLinkShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyLinkShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MainShape opposite domain role accessor
		/// <summary>
		/// Gets or sets MainShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShape
		/// </summary>
		public virtual NodeShape MainShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId) as NodeShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesMainShape.GraphicalDependencyLinkShapeDomainRoleId, value);
			}
		}
		#endregion
		#region DependencyShape opposite domain role accessor
		/// <summary>
		/// Gets or sets DependencyShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShape
		/// </summary>
		public virtual GraphicalDependencyShape DependencyShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId) as GraphicalDependencyShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyLinkShapeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass GraphicalDependencyMainShape
	/// Description for
	/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyMainShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyMainShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyMainShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("446518b6-d194-45ef-a0b4-5231059cce4e")]
	public partial class GraphicalDependencyMainShape : NodeShape
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GraphicalDependencyMainShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x446518b6, 0xd194, 0x45ef, 0xa0, 0xb4, 0x52, 0x31, 0x05, 0x9c, 0xce, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyMainShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyMainShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Tum.PDE.ToolFramework.Modeling.Diagrams
{
	/// <summary>
	/// DomainClass GraphicalDependencyShape
	/// Description for Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape
	/// </summary>
	[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("674603c0-4810-45a5-9209-c902904a4549")]
	public partial class GraphicalDependencyShape : NodeShape
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GraphicalDependencyShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x674603c0, 0x4810, 0x45a5, 0x92, 0x09, 0xc9, 0x02, 0x90, 0x4a, 0x45, 0x49);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicalDependencyShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RelationshipName domain property code
		
		/// <summary>
		/// RelationshipName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipNameDomainPropertyId = new global::System.Guid(0x3ae80a2e, 0x50f8, 0x4307, 0xb4, 0x9f, 0x34, 0xca, 0x36, 0x14, 0x0d, 0x50);
		
		/// <summary>
		/// Storage for RelationshipName
		/// </summary>
		private global::System.String relationshipNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RelationshipName domain property.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape.Relationship
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/RelationshipName.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/RelationshipName.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3ae80a2e-50f8-4307-b49f-34ca36140d50")]
		public global::System.String RelationshipName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationshipNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationshipNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GraphicalDependencyShape.RelationshipName domain property.
		/// </summary>
		internal sealed partial class RelationshipNamePropertyHandler : DslModeling::DomainPropertyValueHandler<GraphicalDependencyShape, global::System.String>
		{
			private RelationshipNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GraphicalDependencyShape.RelationshipName domain property value handler.
			/// </summary>
			public static readonly RelationshipNamePropertyHandler Instance = new RelationshipNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GraphicalDependencyShape.RelationshipName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationshipNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(GraphicalDependencyShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.relationshipNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GraphicalDependencyShape element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationshipNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RelationshipTypeId domain property code
		
		/// <summary>
		/// RelationshipTypeId domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipTypeIdDomainPropertyId = new global::System.Guid(0x74f0876b, 0x131c, 0x4818, 0xa0, 0x1e, 0x2c, 0xba, 0xb9, 0xa2, 0x08, 0x8e);
		
		/// <summary>
		/// Storage for RelationshipTypeId
		/// </summary>
		private global::System.Guid relationshipTypeIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RelationshipTypeId domain property.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape.Relationship
		/// Type Id
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/RelationshipTypeId.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/RelationshipTypeId.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("74f0876b-131c-4818-a01e-2cbab9a2088e")]
		public global::System.Guid RelationshipTypeId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationshipTypeIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationshipTypeIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GraphicalDependencyShape.RelationshipTypeId domain property.
		/// </summary>
		internal sealed partial class RelationshipTypeIdPropertyHandler : DslModeling::DomainPropertyValueHandler<GraphicalDependencyShape, global::System.Guid>
		{
			private RelationshipTypeIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GraphicalDependencyShape.RelationshipTypeId domain property value handler.
			/// </summary>
			public static readonly RelationshipTypeIdPropertyHandler Instance = new RelationshipTypeIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GraphicalDependencyShape.RelationshipTypeId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationshipTypeIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(GraphicalDependencyShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.relationshipTypeIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GraphicalDependencyShape element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationshipTypeIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomInfo domain property code
		
		/// <summary>
		/// CustomInfo domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomInfoDomainPropertyId = new global::System.Guid(0xf80e3b51, 0xce79, 0x43bb, 0xa3, 0x8f, 0x3b, 0xdb, 0x33, 0x1b, 0xa5, 0xee);
		
		/// <summary>
		/// Storage for CustomInfo
		/// </summary>
		private global::System.String customInfoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomInfo domain property.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape.Custom Info
		/// </summary>
		[DslDesign::DisplayNameResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/CustomInfo.DisplayName", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyShape/CustomInfo.Description", typeof(global::Tum.PDE.ToolFramework.Modeling.Diagrams.DiagramsDSLDomainModel), "Tum.PDE.ToolFramework.Modeling.Diagrams.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f80e3b51-ce79-43bb-a38f-3bdb331ba5ee")]
		public global::System.String CustomInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customInfoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomInfoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GraphicalDependencyShape.CustomInfo domain property.
		/// </summary>
		internal sealed partial class CustomInfoPropertyHandler : DslModeling::DomainPropertyValueHandler<GraphicalDependencyShape, global::System.String>
		{
			private CustomInfoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GraphicalDependencyShape.CustomInfo domain property value handler.
			/// </summary>
			public static readonly CustomInfoPropertyHandler Instance = new CustomInfoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GraphicalDependencyShape.CustomInfo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomInfoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(GraphicalDependencyShape element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customInfoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GraphicalDependencyShape element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customInfoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LinkShape opposite domain role accessor
		/// <summary>
		/// Gets or sets LinkShape.
		/// Description for
		/// Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShape
		/// </summary>
		public virtual GraphicalDependencyLinkShape LinkShape
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShapeDomainRoleId) as GraphicalDependencyLinkShape;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Tum.PDE.ToolFramework.Modeling.Diagrams.GraphicalDependencyLinkShapeReferencesDependencyShape.GraphicalDependencyShapeDomainRoleId, value);
			}
		}
		#endregion
	}
}
